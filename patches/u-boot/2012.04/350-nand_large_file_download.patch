tftp: support tftp direct download to NAND flash.

Signed-off-by: Eric Jarrige <eric.jarrige@armadeus.org>
Signed-off-by: Philippe Reynes <tremyfr@yahoo.fr>
Signed-off-by: Nicolas Colombain <nicolas.colombain@armadeus.com>
---
 common/cmd_net.c |   26 ++++++++++++-
 net/tftp.c       |  113 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 138 insertions(+), 1 deletions(-)

diff --git a/common/cmd_net.c b/common/cmd_net.c
index 65f32bc..67bc5f6 100644
--- a/common/cmd_net.c
+++ b/common/cmd_net.c
@@ -28,6 +28,10 @@
 #include <command.h>
 #include <net.h>
 
+#if defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP)
+int tftpboot2nand=0;	/* set to 1 for tftp to nand direct */
+#endif
+
 static int netboot_common(enum proto_t, cmd_tbl_t *, int, char * const []);
 
 int do_bootp (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
@@ -51,11 +55,19 @@ int do_tftpb (cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
 	return ret;
 }
 
+#if defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP)
+U_BOOT_CMD(
+	tftpboot,	4,	1,	do_tftpb,
+	"boot image via network using TFTP protocol",
+	"[loadAddress] [[hostIPaddr:]bootfilename] [nand]"
+);
+#else
 U_BOOT_CMD(
 	tftpboot,	3,	1,	do_tftpb,
 	"boot image via network using TFTP protocol",
 	"[loadAddress] [[hostIPaddr:]bootfilename]"
 );
+#endif
 
 #ifdef CONFIG_CMD_TFTPPUT
 int do_tftpput(cmd_tbl_t *cmdtp, int flag, int argc, char * const argv[])
@@ -197,6 +209,10 @@ static int netboot_common(enum proto_t proto, cmd_tbl_t *cmdtp, int argc,
 	int   size;
 	ulong addr;
 
+#if defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP)
+	tftpboot2nand = 0;
+#endif
+
 	/* pre-set load_addr */
 	if ((s = getenv("loadaddr")) != NULL) {
 		load_addr = simple_strtoul(s, NULL, 16);
@@ -224,8 +240,16 @@ static int netboot_common(enum proto_t proto, cmd_tbl_t *cmdtp, int argc,
 
 		break;
 
-#ifdef CONFIG_CMD_TFTPPUT
 	case 4:
+#if defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP)
+		if( strcmp(argv[3],"nand") == 0 ) {
+			tftpboot2nand = 1;
+			load_addr = simple_strtoul(argv[1], NULL, 16);
+			copy_filename (BootFile, argv[2], sizeof(BootFile));
+			break;
+		}
+#endif
+#ifdef CONFIG_CMD_TFTPPUT
 		if (strict_strtoul(argv[1], 16, &save_addr) < 0 ||
 			strict_strtoul(argv[2], 16, &save_size) < 0) {
 			printf("Invalid address/size\n");
diff --git a/net/tftp.c b/net/tftp.c
index 7aa3e23..c3635c0 100644
--- a/net/tftp.c
+++ b/net/tftp.c
@@ -12,6 +12,11 @@
 #include "tftp.h"
 #include "bootp.h"
 
+#if defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP)
+#include <nand.h>
+extern int tftpboot2nand;
+#endif 
+
 /* Well known TFTP port # */
 #define WELL_KNOWN_PORT	69
 /* Millisecs to timeout for lost pkt */
@@ -38,6 +43,11 @@
 static ulong TftpTimeoutMSecs = TIMEOUT;
 static int TftpTimeoutCountMax = TIMEOUT_COUNT;
 
+#if defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP)
+static int temp_buf_offset = 0;
+unsigned long nand_offset = 0;
+#endif
+
 /*
  * These globals govern the timeout behavior when attempting a connection to a
  * TFTP server. TftpRRQTimeoutMSecs specifies the number of milliseconds to
@@ -113,8 +123,10 @@ static char default_filename[DEFAULT_NAM
 static char tftp_filename[MAX_LEN];
 
 #ifdef CONFIG_SYS_DIRECT_FLASH_TFTP
+#ifndef CONFIG_SYS_NO_FLASH
 extern flash_info_t flash_info[];
 #endif
+#endif
 
 /* 512 is poor choice for ethernet, MTU is typically 1500.
  * Minus eth.hdrs thats 1468.  Can get 2x better throughput with
@@ -157,12 +169,96 @@ mcast_cleanup(void)
 
 #endif	/* CONFIG_MCAST_TFTP */
 
+#if defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP)
+static int tftp_nand_write(nand_info_t *meminfo, uchar *src, unsigned long *offset, size_t *length   )
+{
+	size_t written ;
+	int ret = 0;
+	loff_t offs;
+	int blockstart = -1;
+
+	/* find first non bad block */
+	do {
+		blockstart = (*offset) & (~meminfo->erasesize+1);
+		offs = blockstart;
+		ret = meminfo->block_isbad(meminfo, offs);
+
+		if (ret < 0) {
+			printf("Bad block check failed\n");
+			return -1;
+		}
+		if (ret == 1) {
+			(*offset) = blockstart + meminfo->erasesize;
+/*			printf("\rBad block at 0x%lx "
+			       "in erase block from "
+			       "0x%x will be skipped. new offset %x\n",
+			       (long) offs,
+			       blockstart, *offset);*/
+		}
+	} while ((ret!=0) && (*offset < meminfo->size) );
+
+	if (*offset < meminfo->size)
+	/* write out the page data */
+	ret = nand_write(meminfo, *offset, length, src);
+/*	ret = meminfo->write(meminfo,
+				*offset,
+				meminfo->oobblock,
+				&written,
+				src);*/
+	if (ret != 0) {
+		printf("writing NAND page at offset 0x%lx failed\n",
+		       *offset);
+		return -1;
+	}
+	return ret;
+}
+
+static void tftp_2_nand(uchar * src, unsigned len)
+{
+	#define TFTP2NAND_BUFFER_SIZE 4096
+	static u_char temp_buf[TFTP2NAND_BUFFER_SIZE];
+	size_t nand_page_size;
+	/* retrieve current nand infos */
+	nand_info_t *nand;
+	nand = &nand_info[nand_curr_device];
+
+	nand_page_size = nand->writesize;
+	if ((nand_page_size<<1) > TFTP2NAND_BUFFER_SIZE) {
+		printf("error: NAND page size too big\n");
+		NetState = NETLOOP_FAIL;
+		return;
+	}
+
+	if ((TftpBlkSize<<1) > TFTP2NAND_BUFFER_SIZE) {
+		printf("error: tftp block size too big\n");
+		NetState = NETLOOP_FAIL;
+		return;
+	}
+
+	if (len)
+		(void)memcpy((void *)(temp_buf + temp_buf_offset), src, len);
+	temp_buf_offset += len;
+	if ((temp_buf_offset >= nand_page_size) || (!len) ){
+		if( tftp_nand_write(nand, temp_buf, &nand_offset, &nand_page_size) ){
+			NetState = NETLOOP_FAIL;
+			return;		
+		}		
+		nand_offset += nand_page_size;
+		if (len){
+			temp_buf_offset -= nand_page_size;
+			(void)memcpy((void *)(temp_buf), (void *)(temp_buf+nand_page_size), temp_buf_offset);
+		}
+	}
+}
+#endif
+
 static __inline__ void
 store_block(unsigned block, uchar *src, unsigned len)
 {
 	ulong offset = block * TftpBlkSize + TftpBlockWrapOffset;
 	ulong newsize = offset + len;
 #ifdef CONFIG_SYS_DIRECT_FLASH_TFTP
+#ifndef CONFIG_SYS_NO_FLASH	
 	int i, rc = 0;
 
 	for (i = 0; i < CONFIG_SYS_MAX_FLASH_BANKS; i++) {
@@ -184,6 +280,13 @@ store_block(unsigned block, uchar *src,
 		}
 	}
 	else
+#endif /* CONFIG_SYS_NO_FLASH */
+#ifdef CONFIG_CMD_NAND
+	if (tftpboot2nand) {
+		tftp_2_nand(src, len);
+	}
+	else
+#endif /* CONFIG_CMD_NAND */
 #endif /* CONFIG_SYS_DIRECT_FLASH_TFTP */
 	{
 		(void)memcpy((void *)(load_addr + offset), src, len);
@@ -206,6 +309,10 @@ static void new_transfer(void)
 #ifdef CONFIG_CMD_TFTPPUT
 	TftpFinalBlock = 0;
 #endif
+#if defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP)
+	temp_buf_offset = 0;
+	nand_offset = load_addr;
+#endif
 }
 
 #ifdef CONFIG_CMD_TFTPPUT
@@ -295,6 +402,13 @@ static void update_block_number(void)
 /* The TFTP get or put is complete */
 static void tftp_complete(void)
 {
+#if defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP)
+		/* complete write to nand with last buffer */
+		if (tftpboot2nand)
+			tftp_2_nand(NULL, 0);
+
+#endif /* defined(CONFIG_CMD_NAND) && defined(CONFIG_SYS_DIRECT_FLASH_TFTP) */
+
 #ifdef CONFIG_TFTP_TSIZE
 	/* Print hash marks for the last packet received */
 	while (TftpTsize && TftpNumchars < 49) {
-- 
1.7.4.4

