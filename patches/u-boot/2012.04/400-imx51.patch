Signed-off-by: Eric Jarrige <eric.jarrige@armadeus.org>
Signed-off-by: Philippe Reynes <tremyfr@yahoo.fr>
---
 arch/arm/cpu/armv7/cpu.c                    |    4 +
 arch/arm/cpu/armv7/mx5/asm-offsets.c        |  135 ++++++++++++++++++++++++++-
 arch/arm/cpu/armv7/mx5/lowlevel_init.S      |   85 +++++++++++++++--
 arch/arm/include/asm/arch-mx5/imx-regs.h    |    2 +
 arch/arm/include/asm/arch-mx5/regs_esdctl.h |  130 ++++++++++++++++++++++++++
 5 files changed, 343 insertions(+), 13 deletions(-)
 create mode 100644 arch/arm/include/asm/arch-mx5/regs_esdctl.h

diff --git a/arch/arm/cpu/armv7/cpu.c b/arch/arm/cpu/armv7/cpu.c
index c6fa8ef..5e5b158 100644
--- a/arch/arm/cpu/armv7/cpu.c
+++ b/arch/arm/cpu/armv7/cpu.c
@@ -81,5 +81,9 @@ int cleanup_before_linux(void)
 	 */
 	invalidate_dcache_all();
 
+#ifndef CONFIG_L2_OFF
+/*	v7_outer_cache_enable();*/
+#endif
+
 	return 0;
 }
diff --git a/arch/arm/cpu/armv7/mx5/asm-offsets.c b/arch/arm/cpu/armv7/mx5/asm-offsets.c
index f972498..ba46365 100644
--- a/arch/arm/cpu/armv7/mx5/asm-offsets.c
+++ b/arch/arm/cpu/armv7/mx5/asm-offsets.c
@@ -17,13 +17,15 @@
 
 #include <common.h>
 #include <asm/arch/imx-regs.h>
-
+#include <asm/arch/iomux.h>
+#include <asm/arch/regs_esdctl.h>
 #include <linux/kbuild.h>
 
 int main(void)
 {
 
 	/* Round up to make sure size gives nice stack alignment */
+	COMMENT("ESDCTL");
 	DEFINE(CLKCTL_CCMR, offsetof(struct clkctl, ccr));
 	DEFINE(CLKCTL_CCDR, offsetof(struct clkctl, ccdr));
 	DEFINE(CLKCTL_CSR, offsetof(struct clkctl, csr));
@@ -62,7 +64,8 @@ int main(void)
 	DEFINE(CLKCTL_CCGR7, offsetof(struct clkctl, ccgr7));
 #endif
 
-	/* DPLL */
+	BLANK();
+	COMMENT("DPLL");
 	DEFINE(PLL_DP_CTL, offsetof(struct dpll, dp_ctl));
 	DEFINE(PLL_DP_CONFIG, offsetof(struct dpll, dp_config));
 	DEFINE(PLL_DP_OP, offsetof(struct dpll, dp_op));
@@ -72,5 +75,133 @@ int main(void)
 	DEFINE(PLL_DP_HFS_MFD, offsetof(struct dpll, dp_hfs_mfd));
 	DEFINE(PLL_DP_HFS_MFN, offsetof(struct dpll, dp_hfs_mfn));
 
+#if defined(CONFIG_MX51)
+	BLANK();
+	COMMENT("ESDCTL");
+	DEFINE(ESDCTL_ESDCTL0, offsetof(struct esdctl_regs, esdctl0));
+	DEFINE(ESDCTL_ESDCFG0, offsetof(struct esdctl_regs, esdcfg0));
+	DEFINE(ESDCTL_ESDCTL1, offsetof(struct esdctl_regs, esdctl1));
+	DEFINE(ESDCTL_ESDCFG1, offsetof(struct esdctl_regs, esdcfg1));
+	DEFINE(ESDCTL_ESDMISC, offsetof(struct esdctl_regs, esdmisc));
+	DEFINE(ESDCTL_ESDSCR, offsetof(struct esdctl_regs, esdscr));
+	DEFINE(ESDCTL_ESDCDLY1, offsetof(struct esdctl_regs, esdcdly1));
+	DEFINE(ESDCTL_ESDCDLY2, offsetof(struct esdctl_regs, esdcdly2));
+	DEFINE(ESDCTL_ESDCDLY3, offsetof(struct esdctl_regs, esdcdly3));
+	DEFINE(ESDCTL_ESDCDLY4, offsetof(struct esdctl_regs, esdcdly4));
+	DEFINE(ESDCTL_ESDCDLY5, offsetof(struct esdctl_regs, esdcdly5));
+	DEFINE(ESDCTL_ESDGPR, offsetof(struct esdctl_regs, esdgpr));
+	DEFINE(ESDCTL_ESDPRCT0, offsetof(struct esdctl_regs, esdprct0));
+	DEFINE(ESDCTL_ESDPRCT1, offsetof(struct esdctl_regs, esdprct1));
+	BLANK();
+	COMMENT("IOMUX");
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDRPKS, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDRPKS));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_PKEDDR, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_PKEDDR));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_PKEADDR, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_PKEADDR));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDRAPKS, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDRAPKS));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDRAPUS, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDRAPUS));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDRPUS, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDRPUS));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_HYSDDR0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_HYSDDR0));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_HYSDDR1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_HYSDDR1));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_HYSDDR2, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_HYSDDR2));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_HYSDDR3, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_HYSDDR3));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDR_SR_B0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDR_SR_B0));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDR_SR_B1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDR_SR_B1));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDR_SR_B2, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDR_SR_B2));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDR_SR_B4, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDR_SR_B4));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DRAM_B0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DRAM_B0));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DRAM_B1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DRAM_B1));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DRAM_B2, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DRAM_B2));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DRAM_B4, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DRAM_B4));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_INMODE1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_INMODE1));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDR_SR_A0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDR_SR_A0));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_EMI_DS5, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_EMI_DS5));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDR_SR_A1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDR_SR_A1));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDR_A0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDR_A0));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DDR_A1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DDR_A1));
+	DEFINE(IOMUXC_SW_PAD_CTL_GRP_DISP_PKE0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_GRP_DISP_PKE0));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_RAS));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_CAS));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_SDWE));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_SDCKE0));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_SDCKE1));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_SDCLK));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_SDQS0));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_SDQS1));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_SDQS2));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_SDQS3));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_CS0));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_CS1));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_DQM0));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_DQM1));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_DQM2));
+	DEFINE(IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3, PAD_I_START
+				+ PIN_TO_IOMUX_PAD(MX51_PIN_CTL_DRAM_DQM3));
+
+	BLANK();
+	COMMENT("various IOMUX pad functions");
+	DEFINE(PAD_CTL_SRE_SLOW, PAD_CTL_SRE_SLOW);
+	DEFINE(PAD_CTL_SRE_FAST, PAD_CTL_SRE_FAST);
+	DEFINE(PAD_CTL_DRV_LOW, PAD_CTL_DRV_LOW);
+	DEFINE(PAD_CTL_DRV_MEDIUM, PAD_CTL_DRV_MEDIUM);
+	DEFINE(PAD_CTL_DRV_HIGH, PAD_CTL_DRV_HIGH);
+	DEFINE(PAD_CTL_DRV_MAX, PAD_CTL_DRV_MAX);
+	DEFINE(PAD_CTL_ODE_OPENDRAIN_NONE, PAD_CTL_ODE_OPENDRAIN_NONE);
+	DEFINE(PAD_CTL_ODE_OPENDRAIN_ENABLE, PAD_CTL_ODE_OPENDRAIN_ENABLE);
+	DEFINE(PAD_CTL_100K_PD, PAD_CTL_100K_PD);
+	DEFINE(PAD_CTL_47K_PU, PAD_CTL_47K_PU);
+	DEFINE(PAD_CTL_100K_PU, PAD_CTL_100K_PU);
+	DEFINE(PAD_CTL_22K_PU, PAD_CTL_22K_PU);
+	DEFINE(PAD_CTL_PUE_KEEPER, PAD_CTL_PUE_KEEPER);
+	DEFINE(PAD_CTL_PUE_PULL, PAD_CTL_PUE_PULL);
+	DEFINE(PAD_CTL_PUE_PULL, PAD_CTL_PUE_PULL);
+	DEFINE(PAD_CTL_PKE_NONE, PAD_CTL_PKE_NONE);
+	DEFINE(PAD_CTL_PKE_ENABLE, PAD_CTL_PKE_ENABLE);
+	DEFINE(PAD_CTL_HYS_NONE, PAD_CTL_HYS_NONE);
+	DEFINE(PAD_CTL_HYS_ENABLE, PAD_CTL_HYS_ENABLE);
+	DEFINE(PAD_CTL_DDR_INPUT_CMOS, PAD_CTL_DDR_INPUT_CMOS);
+	DEFINE(PAD_CTL_DDR_INPUT_DDR, PAD_CTL_DDR_INPUT_DDR);
+	DEFINE(PAD_CTL_DRV_VOT_HIGH, PAD_CTL_DRV_VOT_HIGH);
+	DEFINE(PAD_CTL_DRV_VOT_LOW, PAD_CTL_DRV_VOT_LOW);
+#endif
 	return 0;
 }
diff --git a/arch/arm/cpu/armv7/mx5/lowlevel_init.S b/arch/arm/cpu/armv7/mx5/lowlevel_init.S
index 74ab753..3286c8e 100644
--- a/arch/arm/cpu/armv7/mx5/lowlevel_init.S
+++ b/arch/arm/cpu/armv7/mx5/lowlevel_init.S
@@ -23,6 +23,34 @@
 #include <asm/arch/imx-regs.h>
 #include <generated/asm-offsets.h>
 
+#ifndef CONFIG_SYS_PLL_DP_CTL
+/* use internal oscillator */
+#define CONFIG_SYS_PLL_DP_CTL	0x00001232
+#endif
+
+#ifndef CONFIG_SYS_CLKCTL_CCSR
+/* use internal oscillator */
+#define CONFIG_SYS_CLKCTL_CCSR	0x00000000
+#endif
+
+#ifndef CONFIG_SYS_CLKTL_CBCDR
+#define CONFIG_SYS_CLKTL_CBCDR	0x59E35100
+#endif
+
+#ifndef CONFIG_SYS_CLKTL_CBCMR
+/* Use lp_apm (24MHz) source for perclk */
+#define CONFIG_SYS_CLKTL_CBCMR	0x000020C2
+#endif
+
+#ifndef CONFIG_SYS_CLKTL_CSCDR1
+#define CONFIG_SYS_CLKTL_CSCDR1 0x00C30321
+#endif
+
+#ifndef CONFIG_SYS_CLKTL_CBCMR1
+/* Use PLL 2 for UART's, get 66.5MHz from it */
+#define CONFIG_SYS_CLKTL_CBCMR1 0xA5A2A020
+#endif
+
 /*
  * L2CC Cache setup/invalidation/disable
  */
@@ -97,7 +125,7 @@
 
 .macro setup_pll pll, freq
 	ldr r0, =\pll
-	ldr r1, =0x00001232
+	ldr r1, =CONFIG_SYS_PLL_DP_CTL
 	str r1, [r0, #PLL_DP_CTL] /* Set DPLL ON (set UPEN bit): BRMO=1 */
 	mov r1, #0x2
 	str r1, [r0, #PLL_DP_CONFIG] /* Enable auto-restart AREN bit */
@@ -114,7 +142,7 @@
 	str r1, [r0, #PLL_DP_MFN]
 	str r1, [r0, #PLL_DP_HFS_MFN]
 
-	ldr r1, =0x00001232
+	ldr r1, =CONFIG_SYS_PLL_DP_CTL
 	str r1, [r0, #PLL_DP_CTL]
 1:	ldr r1, [r0, #PLL_DP_CTL]
 	ands r1, r1, #0x1
@@ -125,7 +153,7 @@
 	ldr r2, =\pll
 	mov r1, #0x0
 	str r1, [r2, #PLL_DP_CONFIG] /* Disable auto-restart AREN bit */
-	ldr r1, =0x00001236
+	ldr r1, =CONFIG_SYS_PLL_DP_CTL  | 0x04
 	str r1, [r2, #PLL_DP_CTL]    /* Restart PLL with PLM=1 */
 1:	ldr r1, [r2, #PLL_DP_CTL]    /* Wait for lock */
 	ands r1, r1, #0x1
@@ -154,6 +182,16 @@
 	ldr r0, =CCM_BASE_ADDR
 
 #if defined(CONFIG_MX51)
+#ifdef CONFIG_SYS_CLKCTL_CCMR
+	ldr r1, =CONFIG_SYS_CLKCTL_CCMR
+	str r1, [r0, #CLKCTL_CCMR]
+
+	/* make sure clocks are ready */
+1:	ldr r1, [r0, #CLKCTL_CSR]
+	cmp r1, #CONFIG_SYS_CLKCTL_CSR
+	bne 1b
+#endif
+
 	/* Gate of clocks to the peripherals first */
 	ldr r1, =0x3FFFFFFF
 	str r1, [r0, #CLKCTL_CCGR0]
@@ -198,7 +236,7 @@
 #endif
 
 	/* Switch ARM to step clock */
-	mov r1, #0x4
+	mov r1, #CONFIG_SYS_CLKCTL_CCSR | 0x04
 	str r1, [r0, #CLKCTL_CCSR]
 
 #if defined(CONFIG_MX51_PLL_ERRATA)
@@ -250,16 +288,16 @@
 #endif
 	str r1, [r0, #CLKCTL_CACRR]
 	/* Switch ARM back to PLL 1 */
-	mov r1, #0
+	mov r1, #CONFIG_SYS_CLKCTL_CCSR
 	str r1, [r0, #CLKCTL_CCSR]
 
 #if defined(CONFIG_MX51)
 	/* setup the rest */
-	/* Use lp_apm (24MHz) source for perclk */
-	ldr r1, =0x000020C2
+	/* select source for perclk */
+	ldr r1, =CONFIG_SYS_CLKTL_CBCMR
 	orr r1,r1,#CONFIG_SYS_DDR_CLKSEL
 	str r1, [r0, #CLKCTL_CBCMR]
-	/* ddr clock from PLL 1, all perclk dividers are 1 since using 24MHz */
+	/* ddr clock from PLL 1 */
 	ldr r1, =CONFIG_SYS_CLKTL_CBCDR
 	str r1, [r0, #CLKCTL_CBCDR]
 #endif
@@ -279,9 +317,9 @@
 
 #if defined(CONFIG_MX51)
 	/* Use PLL 2 for UART's, get 66.5MHz from it */
-	ldr r1, =0xA5A2A020
+	ldr r1, =CONFIG_SYS_CLKTL_CBCMR1
 	str r1, [r0, #CLKCTL_CSCMR1]
-	ldr r1, =0x00C30321
+	ldr r1, =CONFIG_SYS_CLKTL_CSCDR1
 	str r1, [r0, #CLKCTL_CSCDR1]
 #elif defined(CONFIG_MX53)
 	/* Switch peripheral to PLL2 */
@@ -346,9 +384,34 @@ lowlevel_init:
 
 	init_clock
 
-	/* r12 saved upper lr*/
+/* make U-Boot runnable form "almost" anywhere */
+/* but SYS_TEXT_BASE should be in RAM */
+copy2ram:		/* populate _TEXT_BASE with U-Boot from load addr */
+	ldr	r0, _start_adr
+	ldr	r1, _copy2ram
+	sub	r1, r1, r0
+	adr	r0, copy2ram
+	sub	r0, r0, r1
+	ldr	r1, =CONFIG_SYS_TEXT_BASE
+	cmp	r0, r1
+	beq	end_of_copy2ram		/* skip U-Boot copy */
+	ldr	r2, =CONFIG_SYS_MONITOR_LEN
+	add	r2, r2, r0		/* r2 <- source end address	    */
+
+copy_loop:
+	ldmia	r0!, {r9-r10}		/* copy from source address [r0]    */
+	stmia	r1!, {r9-r10}		/* copy to   target address [r1]    */
+	cmp	r0, r2			/* until source end address [r2]    */
+	blo	copy_loop
+
+end_of_copy2ram:
 	mov pc,lr
 
+_copy2ram:
+	.word copy2ram
+_start_adr:
+	.word _start	/* r12 saved upper lr*/
+
 /* Board level setting value */
 W_DP_OP_864:              .word DP_OP_864
 W_DP_MFD_864:             .word DP_MFD_864
diff --git a/arch/arm/include/asm/arch-mx5/imx-regs.h b/arch/arm/include/asm/arch-mx5/imx-regs.h
index 4fa6658..36c6c84 100644
--- a/arch/arm/include/asm/arch-mx5/imx-regs.h
+++ b/arch/arm/include/asm/arch-mx5/imx-regs.h
@@ -266,6 +266,7 @@
 #define M4IF_FBPM0	0x40
 #define M4IF_FIDBP	0x48
 
+#ifndef DP_OP_800
 /* Assuming 24MHz input clock with doubler ON */
 /*                            MFI         PDF */
 #define DP_OP_864	((8 << 4) + ((1 - 1)  << 0))
@@ -300,6 +301,7 @@
 #define DP_OP_216	((6 << 4) + ((3 - 1)  << 0))
 #define DP_MFD_216	(4 - 1)
 #define DP_MFN_216	3
+#endif /* DP_OP_800 */
 
 #define CHIP_REV_1_0            0x10
 #define CHIP_REV_1_1            0x11
diff --git a/arch/arm/include/asm/arch-mx5/regs_esdctl.h b/arch/arm/include/asm/arch-mx5/regs_esdctl.h
new file mode 100644
index 0000000..c1707af
--- /dev/null
+++ b/arch/arm/include/asm/arch-mx5/regs_esdctl.h
@@ -0,0 +1,131 @@
+/*
+ * Copyright (C) 2012
+ * Eric Jarrige, Armadeus Project, <eric.jarrige@armadeus.org>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+
+#ifndef __REGS_ESDCTL_H__
+#define __REGS_ESDCTL_H__
+
+
+#ifndef	__ASSEMBLY__
+/* ESDCTL registers */
+#if defined(CONFIG_MX51)
+struct esdctl_regs {
+	u32	esdctl0;
+	u32	esdcfg0;
+	u32	esdctl1;
+	u32	esdcfg1;
+	u32	esdmisc;
+	u32	esdscr;
+	u32	reserved[2];
+	u32	esdcdly1;
+	u32	esdcdly2;
+	u32	esdcdly3;
+	u32	esdcdly4;
+	u32	esdcdly5;
+	u32	esdgpr;
+	u32	esdprct0;
+	u32	esdprct1;
+};
+#elif defined(CONFIG_MX53)
+struct esdctl_regs {
+	u32	esdctl;
+	u32	esdpdc;
+	u32	esdotc;
+	u32	esdcfg0;
+	u32	esdcfg1;
+	u32	esdcfg2;
+	u32	esdmisc;
+	u32	esdscr;
+	u32	esdref;
+	u32	esdwcc;
+	u32	esdrcc;
+	u32	esdrwd;
+	u32	esdor;
+	u32	esdmrr;
+	u32	esdcfg3_lp;
+	u32	esdmr4;
+	u32	zqhwctrl;
+	u32	zqswctrl;
+	u32	wlgcr;
+	u32	wldectrl0;
+	u32	wldectrl1;
+	u32	wldlst;
+	u32	odtctrl;
+	u32	rddqby0dl;
+	u32	rddqby1dl;
+	u32	rddqby2dl;
+	u32	rddqby3dl;
+	u32	wrdqby0dl;
+	u32	wrdqby1dl;
+	u32	wrdqby2dl;
+	u32	wrdqby3dl;
+	u32	dgctrl0;
+	u32	dgctrl1;
+	u32	dgdlst;
+	u32	rddlctl;
+	u32	rddlst;
+	u32	wrlctl;
+	u32	wrlst;
+	u32	sdctrl;
+	u32	zqlp2ctl;
+	u32	rddlhwctl;
+	u32	wrdlhwctl;
+	u32	rddlhwst0;
+	u32	rddlhwst1;
+	u32	wrdlhwst0;
+	u32	wrdlhwst1;
+	u32	wlhwerr;
+	u32	dghwst0;
+	u32	dghwst1;
+	u32	dghwst2;
+	u32	dghwst3;
+	u32	pdcmpr1;
+	u32	pdcmpr2;
+	u32	swdar;
+	u32	swdrdr0;
+	u32	swdrdr1;
+	u32	swdrdr2;
+	u32	swdrdr3;
+	u32	swdrdr4;
+	u32	swdrdr5;
+	u32	swdrdr6;
+	u32	swdrdr7;
+	u32	mur;
+	u32	wrcadl;
+};
+#endif
+
+#endif /* __ASSEMBLY__ */
+
+/* DDR commands */
+/* cs ChipSelect in range of 0..1 */
+/* ba Bank Address in range of 0..3 */
+/* addr Pseudo Address as expected by the DDR */
+
+#define DDR_NOP_CMD(cs)		(0x00008000 + (cs << 2))
+#define DRR_PRECHARGE_CMD(cs, ba)	(0x04008008 + (cs << 2) + ba)
+#define DRR_AUTOREFRESH_CMD(cs)	(0x00008010 + (cs << 2))
+#define DRR_LMR_CMD(cs, ba, addr)	(0x00008018 + (addr << 16)\
+						+ (cs << 2) + ba)
+
+#endif /* __REGS_ESDCTL_H__ */
-- 
1.7.4.4

