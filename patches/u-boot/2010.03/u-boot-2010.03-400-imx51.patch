Index: u-boot-2010.03/cpu/arm_cortexa8/mx51/clock.c
===================================================================
--- u-boot-2010.03.orig/cpu/arm_cortexa8/mx51/clock.c	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/cpu/arm_cortexa8/mx51/clock.c	2011-01-05 18:11:04.000000000 +0100
@@ -3,6 +3,7 @@
  * Sascha Hauer, Pengutronix
  *
  * (C) Copyright 2009 Freescale Semiconductor, Inc.
+ * (C) Copyright 2010 Eric Jarrige, Armadeus Project
  *
  * See file CREDITS for list of people who contributed to this
  * project.
@@ -24,6 +25,7 @@
  */
 
 #include <common.h>
+#include <div64.h>
 #include <asm/io.h>
 #include <asm/errno.h>
 #include <asm/arch/imx-regs.h>
@@ -59,7 +61,24 @@
 	mfi = (mfi >> 4) & 0xF;
 	mfi = (mfi >= 5) ? mfi : 5;
 
-	return ((4 * (infreq / 1000) * (mfi * mfd + mfn)) / (mfd * pd)) * 1000;
+	return lldiv(4 * (u64)CONFIG_MX51_HCLK_FREQ * (mfi * mfd + mfn),
+			mfd * pd);;
+}
+
+/*
+ * This function returns the low power audio clock.
+ */
+u32 get_lp_apm(void)
+{
+	u32 ret_val = 0;
+	u32 ccsr = __raw_readl(&mxc_ccm->ccsr);
+
+	if (((ccsr >> 9) & 1) == 0)
+		ret_val = CONFIG_MX51_HCLK_FREQ;
+	else
+		ret_val = ((32768 * 1024));
+
+	return ret_val;
 }
 
 /*
@@ -93,24 +112,128 @@
 	case 1:
 		return decode_pll(mxc_plls[PLL3_CLOCK], CONFIG_MX51_HCLK_FREQ);
 	default:
-		return 0;
+		return get_lp_apm();
 	}
 	/* NOTREACHED */
 }
 
 /*
- * Get the rate of ipg clock.
+ * Get the rate of axi_a clock.
  */
-static u32 get_ipg_clk(void)
+static u32 get_axi_a_clk(void)
+{
+	u32 axi_a_podf;
+
+	axi_a_podf = __raw_readl(&mxc_ccm->cbcdr);
+	axi_a_podf = (axi_a_podf & MXC_CCM_CBCDR_AXI_A_PODF_MASK) >>
+			MXC_CCM_CBCDR_AXI_A_PODF_OFFSET;
+	return get_periph_clk() / (axi_a_podf + 1);
+}
+
+/*
+ * Get the rate of axi_b clock.
+ */
+static u32 get_axi_b_clk(void)
 {
-	u32 ahb_podf, ipg_podf;
+	u32 axi_b_podf;
+
+	axi_b_podf = __raw_readl(&mxc_ccm->cbcdr);
+	axi_b_podf = (axi_b_podf & MXC_CCM_CBCDR_AXI_B_PODF_MASK) >>
+			MXC_CCM_CBCDR_AXI_B_PODF_OFFSET;
+	return get_periph_clk() / (axi_b_podf + 1);
+}
+
+/*
+ * Get the rate of AHB clock.
+ */
+static u32 get_ahb_clk(void)
+{
+	u32 ahb_podf;
 
 	ahb_podf = __raw_readl(&mxc_ccm->cbcdr);
-	ipg_podf = (ahb_podf & MXC_CCM_CBCDR_IPG_PODF_MASK) >>
-			MXC_CCM_CBCDR_IPG_PODF_OFFSET;
 	ahb_podf = (ahb_podf & MXC_CCM_CBCDR_AHB_PODF_MASK) >>
 			MXC_CCM_CBCDR_AHB_PODF_OFFSET;
-	return get_periph_clk() / ((ahb_podf + 1) * (ipg_podf + 1));
+	return get_periph_clk() / (ahb_podf + 1);
+}
+
+/*
+ * Get the rate of EMI slow clock.
+ */
+static u32 get_emi_clk(void)
+{
+	u32 emi_podf;
+	emi_podf = __raw_readl(&mxc_ccm->cbcdr);
+	emi_podf = (emi_podf & MXC_CCM_CBCDR_EMI_PODF_MASK) >>
+			MXC_CCM_CBCDR_EMI_PODF_OFFSET;
+	/* if emi_clock_sel */
+	if (__raw_readl(&mxc_ccm->cbcdr) & MXC_CCM_CBCDR_EMI_CLK_SEL)
+		return get_ahb_clk()/ (emi_podf + 1);
+	else
+		return get_periph_clk() / (emi_podf + 1);
+}
+
+/*
+ * Get the rate of NFC clock.
+ */
+static u32 get_nfc_clk(void)
+{
+	u32 nfc_podf;
+
+	nfc_podf = __raw_readl(&mxc_ccm->cbcdr);
+	nfc_podf = (nfc_podf & MXC_CCM_CBCDR_NFC_PODF_MASK) >>
+			MXC_CCM_CBCDR_NFC_PODF_OFFSET;
+	return get_emi_clk() / (nfc_podf + 1);
+}
+
+/*
+ * Get the rate of CBCMR selection clock.
+ */
+static u32 get_cbcmr_sel_clk(u32 clk_msk, u32 clk_offset)
+{
+	switch ((__raw_readl(&mxc_ccm->cbcmr) & clk_msk) >> clk_offset) {
+	case 0:
+		return get_axi_a_clk();
+	case 1:
+		return get_axi_b_clk();
+	case 2:
+		return get_emi_clk();
+	default:
+		return get_ahb_clk();
+	}
+}
+
+/*
+ * Get the rate of DDR clock.
+ */
+static u32 get_ddr_clk(void)
+{
+	if (__raw_readl(&mxc_ccm->cbcdr) & MXC_CCM_CBCDR_DDR_CLK_SEL) {
+		u32 ddr_podf;
+
+		ddr_podf = __raw_readl(&mxc_ccm->cbcdr);
+		ddr_podf = (ddr_podf & MXC_CCM_CBCDR_DDR_PODF_MASK) >>
+			MXC_CCM_CBCDR_DDR_PODF_OFFSET;
+		return decode_pll(mxc_plls[PLL1_CLOCK], CONFIG_MX51_HCLK_FREQ) /
+			(ddr_podf + 1);
+	}
+	else
+	{
+		return get_cbcmr_sel_clk(MXC_CCM_CBCMR_DDR_CLK_SEL_MASK,
+			MXC_CCM_CBCMR_DDR_CLK_SEL_OFFSET);
+	}
+}
+
+/*
+ * Get the rate of ipg clock.
+ */
+static u32 get_ipg_clk(void)
+{
+	u32 ipg_podf;
+
+	ipg_podf = __raw_readl(&mxc_ccm->cbcdr);
+	ipg_podf = (ipg_podf & MXC_CCM_CBCDR_IPG_PODF_MASK) >>
+			MXC_CCM_CBCDR_IPG_PODF_OFFSET;
+	return get_ahb_clk() / (ipg_podf + 1);
 }
 
 /*
@@ -131,61 +254,174 @@
 	podf = (podf & MXC_CCM_CBCDR_PERCLK_PODF_MASK) >>
 		MXC_CCM_CBCDR_PERCLK_PODF_OFFSET;
 
-	return get_periph_clk() / ((pred1 + 1) * (pred2 + 1) * (podf + 1));
+	if (__raw_readl(&mxc_ccm->cbcmr) & MXC_CCM_CBCMR_PERCLK_LP_APM_CLK_SEL)
+		return get_lp_apm() / ((pred1 + 1) * (pred2 + 1) * (podf + 1));
+	else
+		return get_periph_clk() /
+			((pred1 + 1) * (pred2 + 1) * (podf + 1));
 }
 
 /*
- * Get the rate of uart clk.
+ * Get the rate of CSCMR1 selection clock.
  */
-static u32 get_uart_clk(void)
+static u32 get_cscmr1_sel_clk(u32 clk_msk, u32 clk_offset)
 {
-	unsigned int freq, reg, pred, podf;
+	switch ((__raw_readl(&mxc_ccm->cscmr1) & clk_msk) >> clk_offset) {
+	case 0:
+		return decode_pll(mxc_plls[PLL1_CLOCK],
+				    CONFIG_MX51_HCLK_FREQ);
+	case 1:
+		return decode_pll(mxc_plls[PLL2_CLOCK],
+				    CONFIG_MX51_HCLK_FREQ);
+	case 2:
+		return decode_pll(mxc_plls[PLL3_CLOCK],
+				    CONFIG_MX51_HCLK_FREQ);
+	default:
+		return get_lp_apm();
+	}
+}
 
-	reg = __raw_readl(&mxc_ccm->cscmr1);
-	switch ((reg & MXC_CCM_CSCMR1_UART_CLK_SEL_MASK) >>
-		MXC_CCM_CSCMR1_UART_CLK_SEL_OFFSET) {
-	case 0x0:
-		freq = decode_pll(mxc_plls[PLL1_CLOCK],
+/*
+ * Get the rate of CSCMR2 selection clock.
+ */
+static u32 get_cscmr2_sel_clk(u32 clk_msk, u32 clk_offset)
+{
+	switch ((__raw_readl(&mxc_ccm->cscmr2) & clk_msk) >> clk_offset) {
+	case 0:
+		return decode_pll(mxc_plls[PLL1_CLOCK],
 				    CONFIG_MX51_HCLK_FREQ);
-		break;
-	case 0x1:
-		freq = decode_pll(mxc_plls[PLL2_CLOCK],
+	case 1:
+		return decode_pll(mxc_plls[PLL2_CLOCK],
 				    CONFIG_MX51_HCLK_FREQ);
-		break;
-	case 0x2:
-		freq = decode_pll(mxc_plls[PLL3_CLOCK],
+	case 2:
+		return decode_pll(mxc_plls[PLL3_CLOCK],
 				    CONFIG_MX51_HCLK_FREQ);
-		break;
 	default:
-		return 66500000;
+		return get_lp_apm();
 	}
+}
+
+/*
+ * Get the rate of USBOH3 clk.
+ */
+static u32 get_usboh3_clk(void)
+{
+	unsigned int freq, reg, pred, podf;
+
+	freq = get_cscmr1_sel_clk( MXC_CCM_CSCMR1_USBOH3_CLK_SEL_MASK,
+			MXC_CCM_CSCMR1_USBOH3_CLK_SEL_OFFSET);
 
 	reg = __raw_readl(&mxc_ccm->cscdr1);
 
-	pred = (reg & MXC_CCM_CSCDR1_UART_CLK_PRED_MASK) >>
-		MXC_CCM_CSCDR1_UART_CLK_PRED_OFFSET;
+	pred = (reg & MXC_CCM_CSCDR1_USBOH3_CLK_PRED_MASK) >>
+		MXC_CCM_CSCDR1_USBOH3_CLK_PRED_OFFSET;
 
-	podf = (reg & MXC_CCM_CSCDR1_UART_CLK_PODF_MASK) >>
-		MXC_CCM_CSCDR1_UART_CLK_PODF_OFFSET;
+	podf = (reg & MXC_CCM_CSCDR1_USBOH3_CLK_PODF_MASK) >>
+		MXC_CCM_CSCDR1_USBOH3_CLK_PODF_OFFSET;
 	freq /= (pred + 1) * (podf + 1);
 
 	return freq;
 }
 
 /*
- * This function returns the low power audio clock.
+ * Get the rate of ESDHC clk.
  */
-u32 get_lp_apm(void)
+static u32 get_esdhc1_clk(void)
 {
-	u32 ret_val = 0;
-	u32 ccsr = __raw_readl(&mxc_ccm->ccsr);
+	unsigned int freq, reg, pred, podf;
 
-	if (((ccsr >> 9) & 1) == 0)
-		ret_val = CONFIG_MX51_HCLK_FREQ;
-	else
-		ret_val = ((32768 * 1024));
+	freq = get_cscmr1_sel_clk( MXC_CCM_CSCMR1_ESDHC1_MSHC1_CLK_SEL_MASK,
+			MXC_CCM_CSCMR1_ESDHC1_MSHC1_CLK_SEL_OFFSET);
 
-	return ret_val;
+	reg = __raw_readl(&mxc_ccm->cscdr1);
+
+	pred = (reg & MXC_CCM_CSCDR1_ESDHC1_MSHC1_CLK_PRED_MASK) >>
+		MXC_CCM_CSCDR1_ESDHC1_MSHC1_CLK_PRED_OFFSET;
+
+	podf = (reg & MXC_CCM_CSCDR1_ESDHC1_MSHC1_CLK_PODF_MASK) >>
+		MXC_CCM_CSCDR1_ESDHC1_MSHC1_CLK_PODF_OFFSET;
+	freq /= (pred + 1) * (podf + 1);
+
+	return freq;
+}
+
+static u32 get_esdhc2_clk(void)
+{
+	unsigned int freq, reg, pred, podf;
+
+	freq = get_cscmr1_sel_clk( MXC_CCM_CSCMR1_ESDHC2_MSHC2_CLK_SEL_MASK,
+			MXC_CCM_CSCMR1_ESDHC2_MSHC2_CLK_SEL_OFFSET);
+
+	reg = __raw_readl(&mxc_ccm->cscdr1);
+
+	pred = (reg & MXC_CCM_CSCDR1_ESDHC2_MSHC2_CLK_PRED_MASK) >>
+		MXC_CCM_CSCDR1_ESDHC2_MSHC2_CLK_PRED_OFFSET;
+
+	podf = (reg & MXC_CCM_CSCDR1_ESDHC2_MSHC2_CLK_PODF_MASK) >>
+		MXC_CCM_CSCDR1_ESDHC2_MSHC2_CLK_PODF_OFFSET;
+	freq /= (pred + 1) * (podf + 1);
+
+	return freq;
+}
+
+static u32 get_hsi2c_clk(void)
+{
+	unsigned int freq, reg, pred, podf;
+
+	freq = get_cscmr2_sel_clk( MXC_CCM_CSCMR2_HSI2C_CLK_SEL_MASK,
+			MXC_CCM_CSCMR2_HSI2C_CLK_SEL_OFFSET);
+
+	reg = __raw_readl(&mxc_ccm->cscdr3);
+
+	pred = (reg & MXC_CCM_CSCDR3_HSI2C_CLK_PRED_MASK) >>
+		MXC_CCM_CSCDR3_HSI2C_CLK_PRED_OFFSET;
+
+	podf = (reg & MXC_CCM_CSCDR3_HSI2C_CLK_PODF_MASK) >>
+		MXC_CCM_CSCDR3_HSI2C_CLK_PODF_OFFSET;
+	freq /= (pred + 1) * (podf + 1);
+
+	return freq;
+}
+
+static u32 get_csi1_clk(void)
+{
+	unsigned int freq, reg, pred, podf;
+
+	freq = get_cscmr2_sel_clk( MXC_CCM_CSCMR2_CSI1_CLK_SEL_MASK,
+			MXC_CCM_CSCMR2_CSI1_CLK_SEL_OFFSET);
+
+	reg = __raw_readl(&mxc_ccm->cscdr4);
+
+	pred = (reg & MXC_CCM_CSCDR4_CSI1_CLK_PRED_MASK) >>
+		MXC_CCM_CSCDR4_CSI1_CLK_PRED_OFFSET;
+
+	podf = (reg & MXC_CCM_CSCDR4_CSI1_CLK_PODF_MASK) >>
+		MXC_CCM_CSCDR4_CSI1_CLK_PODF_OFFSET;
+	freq /= (pred + 1) * (podf + 1);
+
+	return freq;
+}
+
+/*
+ * Get the rate of uart clk.
+ */
+static u32 get_uart_clk(void)
+{
+	unsigned int freq, reg, pred, podf;
+
+	freq = get_cscmr1_sel_clk( MXC_CCM_CSCMR1_UART_CLK_SEL_MASK,
+			MXC_CCM_CSCMR1_UART_CLK_SEL_OFFSET);
+
+	reg = __raw_readl(&mxc_ccm->cscdr1);
+
+	pred = (reg & MXC_CCM_CSCDR1_UART_CLK_PRED_MASK) >>
+		MXC_CCM_CSCDR1_UART_CLK_PRED_OFFSET;
+
+	podf = (reg & MXC_CCM_CSCDR1_UART_CLK_PODF_MASK) >>
+		MXC_CCM_CSCDR1_UART_CLK_PODF_OFFSET;
+	freq /= (pred + 1) * (podf + 1);
+
+	return freq;
 }
 
 /*
@@ -193,39 +429,18 @@
  */
 u32 imx_get_cspiclk(void)
 {
-	u32 ret_val = 0, pdf, pre_pdf, clk_sel;
-	u32 cscmr1 = __raw_readl(&mxc_ccm->cscmr1);
+	u32 freq, pdf, pre_pdf;
 	u32 cscdr2 = __raw_readl(&mxc_ccm->cscdr2);
 
+	freq = get_cscmr1_sel_clk( MXC_CCM_CSCMR1_CSPI_CLK_SEL_MASK,
+			MXC_CCM_CSCMR1_CSPI_CLK_SEL_OFFSET);
+
 	pre_pdf = (cscdr2 & MXC_CCM_CSCDR2_CSPI_CLK_PRED_MASK) \
 			>> MXC_CCM_CSCDR2_CSPI_CLK_PRED_OFFSET;
 	pdf = (cscdr2 & MXC_CCM_CSCDR2_CSPI_CLK_PODF_MASK) \
 			>> MXC_CCM_CSCDR2_CSPI_CLK_PODF_OFFSET;
-	clk_sel = (cscmr1 & MXC_CCM_CSCMR1_CSPI_CLK_SEL_MASK) \
-			>> MXC_CCM_CSCMR1_CSPI_CLK_SEL_OFFSET;
 
-	switch (clk_sel) {
-	case 0:
-		ret_val = decode_pll(mxc_plls[PLL1_CLOCK],
-					CONFIG_MX51_HCLK_FREQ) /
-					((pre_pdf + 1) * (pdf + 1));
-		break;
-	case 1:
-		ret_val = decode_pll(mxc_plls[PLL2_CLOCK],
-					CONFIG_MX51_HCLK_FREQ) /
-					((pre_pdf + 1) * (pdf + 1));
-		break;
-	case 2:
-		ret_val = decode_pll(mxc_plls[PLL3_CLOCK],
-					CONFIG_MX51_HCLK_FREQ) /
-					((pre_pdf + 1) * (pdf + 1));
-		break;
-	default:
-		ret_val = get_lp_apm() / ((pre_pdf + 1) * (pdf + 1));
-		break;
-	}
-
-	return ret_val;
+	return freq / ((pre_pdf + 1) * (pdf + 1));
 }
 
 /*
@@ -237,7 +452,7 @@
 	case MXC_ARM_CLK:
 		return get_mcu_main_clk();
 	case MXC_AHB_CLK:
-		break;
+		return get_ahb_clk();
 	case MXC_IPG_CLK:
 		return get_ipg_clk();
 	case MXC_IPG_PERCLK:
@@ -249,6 +464,38 @@
 	case MXC_FEC_CLK:
 		return decode_pll(mxc_plls[PLL1_CLOCK],
 				    CONFIG_MX51_HCLK_FREQ);
+	case MXC_AXI_A_CLK:
+		return get_axi_a_clk();
+	case MXC_AXI_B_CLK:
+		return get_axi_b_clk();
+	case MXC_EMI_CLK:
+		return get_emi_clk();
+	case MXC_NFC_CLK:
+		return get_nfc_clk();
+	case MXC_DRR_CLK:
+		return get_ddr_clk();
+	case MXC_GPU_CLK:
+		return get_cbcmr_sel_clk(MXC_CCM_CBCMR_GPU_CLK_SEL_MASK,
+			MXC_CCM_CBCMR_GPU_CLK_SEL_OFFSET);
+	case MXC_ARM_AXI_CLK:
+		return get_cbcmr_sel_clk(MXC_CCM_CBCMR_ARM_AXI_CLK_SEL_MASK,
+			MXC_CCM_CBCMR_ARM_AXI_CLK_SEL_OFFSET);
+	case MXC_IPU_CLK:
+		return get_cbcmr_sel_clk(MXC_CCM_CBCMR_IPU_HSP_CLK_SEL_MASK,
+			MXC_CCM_CBCMR_IPU_HSP_CLK_SEL_OFFSET);
+	case MXC_VPU_CLK:
+		return get_cbcmr_sel_clk(MXC_CCM_CBCMR_VPU_AXI_CLK_SEL_MASK,
+			MXC_CCM_CBCMR_VPU_AXI_CLK_SEL_OFFSET);
+	case MXC_USBOH3_CLK:
+		return get_usboh3_clk();
+	case MXC_ESDHC1_CLK:
+		return get_esdhc1_clk();
+	case MXC_ESDHC2_CLK:
+		return get_esdhc2_clk();
+	case MXC_HSI2C_CLK:
+		return get_hsi2c_clk();
+	case MXC_CSI1_CLK:
+		return get_csi1_clk();
 	default:
 		break;
 	}
@@ -274,13 +521,33 @@
 	u32 freq;
 
 	freq = decode_pll(mxc_plls[PLL1_CLOCK], CONFIG_MX51_HCLK_FREQ);
-	printf("mx51 pll1: %dMHz\n", freq / 1000000);
+	printf("mx51 pll1: %dMHz (%d)\n", freq / 1000000, freq);
 	freq = decode_pll(mxc_plls[PLL2_CLOCK], CONFIG_MX51_HCLK_FREQ);
-	printf("mx51 pll2: %dMHz\n", freq / 1000000);
+	printf("mx51 pll2: %dMHz (%d)\n", freq / 1000000, freq);
 	freq = decode_pll(mxc_plls[PLL3_CLOCK], CONFIG_MX51_HCLK_FREQ);
-	printf("mx51 pll3: %dMHz\n", freq / 1000000);
+	printf("mx51 pll3: %dMHz (%d)\n", freq / 1000000, freq);
 	printf("ipg clock     : %dHz\n", mxc_get_clock(MXC_IPG_CLK));
 	printf("ipg per clock : %dHz\n", mxc_get_clock(MXC_IPG_PERCLK));
+	printf("uart clock    : %dHz\n", mxc_get_clock(MXC_UART_CLK));
+	printf("lp_apm clock  : %dHz\n", get_lp_apm());
+	printf("cspi clock    : %dHz\n", mxc_get_clock(MXC_CSPI_CLK));
+	printf("fec clock     : %dHz\n", mxc_get_clock(MXC_FEC_CLK));
+	printf("arm clock     : %dHz\n", mxc_get_clock(MXC_ARM_CLK));
+	printf("axi_a clock   : %dHz\n", mxc_get_clock(MXC_AXI_A_CLK));
+	printf("axi_b clock   : %dHz\n", mxc_get_clock(MXC_AXI_B_CLK));
+	printf("emi slow clock: %dHz\n", mxc_get_clock(MXC_EMI_CLK));
+	printf("AHB clock     : %dHz\n", mxc_get_clock(MXC_AHB_CLK));
+	printf("nfc clock     : %dHz\n", mxc_get_clock(MXC_NFC_CLK));
+	printf("ddr clock     : %dHz\n", mxc_get_clock(MXC_DRR_CLK));
+	printf("gpu clock     : %dHz\n", mxc_get_clock(MXC_GPU_CLK));
+	printf("arm axi clock : %dHz\n", mxc_get_clock(MXC_ARM_AXI_CLK));
+	printf("ipu clock     : %dHz\n", mxc_get_clock(MXC_IPU_CLK));
+	printf("vpu clock     : %dHz\n", mxc_get_clock(MXC_VPU_CLK));
+	printf("usboh3 clock  : %dHz\n", mxc_get_clock(MXC_USBOH3_CLK));
+	printf("esdhc1 clock  : %dHz\n", mxc_get_clock(MXC_ESDHC1_CLK));
+	printf("esdhc2 clock  : %dHz\n", mxc_get_clock(MXC_ESDHC2_CLK));
+	printf("hsi2c clock   : %dHz\n", mxc_get_clock(MXC_HSI2C_CLK));
+	printf("csi1 clock    : %dHz\n", mxc_get_clock(MXC_CSI1_CLK));
 
 	return 0;
 }
Index: u-boot-2010.03/cpu/arm_cortexa8/mx51/iomux.c
===================================================================
--- u-boot-2010.03.orig/cpu/arm_cortexa8/mx51/iomux.c	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/cpu/arm_cortexa8/mx51/iomux.c	2011-01-05 18:10:42.000000000 +0100
@@ -1,5 +1,6 @@
 /*
  * (C) Copyright 2009 Freescale Semiconductor, Inc.
+ * (C) Copyright 2010 Eric Jarrige, Armadeus Project
  *
  * See file CREDITS for list of people who contributed to this
  * project.
@@ -164,3 +165,42 @@
 	u32 pad_reg = get_pad_reg(pin);
 	return readl(pad_reg);
 }
+
+/*!
+ * This function configures input path.
+ *
+ * @param input index of input select register as defined in \b
+ *  			#iomux_input_select_t
+ * @param config the binary value of elements defined in \b
+ * 			#iomux_input_config_t
+ */
+void mxc_iomux_set_input(iomux_input_select_t input, u32 config)
+{
+	u32 reg = IOMUXSW_INPUT_CTL + (input << 2);
+
+	if (is_soc_rev(CHIP_REV_2_0) < 0) {
+		if (input == MUX_IN_IPU_IPP_DI_0_IND_DISPB_SD_D_SELECT_INPUT)
+			input -= 4;
+		else if (input ==
+			 MUX_IN_IPU_IPP_DI_1_IND_DISPB_SD_D_SELECT_INPUT)
+			input -= 3;
+		else if (input >= MUX_IN_KPP_IPP_IND_COL_6_SELECT_INPUT)
+			input -= 2;
+		else if (input >=
+			 MUX_IN_HSC_MIPI_MIX_PAR_SISG_TRIG_SELECT_INPUT)
+			input -= 5;
+		else if (input >=
+			 MUX_IN_HSC_MIPI_MIX_IPP_IND_SENS1_DATA_EN_SELECT_INPUT)
+			input -= 3;
+		else if (input >= MUX_IN_ECSPI2_IPP_IND_SS_B_3_SELECT_INPUT)
+			input -= 2;
+		else if (input >= MUX_IN_CCM_PLL1_BYPASS_CLK_SELECT_INPUT)
+			input -= 1;
+
+		reg += INPUT_CTL_START_TO1;
+	} else {
+		reg += INPUT_CTL_START;
+	}
+
+	writel(config, reg);
+}
Index: u-boot-2010.03/cpu/arm_cortexa8/mx51/lowlevel_init.S
===================================================================
--- u-boot-2010.03.orig/cpu/arm_cortexa8/mx51/lowlevel_init.S	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/cpu/arm_cortexa8/mx51/lowlevel_init.S	2011-01-05 18:10:42.000000000 +0100
@@ -2,6 +2,7 @@
  * Copyright (C) 2007, Guennadi Liakhovetski <lg@denx.de>
  *
  * (C) Copyright 2009 Freescale Semiconductor, Inc.
+ * (C) Copyright 2010 Eric Jarrige, Armadeus Project
  *
  * This program is free software; you can redistribute it and/or
  * modify it under the terms of the GNU General Public License as
@@ -23,6 +24,90 @@
 #include <asm/arch/imx-regs.h>
 #include <asm/arch/asm-offsets.h>
 
+/* define default pll frequencies */
+#ifndef CONFIG_PLL1_OP
+#define CONFIG_PLL1_OP		DP_OP_800	/* 800 MHz */
+#define CONFIG_PLL1_MFD		DP_MFD_800
+#define CONFIG_PLL1_MFN		DP_MFN_800
+#endif
+
+#ifndef CONFIG_PLL2_OP
+#define CONFIG_PLL2_OP		DP_OP_665	/* 665 MHz */
+#define CONFIG_PLL2_MFD		DP_MFD_665
+#define CONFIG_PLL2_MFN		DP_MFN_665
+#endif
+
+#ifndef CONFIG_PLL3_OP
+#define CONFIG_PLL3_OP		DP_OP_216	/* 216 MHz */
+#define CONFIG_PLL3_MFD		DP_MFD_216
+#define CONFIG_PLL3_MFN		DP_MFN_216
+#endif
+
+#ifndef CONFIG_SYS_PLL_DP_CTL_VAL
+/* use internal oscillator */
+#define CONFIG_SYS_PLL_DP_CTL_VAL 		0x00001232
+#endif
+
+#ifndef CONFIG_SYS_CCSR_VAL
+/* use internal oscillator */
+#define CONFIG_SYS_CCSR_VAL 			0x00000000
+#endif
+
+/* define default SDRAM config */
+#ifndef CONFIG_SYS_DRR_MR_VAL
+#define CONFIG_SYS_DRR_MR_VAL			0x0632
+#endif
+
+#ifndef CONFIG_SYS_DRR_EMR_VAL
+#define CONFIG_SYS_DRR_EMR_VAL			0x040
+#endif
+
+#ifndef CONFIG_SYS_SDRAM_ESDCTL_REGISTER_VAL
+#define CONFIG_SYS_SDRAM_ESDCTL_REGISTER_VAL	0xb2a20000
+#endif
+#ifndef CONFIG_SYS_SDRAM_ESDCFG_REGISTER_VAL
+#define CONFIG_SYS_SDRAM_ESDCFG_REGISTER_VAL	0xE99668BA
+#endif
+#ifndef CONFIG_SYS_SDRAM_ESDMISC_REGISTER_VAL
+#define CONFIG_SYS_SDRAM_ESDMISC_REGISTER_VAL	0x000ad6d0
+#endif
+#ifndef CONFIG_SYS_SDRAM_ESDCDLY1_REGISTER_VAL
+#define CONFIG_SYS_SDRAM_ESDCDLY1_REGISTER_VAL	0x00F48000
+#endif
+#ifndef CONFIG_SYS_SDRAM_ESDCDLY2_REGISTER_VAL
+#define CONFIG_SYS_SDRAM_ESDCDLY2_REGISTER_VAL	0x00F48000
+#endif
+#ifndef CONFIG_SYS_SDRAM_ESDCDLY3_REGISTER_VAL
+#define CONFIG_SYS_SDRAM_ESDCDLY3_REGISTER_VAL	0x00F48000
+#endif
+#ifndef CONFIG_SYS_SDRAM_ESDCDLY4_REGISTER_VAL
+#define CONFIG_SYS_SDRAM_ESDCDLY4_REGISTER_VAL	0x00F48000
+#endif
+#ifndef CONFIG_SYS_SDRAM_ESDCDLY5_REGISTER_VAL
+#define CONFIG_SYS_SDRAM_ESDCDLY5_REGISTER_VAL	0x00F48000
+#endif
+#ifndef CONFIG_SYS_SDRAM_ESDGPR_REGISTER_VAL
+#define CONFIG_SYS_SDRAM_ESDGPR_REGISTER_VAL	0x90000000
+#endif
+
+#ifndef CONFIG_SYS_CBCDR_VAL
+#define CONFIG_SYS_CBCDR_VAL	0x59E35100
+#endif
+
+#ifndef CONFIG_SYS_CBCMR_VAL
+/* Use lp_apm (24MHz) source for perclk */
+#define CONFIG_SYS_CBCMR_VAL	0x000020C2
+#endif
+
+#ifndef CONFIG_SYS_CSCDR1_VAL
+#define CONFIG_SYS_CSCDR1_VAL 0x00C30321
+#endif
+
+#ifndef CONFIG_SYS_CBCMR1_VAL
+/* Use PLL 2 for UART's, get 66.5MHz from it */
+#define CONFIG_SYS_CBCMR1_VAL 0xA5A2A020
+#endif
+
 /*
  * L2CC Cache setup/invalidation/disable
  */
@@ -76,22 +161,22 @@
 	ldr r0, =M4IF_BASE_ADDR
 
 	ldr r1, =0x00000203
-	str r1, [r0, #0x40]
+	str r1, [r0, #M4IF_FBPM0]
 
 	ldr r1, =0x0
-	str r1, [r0, #0x44]
+	str r1, [r0, #M4IF_FBPM1]
 
 	ldr r1, =0x00120125
-	str r1, [r0, #0x9C]
+	str r1, [r0, #M4IF_FPWC]
 
 	ldr r1, =0x001901A3
-	str r1, [r0, #0x48]
+	str r1, [r0, #M4IF_MIF4]
 
 .endm /* init_m4if */
 
 .macro setup_pll pll, freq
 	ldr r2, =\pll
-	ldr r1, =0x00001232
+	ldr r1, =CONFIG_SYS_PLL_DP_CTL_VAL
 	str r1, [r2, #PLL_DP_CTL] /* Set DPLL ON (set UPEN bit): BRMO=1 */
 	mov r1, #0x2
 	str r1, [r2, #PLL_DP_CONFIG] /* Enable auto-restart AREN bit */
@@ -105,7 +190,7 @@
 	str r5, [r2, #PLL_DP_MFN]
 	str r5, [r2, #PLL_DP_HFS_MFN]
 
-	ldr r1, =0x00001232
+	ldr r1, =CONFIG_SYS_PLL_DP_CTL_VAL
 	str r1, [r2, #PLL_DP_CTL]
 1:	ldr r1, [r2, #PLL_DP_CTL]
 	ands r1, r1, #0x1
@@ -115,6 +200,16 @@
 .macro init_clock
 	ldr r0, =CCM_BASE_ADDR
 
+#ifdef CONFIG_SYS_CCR_VAL
+	ldr r1, =CONFIG_SYS_CCR_VAL
+	str r1, [r0, #CLKCTL_CCR]
+
+	/* make sure clocks are ready */
+1:	ldr r1, [r0, #CLKCTL_CSR]
+	cmp r1, #CONFIG_SYS_CSR_VAL
+	bne 1b
+#endif
+
 	/* Gate of clocks to the peripherals first */
 	ldr r1, =0x3FFFFFFF
 	str r1, [r0, #CLKCTL_CCGR0]
@@ -135,7 +230,7 @@
 	str r1, [r0, #CLKCTL_CCDR]
 
 	/* Make sure to switch the DDR away from PLL 1 */
-	ldr r1, =0x19239145
+	ldr r1, =0x19239145 /* ddr clk podf /4; */
 	str r1, [r0, #CLKCTL_CBCDR]
 	/* make sure divider effective */
 1:	ldr r1, [r0, #CLKCTL_CDHIPR]
@@ -143,16 +238,17 @@
 	bne 1b
 
 	/* Switch ARM to step clock */
-	mov r1, #0x4
+	mov r1, #CONFIG_SYS_CCSR_VAL | 0x04
 	str r1, [r0, #CLKCTL_CCSR]
-	mov r3, #DP_OP_800
-	mov r4, #DP_MFD_800
-	mov r5, #DP_MFN_800
+
+	ldr r3, =CONFIG_PLL1_OP
+	ldr r4, =CONFIG_PLL1_MFD
+	ldr r5, =CONFIG_PLL1_MFN
 	setup_pll PLL1_BASE_ADDR
 
-	mov r3, #DP_OP_665
-	mov r4, #DP_MFD_665
-	mov r5, #DP_MFN_665
+	ldr r3, =CONFIG_PLL2_OP
+	ldr r4, =CONFIG_PLL2_MFD
+	ldr r5, =CONFIG_PLL2_MFN
 	setup_pll PLL3_BASE_ADDR
 
 	/* Switch peripheral to PLL 3 */
@@ -161,9 +257,9 @@
 	str r1, [r0, #CLKCTL_CBCMR]
 	ldr r1, =0x13239145
 	str r1, [r0, #CLKCTL_CBCDR]
-	mov r3, #DP_OP_665
-	mov r4, #DP_MFD_665
-	mov r5, #DP_MFN_665
+	ldr r3, =CONFIG_PLL2_OP
+	ldr r4, =CONFIG_PLL2_MFD
+	ldr r5, =CONFIG_PLL2_MFN
 	setup_pll PLL2_BASE_ADDR
 
 	/* Switch peripheral to PLL2 */
@@ -173,16 +269,15 @@
 	ldr r1, =0x000020C0
 	str r1, [r0, #CLKCTL_CBCMR]
 
-	mov r3, #DP_OP_216
-	mov r4, #DP_MFD_216
-	mov r5, #DP_MFN_216
+	ldr r3, =CONFIG_PLL3_OP
+	ldr r4, =CONFIG_PLL3_MFD
+	ldr r5, =CONFIG_PLL3_MFN
 	setup_pll PLL3_BASE_ADDR
 
-
 	/* Set the platform clock dividers */
 	ldr r0, =ARM_BASE_ADDR
 	ldr r1, =0x00000725
-	str r1, [r0, #0x14]
+	str r1, [r0, #CORTEX_A8_ICGC]
 
 	ldr r0, =CCM_BASE_ADDR
 
@@ -195,15 +290,14 @@
 	str r1, [r0, #CLKCTL_CACRR]
 
 	/* Switch ARM back to PLL 1 */
-	mov r1, #0
+	mov r1, #CONFIG_SYS_CCSR_VAL
 	str r1, [r0, #CLKCTL_CCSR]
 
 	/* setup the rest */
-	/* Use lp_apm (24MHz) source for perclk */
-	ldr r1, =0x000020C2
+	ldr r1, =CONFIG_SYS_CBCMR_VAL
 	str r1, [r0, #CLKCTL_CBCMR]
-	/* ddr clock from PLL 1, all perclk dividers are 1 since using 24MHz */
-	ldr r1, =0x59E35100
+
+	ldr r1, =CONFIG_SYS_CBCDR_VAL
 	str r1, [r0, #CLKCTL_CBCDR]
 
 	/* Restore the default values in the Gate registers */
@@ -216,10 +310,10 @@
 	str r1, [r0, #CLKCTL_CCGR5]
 	str r1, [r0, #CLKCTL_CCGR6]
 
-	/* Use PLL 2 for UART's, get 66.5MHz from it */
-	ldr r1, =0xA5A2A020
+	ldr r1, =CONFIG_SYS_CBCMR1_VAL
 	str r1, [r0, #CLKCTL_CSCMR1]
-	ldr r1, =0x00C30321
+
+	ldr r1, =CONFIG_SYS_CSCDR1_VAL
 	str r1, [r0, #CLKCTL_CSCDR1]
 
 	/* make sure divider effective */
@@ -279,10 +373,3 @@
 	/* r12 saved upper lr*/
 	mov pc,lr
 
-/* Board level setting value */
-DDR_PERCHARGE_CMD:	.word 0x04008008
-DDR_REFRESH_CMD:	.word 0x00008010
-DDR_LMR1_W:		.word 0x00338018
-DDR_LMR_CMD:		.word 0xB2220000
-DDR_TIMING_W:		.word 0xB02567A9
-DDR_MISC_W:		.word 0x000A0104
Index: u-boot-2010.03/cpu/arm_cortexa8/start.S
===================================================================
--- u-boot-2010.03.orig/cpu/arm_cortexa8/start.S	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/cpu/arm_cortexa8/start.S	2011-01-05 18:10:42.000000000 +0100
@@ -173,8 +173,8 @@
 	mov	r2, #0x00000000		@ clear value
 clbss_l:
 	str	r2, [r0]		@ clear BSS location
-	cmp	r0, r1			@ are we at the end yet
 	add	r0, r0, #4		@ increment clear index pointer
+	cmp	r0, r1			@ are we at the end yet
 	bne	clbss_l			@ keep clearing till at end
 
 	ldr	pc, _start_armboot	@ jump to C code
Index: u-boot-2010.03/cpu/arm_cortexa8/mx51/timer.c
===================================================================
--- u-boot-2010.03.orig/cpu/arm_cortexa8/mx51/timer.c	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/cpu/arm_cortexa8/mx51/timer.c	2011-01-05 18:10:42.000000000 +0100
@@ -89,7 +89,7 @@
 		timestamp += ((0xFFFFFFFF / (CONFIG_MX51_CLK32 / CONFIG_SYS_HZ))
 				- lastinc) + val;
 	lastinc = val;
-	return val;
+	return timestamp;
 }
 
 ulong get_timer(ulong base)
@@ -106,7 +106,7 @@
 void __udelay(unsigned long usec)
 {
 	unsigned long now, start, tmo;
-	tmo = usec * (CONFIG_MX51_CLK32 / 1000) / 1000;
+	tmo = usec * (CONFIG_MX51_CLK32 / CONFIG_SYS_HZ) / 1000;
 
 	if (!tmo)
 		tmo = 1;
Index: u-boot-2010.03/include/asm-arm/arch-mx51/asm-offsets.h
===================================================================
--- u-boot-2010.03.orig/include/asm-arm/arch-mx51/asm-offsets.h	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/include/asm-arm/arch-mx51/asm-offsets.h	2011-01-05 18:10:42.000000000 +0100
@@ -48,3 +48,135 @@
 #define PLL_DP_HFS_OP	0x1C
 #define PLL_DP_HFS_MFD	0x20
 #define PLL_DP_HFS_MFN	0x24
+
+/* ESDCTL */
+#define ESDCTL_ESDCTL0                  0x00
+#define ESDCTL_ESDCFG0                  0x04
+#define ESDCTL_ESDCTL1                  0x08
+#define ESDCTL_ESDCFG1                  0x0C
+#define ESDCTL_ESDMISC                  0x10
+#define ESDCTL_ESDSCR                   0x14
+#define ESDCTL_ESDCDLY1                 0x20
+#define ESDCTL_ESDCDLY2                 0x24
+#define ESDCTL_ESDCDLY3                 0x28
+#define ESDCTL_ESDCDLY4                 0x2C
+#define ESDCTL_ESDCDLY5                 0x30
+#define ESDCTL_ESDCDLYGD                0x34
+
+/* M4IF */
+#define M4IF_PSM0		0x000
+#define M4IF_PSM1		0x004
+#define M4IF_MDSR6		0x018
+#define M4IF_MDSR7		0x01C
+#define M4IF_MDSR8		0x020
+#define M4IF_MDSR0		0x024
+#define M4IF_MDSR1		0x028
+#define M4IF_MDSR2		0x02C
+#define M4IF_MDSR3		0x030
+#define M4IF_MDSR4		0x034
+#define M4IF_MDSR5		0x038
+#define M4IF_FBPM0		0x040
+#define M4IF_FBPM1		0x044
+#define M4IF_MIF4		0x048
+#define M4IF_SBAR0		0x04C
+#define M4IF_SERL0		0x050
+#define M4IF_SERH0		0x054
+#define M4IF_SSRL0		0x058
+#define M4IF_SSRH0		0x05C
+#define M4IF_SBAR1		0x060
+#define M4IF_SERL1		0x064
+#define M4IF_SERH1		0x068
+#define M4IF_SSRL1		0x06C
+#define M4IF_SSRH1		0x070
+#define M4IF_I2ULA		0x074
+#define M4IF_I2ACR		0x078
+#define M4IF_RINT2		0x07C
+#define M4IF_SBS0		0x084
+#define M4IF_SBS1		0x088
+#define M4IF_MCR0		0x08C
+#define M4IF_MCR1		0x090
+#define M4IF_MDCR		0x094
+#define M4IF_FACR		0x098
+#define M4IF_FPWC		0x09C
+
+/* IOMUX */
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS		0x04A4
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS		0x04A8
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE		0x04AC
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0	0x04B0
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1	0x04B4
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK	0x04B8
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0	0x04BC
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1	0x04C0
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2	0x04C4
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3	0x04C8
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0		0x04CC
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1		0x04D0
+
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0		0x04D4
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1		0x04D8
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2		0x04DC
+#define IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3		0x04E0
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_SDBA2		0x050C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_SDODT1	0x050C
+#define IOMUXC_SW_PAD_CTL_PAD_EIM_SDODT0	0x0510
+
+#define IOMUXC_SW_PAD_CTL_GRP_DDRPKS		0x0820
+#define IOMUXC_SW_PAD_CTL_GRP_DRAM_B4		0x082C
+#define IOMUXC_SW_PAD_CTL_GRP_INDDR		0x0830
+#define IOMUXC_SW_PAD_CTL_GRP_PKEDDR		0x0838
+#define IOMUXC_SW_PAD_CTL_GRP_DDR_A0		0x083C
+#define IOMUXC_SW_PAD_CTL_GRP_DDR_A1		0x0848
+#define IOMUXC_SW_PAD_CTL_GRP_DDRAPUS		0x084C
+#define IOMUXC_SW_PAD_CTL_GRP_HYSDDR0		0x085C
+#define IOMUXC_SW_PAD_CTL_GRP_HYSDDR1		0x0864
+#define IOMUXC_SW_PAD_CTL_GRP_HYSDDR2		0x086C
+#define IOMUXC_SW_PAD_CTL_GRP_HVDDR		0x0870
+#define IOMUXC_SW_PAD_CTL_GRP_HYSDDR3		0x0874
+#define IOMUXC_SW_PAD_CTL_GRP_DRAM_SR_B0	0x0878
+#define IOMUXC_SW_PAD_CTL_GRP_DDRAPKS		0x087C
+
+#define IOMUXC_SW_PAD_CTL_GRP_DRAM_SR_B1	0x0880
+#define IOMUXC_SW_PAD_CTL_GRP_DDRPUS		0x0884
+#define IOMUXC_SW_PAD_CTL_GRP_DRAM_SR_B2	0x088C
+#define IOMUXC_SW_PAD_CTL_GRP_PKEADDR		0x0890
+#define IOMUXC_SW_PAD_CTL_GRP_DRAM_SR_B4	0x089C
+#define IOMUXC_SW_PAD_CTL_GRP_INMODE1		0x08A0
+#define IOMUXC_SW_PAD_CTL_GRP_DRAM_B0		0x08A4
+#define IOMUXC_SW_PAD_CTL_GRP_DRAM_B1		0x08AC
+
+#define IOMUXC_SW_PAD_CTL_GRP_DDR_SR_A0		0x08B0
+
+#define IOMUXC_SW_PAD_CTL_GRP_DRAM_B2		0x08B8
+
+#define IOMUXC_SW_PAD_CTL_GRP_DDR_SR_A1		0x08BC
+
+/* ARM CORTEX A8*/
+#define CORTEX_A8_ICGC 		0x14
+
+#ifdef __ASSEMBLY__
+
+#define PAD_CTL_SRE_SLOW (0x0 << 0)	/* Slow slew rate */
+#define PAD_CTL_SRE_FAST (0x1 << 0)	/* Fast slew rate */
+#define PAD_CTL_DRV_LOW (0x0 << 1)	/* Low drive strength */
+#define PAD_CTL_DRV_MEDIUM (0x1 << 1)	/* Medium drive strength */
+#define PAD_CTL_DRV_HIGH (0x2 << 1)	/* High drive strength */
+#define PAD_CTL_DRV_MAX (0x3 << 1)	/* Max drive strength */
+#define PAD_CTL_ODE_OPENDRAIN_NONE (0x0 << 3)	/* Opendrain disable */
+#define PAD_CTL_ODE_OPENDRAIN_ENABLE (0x1 << 3)/* Opendrain enable */
+#define PAD_CTL_100K_PD (0x0 << 4)	/* 100Kohm pulldown */
+#define PAD_CTL_47K_PU (0x1 << 4)	/* 47Kohm pullup */
+#define PAD_CTL_100K_PU (0x2 << 4)	/* 100Kohm pullup */
+#define PAD_CTL_22K_PU (0x3 << 4)	/* 22Kohm pullup */
+#define PAD_CTL_PUE_KEEPER (0x0 << 6)	/* enable pulldown */
+#define PAD_CTL_PUE_PULL (0x1 << 6)	/* enable pullup */
+#define PAD_CTL_PKE_NONE (0x0 << 7)	/* Disable pullup/pulldown */
+#define PAD_CTL_PKE_ENABLE (0x1 << 7)	/* Enable pullup/pulldown */
+#define PAD_CTL_HYS_NONE (0x0 << 8)	/* Hysteresis disabled */
+#define PAD_CTL_HYS_ENABLE (0x1 << 8)	/* Hysteresis enabled */
+#define PAD_CTL_DDR_INPUT_CMOS (0x0 << 9)/* DDR input CMOS */
+#define PAD_CTL_DDR_INPUT_DDR (0x1 << 9)/* DDR input DDR */
+#define PAD_CTL_DRV_VOT_LOW (0x0 << 13) /* Low voltage mode */
+#define PAD_CTL_DRV_VOT_HIGH (0x1 << 13)/* High voltage mode */
+
+#endif /* __ASSEMBLY__ */
Index: u-boot-2010.03/include/asm-arm/arch-mx51/clock.h
===================================================================
--- u-boot-2010.03.orig/include/asm-arm/arch-mx51/clock.h	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/include/asm-arm/arch-mx51/clock.h	2011-01-05 18:10:42.000000000 +0100
@@ -1,6 +1,7 @@
 /*
  * (C) Copyright 2009
  * Stefano Babic, DENX Software Engineering, sbabic@denx.de.
+ * (C) Copyright 2010 Eric Jarrige, Armadeus Project
  *
  * See file CREDITS for list of people who contributed to this
  * project.
@@ -32,6 +33,20 @@
 	MXC_UART_CLK,
 	MXC_CSPI_CLK,
 	MXC_FEC_CLK,
+	MXC_AXI_A_CLK,
+	MXC_AXI_B_CLK,
+	MXC_EMI_CLK,
+	MXC_NFC_CLK,
+	MXC_DRR_CLK,
+	MXC_GPU_CLK,
+	MXC_ARM_AXI_CLK,
+	MXC_IPU_CLK,
+	MXC_VPU_CLK,
+	MXC_USBOH3_CLK,
+	MXC_ESDHC1_CLK,
+	MXC_ESDHC2_CLK,
+	MXC_HSI2C_CLK,
+	MXC_CSI1_CLK,
 };
 
 unsigned int imx_decode_pll(unsigned int pll, unsigned int f_ref);
Index: u-boot-2010.03/include/asm-arm/arch-mx51/crm_regs.h
===================================================================
--- u-boot-2010.03.orig/include/asm-arm/arch-mx51/crm_regs.h	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/include/asm-arm/arch-mx51/crm_regs.h	2011-01-05 18:10:42.000000000 +0100
@@ -1,5 +1,6 @@
 /*
  * (C) Copyright 2009 Freescale Semiconductor, Inc.
+ * (C) Copyright 2010 Eric Jarrige, Armadeus Project
  *
  * See file CREDITS for list of people who contributed to this
  * project.
@@ -84,6 +85,9 @@
 #define MXC_CCM_CACRR_ARM_PODF_MASK		0x7
 
 /* Define the bits in register CBCDR */
+#define MXC_CCM_CBCDR_DDR_CLK_SEL		(0x1 << 30)
+#define MXC_CCM_CBCDR_DDR_PODF_OFFSET		27
+#define MXC_CCM_CBCDR_DDR_PODF_MASK		(0x7 << 27)
 #define MXC_CCM_CBCDR_EMI_CLK_SEL		(0x1 << 26)
 #define MXC_CCM_CBCDR_PERIPH_CLK_SEL		(0x1 << 25)
 #define MXC_CCM_CBCDR_EMI_PODF_OFFSET		22
@@ -139,6 +143,48 @@
 #define MXC_CCM_CSCMR1_SSI_EXT2_COM_CLK_SEL		(0x1 << 1)
 #define MXC_CCM_CSCMR1_SSI_EXT1_COM_CLK_SEL		0x1
 
+/* Define the bits in register CSCMR2 */
+#define MXC_CCM_CSCMR2_DI1_CLK_SEL_OFFSET		29
+#define MXC_CCM_CSCMR2_DI1_CLK_SEL_MASK			(0x7 << 29)
+#define MXC_CCM_CSCMR2_DI0_CLK_SEL_OFFSET		26
+#define MXC_CCM_CSCMR2_DI0_CLK_SEL_MASK			(0x7 << 26)
+#define MXC_CCM_CSCMR2_CSI2_CLK_SEL_OFFSET		24
+#define MXC_CCM_CSCMR2_CSI2_CLK_SEL_MASK		(0x3 << 24)
+#define MXC_CCM_CSCMR2_CSI1_CLK_SEL_OFFSET		22
+#define MXC_CCM_CSCMR2_CSI1_CLK_SEL_MASK		(0x3 << 22)
+#define MXC_CCM_CSCMR2_HSI2C_CLK_SEL_OFFSET		14
+#define MXC_CCM_CSCMR2_HSI2C_CLK_SEL_MASK		(0x3 << 14)
+#define MXC_CCM_CSCMR2_FIRI_CLK_SEL_OFFSET		12
+#define MXC_CCM_CSCMR2_FIRI_CLK_SEL_MASK		(0x3 << 102)
+#define MXC_CCM_CSCMR2_SIM_CLK_SEL_OFFSET		10
+#define MXC_CCM_CSCMR2_SIM_CLK_SEL_MASK			(0x3 << 10)
+#define MXC_CCM_CSCMR2_SPDIF1_CLK_SEL			(0x1 << 5)
+#define MXC_CCM_CSCMR2_SPDIF0_CLK_SEL			(0x1 << 4)
+#define MXC_CCM_CSCMR2_SPDIF1_CLK_SEL_OFFSET		2
+#define MXC_CCM_CSCMR2_SPDIF1_CLK_SEL_MASK		(0x3 << 2)
+#define MXC_CCM_CSCMR2_SPDIF0_CLK_SEL_OFFSET		0
+#define MXC_CCM_CSCMR2_SPDIF0_CLK_SEL_MASK		(0x3 << 0)
+
+/* Define the bits in register CSCDR4 */
+#define MXC_CCM_CSCDR4_CSI2_CLK_PRED_OFFSET		16
+#define MXC_CCM_CSCDR4_CSI2_CLK_PRED_MASK		(0x7 << 16)
+#define MXC_CCM_CSCDR4_CSI2_CLK_PODF_OFFSET		9
+#define MXC_CCM_CSCDR4_CSI2_CLK_PODF_MASK		(0x3F << 9)
+#define MXC_CCM_CSCDR4_CSI1_CLK_PRED_OFFSET		6
+#define MXC_CCM_CSCDR4_CSI1_CLK_PRED_MASK		(0x7 << 6)
+#define MXC_CCM_CSCDR4_CSI1_CLK_PODF_OFFSET		0
+#define MXC_CCM_CSCDR4_CSI1_CLK_PODF_MASK		0x3F
+
+/* Define the bits in register CSCDR3 */
+#define MXC_CCM_CSCDR3_HSI2C_CLK_PRED_OFFSET		16
+#define MXC_CCM_CSCDR3_HSI2C_CLK_PRED_MASK		(0x7 << 16)
+#define MXC_CCM_CSCDR3_HSI2C_CLK_PODF_OFFSET		9
+#define MXC_CCM_CSCDR3_HSI2C_CLK_PODF_MASK		(0x3F << 9)
+#define MXC_CCM_CSCDR3_FIRI_CLK_PRED_OFFSET		6
+#define MXC_CCM_CSCDR3_FIRI_CLK_PRED_MASK		(0x7 << 6)
+#define MXC_CCM_CSCDR3_FIRI_CLK_PODF_OFFSET		0
+#define MXC_CCM_CSCDR3_FIRI_CLK_PODF_MASK		0x3F
+
 /* Define the bits in register CSCDR2 */
 #define MXC_CCM_CSCDR2_CSPI_CLK_PRED_OFFSET		25
 #define MXC_CCM_CSCDR2_CSPI_CLK_PRED_MASK		(0x7 << 25)
Index: u-boot-2010.03/include/asm-arm/arch-mx51/imx-regs.h
===================================================================
--- u-boot-2010.03.orig/include/asm-arm/arch-mx51/imx-regs.h	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/include/asm-arm/arch-mx51/imx-regs.h	2011-01-05 18:10:42.000000000 +0100
@@ -1,5 +1,6 @@
 /*
  * (C) Copyright 2009 Freescale Semiconductor, Inc.
+ * (C) Copyright 2010 Eric Jarrige, Armadeus Project
  *
  * See file CREDITS for list of people who contributed to this
  * project.
@@ -164,10 +165,6 @@
 
 #define NFC_BUF_SIZE	0x1000
 
-/* M4IF */
-#define M4IF_FBPM0	0x40
-#define M4IF_FIDBP	0x48
-
 /* Assuming 24MHz input clock with doubler ON */
 /*                            MFI         PDF */
 #define DP_OP_850	((8 << 4) + ((1 - 1)  << 0))
@@ -207,6 +204,17 @@
 #define BOARD_REV_1_0           0x0
 #define BOARD_REV_2_0           0x1
 
+
+/* DDR commands */
+/* cs ChipSelect in range of 0..1 */
+/* ba Bank Address in range of 0..3 */
+/* addr Pseudo Address as expected by the DDR */
+
+#define CONFIG_SYS_DDR_NOP_CMD(cs)		(0x00008000 + (cs << 2))
+#define CONFIG_SYS_DRR_PRECHARGE_CMD(cs, ba)	(0x04008008 + (cs << 2) + ba)
+#define CONFIG_SYS_DRR_AUTOREFRESH_CMD(cs)	(0x00008010 + (cs << 2))
+#define CONFIG_SYS_DRR_LMR_CMD(cs, ba, addr)	(0x00008018 + (addr << 16) + (cs << 2) + ba)
+
 #ifndef __ASSEMBLY__
 
 struct clkctl {
Index: u-boot-2010.03/cpu/arm_cortexa8/mx51/soc.c
===================================================================
--- u-boot-2010.03.orig/cpu/arm_cortexa8/mx51/soc.c	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/cpu/arm_cortexa8/mx51/soc.c	2011-01-05 18:10:42.000000000 +0100
@@ -69,7 +69,7 @@
 	cpurev = get_cpu_rev();
 	printf("CPU:   Freescale i.MX51 family %d.%dV at %d MHz\n",
 		(cpurev & 0xF0) >> 4,
-		(cpurev & 0x0F) >> 4,
+		(cpurev & 0x0F) ,
 		mxc_get_clock(MXC_ARM_CLK) / 1000000);
 	return 0;
 }
Index: u-boot-2010.03/include/asm-arm/arch-mx51/sys_proto.h
===================================================================
--- u-boot-2010.03.orig/include/asm-arm/arch-mx51/sys_proto.h	2011-01-05 18:05:12.000000000 +0100
+++ u-boot-2010.03/include/asm-arm/arch-mx51/sys_proto.h	2011-01-05 18:10:42.000000000 +0100
@@ -25,6 +25,7 @@
 #define _SYS_PROTO_H_
 
 u32 get_cpu_rev(void);
+u32 get_mcu_main_clk(void);
 #define is_soc_rev(rev)	((get_cpu_rev() & 0xFF) - rev)
 
 #endif
