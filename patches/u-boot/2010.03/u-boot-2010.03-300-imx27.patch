Index: u-boot-2010.03/cpu/arm926ejs/mx27/cmd_imxfuse.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ u-boot-2010.03/cpu/arm926ejs/mx27/cmd_imxfuse.c	2011-01-05 18:08:44.000000000 +0100
@@ -0,0 +1,331 @@
+/*
+ * cmd_imxfuse-c Interface to iMX IC Identification Module
+ * 	Based on Freescale iMX27 Board Support Package
+ *
+ * (C) Copyright 2008,2009 Eric Jarrige <eric.jarrige@armadeus.org>
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ */
+
+#include <config.h>
+#include <common.h>
+#include <command.h>
+
+#ifdef CONFIG_CMD_IMX_FUSE
+
+#include <asm/arch/imx-regs.h>
+#include <asm/io.h>
+
+#define IIM_ERR_SHIFT	   8
+#define POLL_FUSE_PRGD	  (IIM_STAT_PRGD | (IIM_ERR_PRGE << IIM_ERR_SHIFT))
+#define POLL_FUSE_SNSD	  (IIM_STAT_SNSD | (IIM_ERR_SNSE << IIM_ERR_SHIFT))
+
+static void imx_fuse_op_start(void)
+{
+	struct iim_regs *iim = (struct iim_regs *)IMX_IIM_BASE;
+	/* Do not generate interrupt */
+	writel(0x00, &iim->iim_statm);
+	// clear the status bits and error bits
+	writel(0x03, &iim->iim_stat);
+	writel(0xFE, &iim->iim_err);
+}
+
+/*
+ * The action should be either:
+ *		  POLL_FUSE_PRGD
+ * or:
+ *		  POLL_FUSE_SNSD
+ */
+static int imx_poll_fuse_op_done(int action)
+{
+	u32 status, error;
+	struct iim_regs *iim = (struct iim_regs *)IMX_IIM_BASE;
+
+	if (action != POLL_FUSE_PRGD && action != POLL_FUSE_SNSD) {
+		printf("%s(%d) invalid operation\n", __FUNCTION__, action);
+		return -1;
+	}
+
+	/* Poll busy bit till it is NOT set */
+	while ((readl(&iim->iim_stat) & IIM_STAT_BUSY) != 0 ) {
+	}
+
+	/* Test for successful write */
+	status = readl(&iim->iim_stat);
+	error = readl(&iim->iim_err);
+
+	if ((status & action) != 0 && (error & (action >> IIM_ERR_SHIFT)) == 0) {
+		if (error) {
+			printf("Even though the operation seems successful...\n");
+			printf("There are some error(s) at addr=0x%x: 0x%x\n",
+						readl(&iim->iim_err), error);
+		}
+		return 0;
+	}
+	printf("%s(0x%x) failed\n", __FUNCTION__, action);
+	printf("status address=0x%x, value=0x%x\n",
+				readl(&iim->iim_stat), status);
+	printf("There are some error(s) at addr=0x%x: 0x%x\n",
+				readl(&iim->iim_err), error);
+	return -1;
+}
+
+static int imx_read_shadow_fuse(int bank, int row, int bit)
+{
+	printf("Shadow fuses at (bank:%d, row:%d) = 0x%x\n",
+		bank, row, readl((long*)IIM_BANK_REG(bank,row)));
+	return 0;
+}
+
+static int imx_sense_fuse(int bank, int row, int bit)
+{
+	int addr, addr_l, addr_h;
+	struct iim_regs *iim = (struct iim_regs *)IMX_IIM_BASE;
+
+	imx_fuse_op_start();
+
+	/* Enable IIM Program Protect */
+	writel(0x0,&iim->iim_prog_p);
+
+	addr = ((bank << 11) | (row << 3) | (bit & 0x7));
+	/* Set IIM Program Upper Address */
+	addr_h = (addr >> 8) & 0x000000FF;
+	/* Set IIM Program Lower Address */
+	addr_l = (addr & 0x000000FF);
+
+#ifdef IIM_FUSE_DEBUG
+	printf("%s: addr_h=0x%x, addr_l=0x%x\n",
+		__FUNCTION__, addr_h, addr_l);
+#endif
+	writel(addr_h, &iim->iim_ua);
+	writel(addr_l, &iim->iim_la);
+
+	/* Start sensing */
+	writel(0x08, &iim->iim_fctl);
+	if (imx_poll_fuse_op_done(POLL_FUSE_SNSD) != 0) {
+		printf("%s(bank: %d, row: %d, bit: %d failed\n",
+			__FUNCTION__, bank, row, bit);
+	}
+
+	printf("fuses at (bank:%d, row:%d) = 0x%x\n",
+		bank, row, readl(&iim->iim_sdat));
+	return 0;
+}
+
+/* Blow fuses based on the bank, row and bit positions (all 0-based)
+*/
+static int imx_fuse_blow(int bank,int row,int bit)
+{
+	int addr, addr_l, addr_h, ret = 1;
+	struct iim_regs *iim = (struct iim_regs *)IMX_IIM_BASE;
+
+	imx_fuse_op_start();
+
+	/* Disable IIM Program Protect */
+	writel(0xAA, &iim->iim_prog_p);
+
+	addr = ((bank << 11) | (row << 3) | (bit & 0x7));
+	/* Set IIM Program Upper Address */
+	addr_h = (addr >> 8) & 0x000000FF;
+	/* Set IIM Program Lower Address */
+	addr_l = (addr & 0x000000FF);
+
+#ifdef IIM_FUSE_DEBUG
+	printf("blowing addr_h=0x%x, addr_l=0x%x\n", addr_h, addr_l);
+#endif
+
+	writel(addr_h, &iim->iim_ua);
+	writel(addr_l, &iim->iim_la);
+	/* Start Programming */
+	writel(0x31, &iim->iim_fctl);
+	if (imx_poll_fuse_op_done(POLL_FUSE_PRGD) == 0) {
+		ret = 0;
+	}
+
+	/* Enable IIM Program Protect */
+	writel(0x0, &iim->iim_prog_p);
+	return ret;
+}
+
+/* Blow byte fuses based on the bank and row positions (all 0-based)
+*/
+static int imx_fuse_blow_byte(int bank,int row,unsigned char value)
+{
+	int i, ret = 0;
+
+		for (i = 0; i < 8; i++) {
+			if (((value >> i) & 0x1) == 0) {
+				continue;
+			}
+			ret |= imx_fuse_blow(bank, row, i);
+		}
+
+	return ret;
+}
+
+static int imx_mac_read(unsigned char pmac[6])
+{
+	int i;
+	int uninitialized = 0;
+
+	for (i=0;i<6;i++) {
+		pmac[6-1-i] = readl((long*)IIM_BANK_REG(0,(IIM0_MAC+i)));
+	}
+
+	/* uninitialized if all 00 */
+	if ((pmac[0] == 0) && (pmac[1] == 0) && (pmac[2] == 0) &&
+            (pmac[3] == 0) && (pmac[4] == 0) && (pmac[5] == 0))
+                uninitialized = 1;
+
+	/* uninitialized if all FF (could be safe) */
+        if ((pmac[0] == 0xff) && (pmac[1] == 0xff) && (pmac[2] == 0xff) &&
+	    (pmac[3] == 0xff) && (pmac[4] == 0xff) && (pmac[5] == 0xff))
+	        uninitialized = 1;
+
+	return uninitialized;
+}
+
+static int imx_mac_blow(unsigned char pmac[6])
+{
+	int i, ret = 1;
+	unsigned char mac[6];
+	int uninitialized = 0;
+
+	uninitialized = imx_mac_read(mac);
+
+	if (uninitialized) {
+		ret = 0;
+		for(i=0;i<6;i++) {
+			ret |= imx_fuse_blow_byte(0, (IIM0_MAC+i), pmac[6 - 1 -i]);
+		}
+	}
+
+	return ret;
+}
+
+
+int do_imx_fuse(cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
+{
+	uint32_t bank, row, value, i;
+	int ret = 1;
+
+	if (argc < 2) {
+		printf("It is too dangeous for you to use this command.\n");
+		printf("Usage:\n%s\n", cmdtp->usage);
+		return ret;
+	}
+
+	if ((!strcmp(argv[1], "sense"))&&((argc == 4))) {
+		bank = simple_strtoul(argv[2], NULL, 16);
+		row = simple_strtoul(argv[3], NULL, 16);
+
+		printf("Sense read fuse at bank:%d row:%d\n", bank, row);
+		ret = imx_sense_fuse(bank, row, 0);
+	}else if ((!strcmp(argv[1], "read"))&&((argc == 4))) {
+		bank = simple_strtoul(argv[2], NULL, 16);
+		row = simple_strtoul(argv[3], NULL, 16);
+
+		printf("Shadow read fuse at bank:%d row:%d\n", bank, row);
+		ret = imx_read_shadow_fuse(bank, row, 0);
+	}else if ((!strcmp(argv[1], "blow"))&&(argc == 5)) {
+		bank = simple_strtoul(argv[2], NULL, 16);
+		row = simple_strtoul(argv[3], NULL, 16);
+		value = simple_strtoul(argv[4], NULL, 16);
+
+		printf("Blowing fuse at bank:%d row:%d value:%d\n",
+				bank, row, value);
+		for (i = 0; i < 8; i++) {
+			if (((value >> i) & 0x1) == 0) {
+				continue;
+			}
+			if (imx_fuse_blow(bank, row, i) != 0) {
+				printf("fuse_blow(bank: %d, row: %d, bit:"
+					" %d failed\n",	bank, row, i);
+			} else {
+				printf("fuse_blow(bank: %d, row: %d, bit:"
+					" %d successful\n", bank, row, i);
+				ret = 0;
+			}
+		}
+
+		/* read back fuse by shadow register if applicable */
+		ret |= imx_read_shadow_fuse(bank, row, 0);
+
+	}else if ((!strcmp(argv[1], "mac"))&&(argc == 2)) {
+		unsigned char mac[6];
+		ret = imx_mac_read(mac);
+
+		printf("%siMX mac_addr in fuse: %02X:%02X:%02X:%02X:%02X:%02X\n",
+		ret?"No ":"",
+		mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+	}else if ((!strcmp(argv[1], "mac"))&&(argc == 3)) {
+		unsigned char mac[6];
+		char *tmp, *end;
+
+		tmp = argv[2];
+		/* convert MAC from string to int */
+		for (i=0; i<6; i++) {
+		mac[i] = tmp ? simple_strtoul(tmp, &end, 16) : 0;
+		if (tmp)
+			tmp = (*end) ? end+1 : end;
+		}
+
+		ret = imx_mac_blow(mac);
+		if (ret) {
+			printf("Failed to blow mac_addr in fuse: "
+				"%02X:%02X:%02X:%02X:%02X:%02X\n",
+				mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+		} else {
+			imx_mac_read(mac);
+			printf("Mac_addr blowed in fuse: "
+				"%02X:%02X:%02X:%02X:%02X:%02X\n",
+				mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
+		}
+	}else if ((!strcmp(argv[1], "suid"))&&(argc == 2)) {
+
+		printf("iMX SUID: ");
+		for (i=0;i<6;i++) {
+			printf("%02x", readl((long*)IIM_BANK_REG(1,(IIM1_SUID+i))));
+		}
+		printf("\n");
+		ret = 0;
+	}else if ((!strcmp(argv[1], "scc_key"))&&(argc == 2)) {
+
+		printf("iMX SCC_KEY: ");
+		for (i=0;i<21;i++) {
+			printf("%02x", readl((long*)IIM_BANK_REG(0,(IIM0_SCC_KEY+i))));
+		}
+		printf("\n");
+		ret = 0;
+	} else { printf("arc:%d\n", argc);
+		printf("Usage:\n%s\n", cmdtp->usage);
+		return 1;
+	}
+
+	return ret;
+}
+
+U_BOOT_CMD(imxfuse, 5, 0, do_imx_fuse,
+	"imxfuse - Read/Blow some iMX fuses\n",\
+	"sense <bank> <row> - sense read iMX fuses at <bank>/<row>\n" \
+	"imxfuse read <bank> <row> - shadow read iMX fuses at <bank>/<row>\n" \
+	"imxfuse blow <bank> <row> <value> - blow <value> at <bank>/<row>\n"\
+	"	- Read/Blow 8 bits <Value> for some iMX fuses at <bank>/<row>\n"\
+	"imxfuse mac [<mac_addr>]  - read/blow <mac_addr> in iMX fuses\n"\
+	"imxfuse suid - read iMX SUID\n"\
+	"imxfuse scc_key - read iMX SCC_KEY\n");
+
+#endif /* CONFIG_CMD_IMX_FUSE */
Index: u-boot-2010.03/cpu/arm926ejs/mx27/i2c.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ u-boot-2010.03/cpu/arm926ejs/mx27/i2c.c	2011-01-05 18:08:44.000000000 +0100
@@ -0,0 +1,407 @@
+/*
+ * Eric Jarrige <jorasse@users.sourceforge.net>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ *
+ *
+ */
+
+#include <common.h>
+
+#ifdef CONFIG_HARD_I2C
+
+#include <asm/io.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/imx-regs.h>
+#include <i2c.h>
+#include "i2c.h"
+
+/*#define       DEBUG_I2C*/
+
+/* current active I2C bus */
+static unsigned int bus_num = 0;
+
+static int hclk_dividers[] = {
+	30, 32, 36, 42, 48, 52, 60, 72,
+	80, 88, 104, 128, 144, 160, 192, 240,
+	288, 320, 384, 480, 576, 640, 768, 960,
+	1152, 1280, 1536, 1920, 2304, 2560, 3072, 3840,
+	22, 24, 26, 26, 32, 36, 40, 44,
+	48, 56, 64, 72, 80, 96, 112, 128,
+	160, 192, 224, 256, 320, 384, 448, 512,
+	640, 768, 896, 1024, 1280, 1536, 1792, 2048
+};
+
+unsigned long i2c_bases[] = {IMX_I2C1_BASE, IMX_I2C2_BASE};
+
+extern void imx_gpio_mode (int gpio_mode);
+
+/*-----------------------------------------------------------------------
+ * Definitions
+ */
+
+#define I2C_ACK		0	/* level to ack a byte */
+#define I2C_NOACK	1	/* level to noack a byte */
+
+
+#ifdef DEBUG_I2C
+#define PRINTD(fmt,args...)	do {	\
+	DECLARE_GLOBAL_DATA_PTR;	\
+	if (gd->have_console)		\
+		printf (fmt ,##args);	\
+	} while (0)
+#else
+#define PRINTD(fmt,args...)
+#endif
+
+/*-----------------------------------------------------------------------
+ * Local functions
+ */
+
+/*-----------------------------------------------------------------------
+ * START: High -> Low on SDA while SCL is High
+ * after check for a bus free
+ */
+static void
+imxi2c_send_start (void)
+{
+	while ((I2SR(bus_num) & I2SR_IBB)) ;
+	I2CR(bus_num) |= I2CR_MSTA;
+	I2SR(bus_num) &= ~I2SR_IIF;
+}
+
+/*-----------------------------------------------------------------------
+ * STOP: Low -> High on SDA while SCL is High
+ * after the end of previous transfer
+ */
+static void
+imxi2c_send_stop (void)
+{
+	while (!(I2SR(bus_num) & I2SR_ICF)) ;
+	I2CR(bus_num) &= ~I2CR_MSTA;
+}
+
+/*-----------------------------------------------------------------------
+ * Send 8 bits and look for an acknowledgement.
+ */
+static int
+imxi2c_write_byte (uchar data)
+{
+	while (!(I2SR(bus_num) & I2SR_ICF)) ;	/* Wait end of transfer */
+
+	I2CR(bus_num) |= I2CR_MTX;
+	I2SR(bus_num) &= ~I2SR_IIF;
+	I2DR(bus_num) = data;
+
+	while (!(I2SR(bus_num) & I2SR_IIF)) ;	/* checking IIF before ICF seems required */
+
+	I2SR(bus_num) &= ~I2SR_IIF;
+
+	while (!(I2SR(bus_num) & I2SR_ICF)) ;	/* Wait end of transfer */
+
+	return (I2SR(bus_num) & I2SR_RXAK);	/* not a nack is an ack */
+}
+
+/*-----------------------------------------------------------------------
+ * if ack == I2C_ACK, ACK the byte so can continue reading, else
+ * send I2C_NOACK to end the read.
+ */
+static uchar
+imxi2c_read_byte (int ack)
+{
+	int data;
+
+	while (!(I2SR(bus_num) & I2SR_ICF)) ;
+	I2CR(bus_num) &= ~I2CR_MTX;
+
+	if (ack)
+	{
+		I2CR(bus_num) |= I2CR_TXAK;
+	}
+	else
+	{
+		I2CR(bus_num) &= ~I2CR_TXAK;
+	}
+
+	data = I2DR(bus_num);
+	return (data);
+}
+
+/* ------------------------------------------------------------------------
+ * API Functions
+ * ------------------------------------------------------------------------
+ */
+
+/*-----------------------------------------------------------------------
+ * i2c_init compute the i2c divider to reach the requested speed
+ * see mxl reference manual
+ */
+void
+i2c_init (int speed, int slaveaddr)
+{
+	int i;
+
+#ifdef CONFIG_I2C_MULTI_BUS
+	imx_gpio_mode (PC5_PF_I2C2_DATA);
+	imx_gpio_mode (PC6_PF_I2C2_CLK);
+	PCCR0 |= PCCR0_I2C2_EN; /*enable I2C2 clock*/
+#endif
+	imx_gpio_mode (PD17_PF_I2C_DATA);
+	imx_gpio_mode (PD18_PF_I2C_CLK);
+	PCCR0 |= PCCR0_I2C1_EN; /*enable I2C2 clock*/
+
+
+	for(i = 0; i < CONFIG_I2C_MULTI_BUS; i++){
+
+		i2c_set_bus_num(i);
+		I2CR(bus_num) = 0;
+
+		i2c_set_bus_speed(speed);
+
+		IADR(bus_num) = slaveaddr << 1;
+
+		I2CR(bus_num) = I2CR_IEN;
+		I2SR(bus_num) = 0;
+	}
+}
+
+/*-----------------------------------------------------------------------
+ * Probe to see if a chip is present. Also good for checking for the
+ * completion of EEPROM writes since the chip stops responding until
+ * the write completes (typically 10mSec).
+ * probe sends a read command to probe a an address
+ */
+int
+i2c_probe (uchar addr)
+{
+	int rc;
+
+	imxi2c_send_start ();
+	rc = imxi2c_write_byte ((addr << 1) | 0);
+	imxi2c_send_stop ();
+
+	return (rc ? 1 : 0);
+}
+
+/*-----------------------------------------------------------------------
+ * Read bytes
+ */
+int
+i2c_read (uchar chip, uint addr, int alen, uchar * buffer, int len)
+{
+	int shift;
+	PRINTD ("i2c_read: chip %02X addr %02X alen %d buffer %p len %d\n",
+		chip, addr, alen, buffer, len);
+
+#ifdef CONFIG_SYS_I2C_EEPROM_ADDR_OVERFLOW
+	/*
+	 * EEPROM chips that implement "address overflow" are ones
+	 * like Catalyst 24WC04/08/16 which has 9/10/11 bits of
+	 * address and the extra bits end up in the "chip address"
+	 * bit slots. This makes a 24WC08 (1Kbyte) chip look like
+	 * four 256 byte chips.
+	 *
+	 * Note that we consider the length of the address field to
+	 * still be one byte because the extra address bits are
+	 * hidden in the chip address.
+	 */
+	chip |= ((addr >> (alen * 8)) & CONFIG_SYS_I2C_EEPROM_ADDR_OVERFLOW);
+
+	PRINTD ("i2c_read: fix addr_overflow: chip %02X addr %02X\n",
+		chip, addr);
+#endif
+
+	/*
+	 * Do the addressing portion of a write cycle to set the
+	 * chip's address pointer. If the address length is zero,
+	 * don't do the normal write cycle to set the address pointer,
+	 * there is no address pointer in this chip.
+	 */
+	imxi2c_send_start ();
+	if (alen > 0)
+	{
+		if (imxi2c_write_byte (chip << 1))
+		{		/* write cycle */
+			imxi2c_send_stop ();
+			PRINTD ("i2c_read, no chip responded %02X\n", chip);
+			return (1);
+		}
+		shift = (alen - 1) * 8;
+		while (alen-- > 0)
+		{
+			if (imxi2c_write_byte (addr >> shift))
+			{
+				PRINTD ("i2c_read, address not <ACK>ed\n");
+				return (1);
+			}
+			shift -= 8;
+		}
+		imxi2c_send_stop ();	/* reportedly some chips need a full stop */
+		imxi2c_send_start ();
+	}
+	/*
+	 * Send the chip address again, this time for a read cycle.
+	 * Then read the data. On the last byte, we do a NACK instead
+	 * of an ACK(len == 0) to terminate the read.
+	 */
+	imxi2c_write_byte ((chip << 1) | 1);	/* read cycle */
+	imxi2c_read_byte (len <= 2);
+	while (len-- > 1)
+	{
+		*buffer++ = imxi2c_read_byte (len == 1);
+	}
+	imxi2c_send_stop ();
+	*buffer++ = imxi2c_read_byte (0);
+	return (0);
+}
+
+/*-----------------------------------------------------------------------
+ * Write bytes
+ */
+int
+i2c_write (uchar chip, uint addr, int alen, uchar * buffer, int len)
+{
+	int shift, failures = 0;
+
+	PRINTD ("i2c_write: chip %02X addr %02X alen %d buffer %p len %d\n",
+		chip, addr, alen, buffer, len);
+
+	imxi2c_send_start ();
+	if (imxi2c_write_byte (chip << 1))
+	{			/* write cycle */
+		imxi2c_send_stop ();
+		PRINTD ("i2c_write, no chip responded %02X\n", chip);
+		return (1);
+	}
+	shift = (alen - 1) * 8;
+	while (alen-- > 0)
+	{
+		if (imxi2c_write_byte (addr >> shift))
+		{
+			PRINTD ("i2c_write, address not <ACK>ed\n");
+			return (1);
+		}
+		shift -= 8;
+	}
+
+	while (len-- > 0)
+	{
+		if (imxi2c_write_byte (*buffer++))
+		{
+			failures++;
+		}
+	}
+	imxi2c_send_stop ();
+	return (failures);
+}
+
+/*-----------------------------------------------------------------------
+ * Read a register
+ */
+/*uchar
+i2c_reg_read (uchar i2c_addr, uchar reg)
+{
+	uchar buf;
+
+	i2c_read (i2c_addr, reg, 1, &buf, 1);
+
+	return (buf);
+}*/
+
+/*-----------------------------------------------------------------------
+ * Write a register
+ */
+/*void
+i2c_reg_write (uchar i2c_addr, uchar reg, uchar val)
+{
+	i2c_write (i2c_addr, reg, 1, &val, 1);
+}*/
+
+/*
+ * i2c_set_bus_num:
+ *
+ *  Change the active I2C bus.  Subsequent read/write calls will
+ *  go to this one.
+ *
+ *	bus - bus index, zero based
+ *
+ *	Returns: 0 on success, not 0 on failure
+ *
+ */
+int i2c_set_bus_num(unsigned int bus) {
+
+	if (bus >= CONFIG_I2C_MULTI_BUS) {
+		return 1;
+	}
+	bus_num = bus;
+
+	return 0;
+}
+
+/*
+ * i2c_get_bus_num:
+ *
+ *  Returns index of currently active I2C bus.  Zero-based.
+ */
+
+unsigned int i2c_get_bus_num(void) {
+	return bus_num;
+}
+
+/*
+ * i2c_set_bus_speed:
+ *
+ *  Change the speed of the active I2C bus
+ *
+ *	speed - bus speed in Hz
+ *
+ *	Returns: 0 on success, not 0 on failure
+ *
+ */
+int i2c_set_bus_speed(unsigned int speed){
+	int refDiv = imx_get_perclk3 () / speed;
+	int i, tmpIC;
+
+	tmpIC = (sizeof (hclk_dividers) / sizeof (int)) - 1;
+	for (i = tmpIC; i >= 0; i--)
+	{
+		if ((hclk_dividers[i] >= refDiv)
+		    && (hclk_dividers[i] < hclk_dividers[tmpIC]))
+		{
+			tmpIC = i;
+		}
+	}
+	IFDR(bus_num) = tmpIC;
+
+	return 0;
+}
+
+/*
+ * i2c_get_bus_speed:
+ *
+ *  Returns speed of currently active I2C bus in Hz
+ */
+unsigned int i2c_get_bus_speed(void){
+
+	int speed = imx_get_perclk3 () / hclk_dividers[IFDR(bus_num)];
+
+	return speed;
+}
+
+#endif /* CONFIG_HARD_I2C */
Index: u-boot-2010.03/cpu/arm926ejs/mx27/i2c.h
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ u-boot-2010.03/cpu/arm926ejs/mx27/i2c.h	2011-01-05 18:08:44.000000000 +0100
@@ -0,0 +1,59 @@
+/*
+ * Eric Jarrige <jorasse@users.sourceforge.net>
+ *
+ * See file CREDITS for list of people who contributed to this
+ * project.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License as
+ * published by the Free Software Foundation; either version 2 of
+ * the License, or (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ * MA 02111-1307 USA
+ *
+ *
+ */
+#ifndef _i2c_h_
+#define _i2c_h_
+
+#include <asm/arch/imx-regs.h>
+
+/*
+ * I2C module
+ */
+extern unsigned long i2c_bases[];
+
+#define __REG(x)	(*((volatile u32 *)(x)))
+
+#define PCCR0		__REG(IMX_PLL_BASE + 0x20) /* Peripheral Clock Control Register 0 */
+
+#define IADR(x)   __REG(i2c_bases[x] + 0x000) /* I2C Address Register */
+#define IFDR(x)   __REG(i2c_bases[x] + 0x004) /* I2C Frequency Divider Register*/
+#define I2CR(x)   __REG(i2c_bases[x] + 0x008) /* I2C Control Register */
+#define I2SR(x)   __REG(i2c_bases[x] + 0x00C) /* I2C Status Register */
+#define I2DR(x)   __REG(i2c_bases[x] + 0x010) /* I2C Data I/O Register */
+/* I2C Control Register Bit Fields */
+#define I2CR_IEN 	(1<<7)		/* I2C Enable */
+#define I2CR_IIEN 	(1<<6)		/* I2C Interrupt Enable */
+#define I2CR_MSTA 	(1<<5)		/* I2C Master/Slave Mode Select */
+#define I2CR_MTX 	(1<<4)		/* I2C Transmit/Receive Mode Select */
+#define I2CR_TXAK 	(1<<3)		/* I2C Transmit Acknowledge Enable */
+#define I2CR_RSTA 	(1<<2)		/* I2C Repeated START */
+#define I2SR_ICF 	(1<<7)		/* I2C Data Transfer */
+#define I2SR_IAAS 	(1<<6)		/* I2C Addressed As a Slave */
+#define I2SR_IBB 	(1<<5)		/* I2C Bus Busy */
+#define I2SR_IAL 	(1<<4)		/* I2C Arbitration Lost */
+#define I2SR_SRW 	(1<<2)		/* I2C Slave Read/Write	*/
+#define I2SR_IIF 	(1<<1)		/* I2C interrupt */
+#define I2SR_RXAK 	(1<<0)		/* I2C Received Acknowledge */
+
+
+#endif /* _i2c_h_ */
Index: u-boot-2010.03/cpu/arm926ejs/mx27/Makefile
===================================================================
--- u-boot-2010.03.orig/cpu/arm926ejs/mx27/Makefile	2011-01-05 18:05:13.000000000 +0100
+++ u-boot-2010.03/cpu/arm926ejs/mx27/Makefile	2011-01-05 18:08:44.000000000 +0100
@@ -24,7 +24,7 @@
 
 LIB	= $(obj)lib$(SOC).a
 
-COBJS	= generic.o reset.o timer.o
+COBJS	= generic.o reset.o timer.o cmd_imxfuse.o i2c.o
 
 SRCS	:= $(SOBJS:.o=.S) $(COBJS:.o=.c)
 OBJS	:= $(addprefix $(obj),$(SOBJS) $(COBJS))
Index: u-boot-2010.03/cpu/arm926ejs/mx27/generic.c
===================================================================
--- u-boot-2010.03.orig/cpu/arm926ejs/mx27/generic.c	2011-01-05 18:05:13.000000000 +0100
+++ u-boot-2010.03/cpu/arm926ejs/mx27/generic.c	2011-01-05 18:08:44.000000000 +0100
@@ -153,12 +153,80 @@
 }
 
 #if defined(CONFIG_DISPLAY_CPUINFO)
+
+static ulong imx_get_usbclk(void)
+{
+	struct pll_regs *pll = (struct pll_regs *)IMX_PLL_BASE;
+	return (imx_get_spllclk() / (((readl(&pll->cscr) >> 28) & 0x07) + 1));
+}
+
+static ulong imx_get_nfcclk(void)
+{
+	struct pll_regs *pll = (struct pll_regs *)IMX_PLL_BASE;
+	return (imx_get_ahbclk() / (((readl(&pll->pcdr0) >> 6) & 0x0f) + 1));
+}
+
+static ulong imx_get_mshcclk(void)
+{
+	struct pll_regs *pll = (struct pll_regs *)IMX_PLL_BASE;
+	return (imx_get_mpllclk() * 2 / (((readl(&pll->pcdr0) >> 0) & 0x3f) + 1) / 3);
+}
+
+static ulong imx_get_h264clk(void)
+{
+	struct pll_regs *pll = (struct pll_regs *)IMX_PLL_BASE;
+	return ((imx_get_mpllclk() * 4 ) / (((readl(&pll->pcdr0) >> 10) & 0x3f) + 4) / 3);
+}
+
+static ulong imx_get_ssi1clk(void)
+{
+	struct pll_regs *pll = (struct pll_regs *)IMX_PLL_BASE;
+	return ((imx_get_mpllclk() * 4 ) / (((readl(&pll->pcdr0) >> 16) & 0x3f) + 4) / 3);
+}
+
+static ulong imx_get_ssi2clk(void)
+{
+	struct pll_regs *pll = (struct pll_regs *)IMX_PLL_BASE;
+	return ((imx_get_mpllclk() * 4) / (((readl(&pll->pcdr0) >> 26) & 0x3f) + 4) / 3);
+}
+
+int imx_dump_clocks(void)
+{
+	struct esdramc_regs *esdramc = (struct esdramc_regs *)IMX_ESD_BASE;
+	printf("mpll   : %10ld Hz\n", imx_get_mpllclk());
+	printf("spll   : %10ld Hz\n", imx_get_spllclk());
+	printf("arm    : %10ld Hz\n", imx_get_armclk());
+	printf("hclk   : %10ld Hz\n", imx_get_ahbclk());
+	printf("perclk1: %10ld Hz\n", imx_get_perclk1());
+	printf("perclk2: %10ld Hz\n", imx_get_perclk2());
+	printf("perclk3: %10ld Hz\n", imx_get_perclk3());
+	printf("perclk4: %10ld Hz\n", imx_get_perclk4());
+	printf("usbclk : %10ld Hz\n", imx_get_usbclk());
+	printf("nfcclk : %10ld Hz\n", imx_get_nfcclk());
+	printf("mshcclk: %10ld Hz\n", imx_get_mshcclk());
+	printf("h264clk: %10ld Hz\n", imx_get_h264clk());
+	printf("ssi1clk: %10ld Hz\n", imx_get_ssi1clk());
+	printf("ssi2clk: %10ld Hz\n", imx_get_ssi2clk());
+	printf("clkin26: %10ld Hz\n", clk_in_26m());
+	printf("clkin32: %10d Hz\n", clk_in_32k()/1024);
+	printf("ESDCTL0: %#x ESDCTL1: %#x\n", readl(&esdramc->esdctl0), readl(&esdramc->esdctl1));
+	printf("ESDCFG0: %#x ESDCFG1: %#x\n", readl(&esdramc->esdcfg0),readl(&esdramc->esdcfg1));
+	printf("SDmdreg: %#x\n", CONFIG_SYS_SDRAM_1_BASE+CONFIG_SYS_SDRAM_MODE_REGISTER_VAL);
+	printf("SDemdreg: %#x\n", CONFIG_SYS_SDRAM_1_BASE+CONFIG_SYS_SDRAM_EXT_MODE_REGISTER_VAL);
+	printf("SDprech: %#x\n", CONFIG_SYS_SDRAM_PRECHARGE_ALL_VAL);
+	printf("SPL Saved boot: %#lx\n", *((long*)(0xa0200004)));
+	printf("uboot Saved boot: %#lx\n", *((long*)(0xa0200008)));
+
+	return 0;
+}
+
 int print_cpuinfo (void)
 {
 	char buf[32];
 
 	printf("CPU:   Freescale i.MX27 at %s MHz\n\n",
 			strmhz(buf, imx_get_mpllclk()));
+	imx_dump_clocks();
 	return 0;
 }
 #endif
Index: u-boot-2010.03/include/asm-arm/arch-mx27/imx-regs.h
===================================================================
--- u-boot-2010.03.orig/include/asm-arm/arch-mx27/imx-regs.h	2011-01-05 18:05:13.000000000 +0100
+++ u-boot-2010.03/include/asm-arm/arch-mx27/imx-regs.h	2011-01-05 18:08:44.000000000 +0100
@@ -516,4 +516,220 @@
 #define IIM0_SCC_KEY		11
 #define IIM1_SUID		1
 
+/* IIM Control Registers */
+#define IIM_BANK_AREA	IMX_IIM_BASE + 0x800
+#define IIM_BANK_REG(x,y) (IIM_BANK_AREA + 0x400 * x + (y<<2))
+
+# ifdef __ASSEMBLY__
+#  define __REG(x) (x)
+#  define __REG16(x) (x)
+#  define __REG2(x,y) ((x)+(y))
+
+/*
+ *  GPIO Module and I/O Multiplexer
+ */
+#define PORTA 0
+#define PORTB 1
+#define PORTC 2
+#define PORTD 3
+#define PORTE 4
+#define PORTF 5
+
+#define AIPI1_PSR0	__REG(IMX_AIPI1_BASE + 0x00)
+#define AIPI1_PSR1	__REG(IMX_AIPI1_BASE + 0x04)
+#define AIPI2_PSR0	__REG(IMX_AIPI2_BASE + 0x00)
+#define AIPI2_PSR1	__REG(IMX_AIPI2_BASE + 0x04)
+
+/* System Control */
+#define FMCR	__REG(IMX_SYSTEM_CTL_BASE + 0x14)
+#define GPCR	__REG(IMX_SYSTEM_CTL_BASE + 0x18)
+#define WBCR	__REG(IMX_SYSTEM_CTL_BASE + 0x1C)
+#define DSCR1	__REG(IMX_SYSTEM_CTL_BASE + 0x20)
+#define DSCR2	__REG(IMX_SYSTEM_CTL_BASE + 0x24)
+#define DSCR3	__REG(IMX_SYSTEM_CTL_BASE + 0x28)
+#define DSCR4	__REG(IMX_SYSTEM_CTL_BASE + 0x2C)
+#define DSCR5	__REG(IMX_SYSTEM_CTL_BASE + 0x30)
+#define DSCR6	__REG(IMX_SYSTEM_CTL_BASE + 0x34)
+#define DSCR7	__REG(IMX_SYSTEM_CTL_BASE + 0x38)
+#define DSCR8	__REG(IMX_SYSTEM_CTL_BASE + 0x3C)
+#define DSCR9	__REG(IMX_SYSTEM_CTL_BASE + 0x40)
+#define DSCR10	__REG(IMX_SYSTEM_CTL_BASE + 0x44)
+#define DSCR11	__REG(IMX_SYSTEM_CTL_BASE + 0x48)
+#define DSCR12	__REG(IMX_SYSTEM_CTL_BASE + 0x4C)
+#define DSCR13	__REG(IMX_SYSTEM_CTL_BASE + 0x50)
+#define PSCR	__REG(IMX_SYSTEM_CTL_BASE + 0x54)
+#define PMCR	__REG(IMX_SYSTEM_CTL_BASE + 0x58)
+#define DCVR0	__REG(IMX_SYSTEM_CTL_BASE + 0x60)
+#define DCVR1	__REG(IMX_SYSTEM_CTL_BASE + 0x64)
+#define DCVR2	__REG(IMX_SYSTEM_CTL_BASE + 0x68)
+#define DCVR3	__REG(IMX_SYSTEM_CTL_BASE + 0x6C)
+
+/* Chip Select Registers */
+#define CS0U __REG(IMX_WEIM_BASE + 0x00) /* Chip Select 0 Upper Register    */
+#define CS0L __REG(IMX_WEIM_BASE + 0x04) /* Chip Select 0 Lower Register    */
+#define CS0A __REG(IMX_WEIM_BASE + 0x08) /* Chip Select 0 Addition Register */
+#define CS1U __REG(IMX_WEIM_BASE + 0x10) /* Chip Select 1 Upper Register    */
+#define CS1L __REG(IMX_WEIM_BASE + 0x14) /* Chip Select 1 Lower Register    */
+#define CS1A __REG(IMX_WEIM_BASE + 0x18) /* Chip Select 1 Addition Register */
+#define CS2U __REG(IMX_WEIM_BASE + 0x20) /* Chip Select 2 Upper Register    */
+#define CS2L __REG(IMX_WEIM_BASE + 0x24) /* Chip Select 2 Lower Register    */
+#define CS2A __REG(IMX_WEIM_BASE + 0x28) /* Chip Select 2 Addition Register */
+#define CS3U __REG(IMX_WEIM_BASE + 0x30) /* Chip Select 3 Upper Register    */
+#define CS3L __REG(IMX_WEIM_BASE + 0x34) /* Chip Select 3 Lower Register    */
+#define CS3A __REG(IMX_WEIM_BASE + 0x38) /* Chip Select 3 Addition Register */
+#define CS4U __REG(IMX_WEIM_BASE + 0x40) /* Chip Select 4 Upper Register    */
+#define CS4L __REG(IMX_WEIM_BASE + 0x44) /* Chip Select 4 Lower Register    */
+#define CS4A __REG(IMX_WEIM_BASE + 0x48) /* Chip Select 4 Addition Register */
+#define CS5U __REG(IMX_WEIM_BASE + 0x50) /* Chip Select 5 Upper Register    */
+#define CS5L __REG(IMX_WEIM_BASE + 0x54) /* Chip Select 5 Lower Register    */
+#define CS5A __REG(IMX_WEIM_BASE + 0x58) /* Chip Select 5 Addition Register */
+#define EIM  __REG(IMX_WEIM_BASE + 0x60) /* WEIM Configuration Register     */
+
+/* SDRAM Controller registers */
+#define ESDCTL0 __REG(IMX_ESD_BASE + 0x00) /* Enhanced SDRAM Control Register 0       */
+#define ESDCFG0 __REG(IMX_ESD_BASE + 0x04) /* Enhanced SDRAM Configuration Register 0 */
+#define ESDCTL1 __REG(IMX_ESD_BASE + 0x08) /* Enhanced SDRAM Control Register 1       */
+#define ESDCFG1 __REG(IMX_ESD_BASE + 0x0C) /* Enhanced SDRAM Configuration Register 1 */
+#define ESDMISC __REG(IMX_ESD_BASE + 0x10) /* Enhanced SDRAM Miscellanious Register   */
+
+/* PLL registers */
+#define CSCR		__REG(IMX_PLL_BASE + 0x00) /* Clock Source Control Register       */
+#define MPCTL0		__REG(IMX_PLL_BASE + 0x04) /* MCU PLL Control Register 0          */
+#define MPCTL1		__REG(IMX_PLL_BASE + 0x08) /* MCU PLL Control Register 1          */
+#define SPCTL0		__REG(IMX_PLL_BASE + 0x0c) /* System PLL Control Register 0       */
+#define SPCTL1		__REG(IMX_PLL_BASE + 0x10) /* System PLL Control Register 1       */
+#define OSC26MCTL	__REG(IMX_PLL_BASE + 0x14) /* Oscillator 26M Register             */
+#define PCDR0		__REG(IMX_PLL_BASE + 0x18) /* Peripheral Clock Divider Register 0 */
+#define PCDR1		__REG(IMX_PLL_BASE + 0x1c) /* Peripheral Clock Divider Register 1 */
+#define PCCR0		__REG(IMX_PLL_BASE + 0x20) /* Peripheral Clock Control Register 0 */
+#define PCCR1		__REG(IMX_PLL_BASE + 0x24) /* Peripheral Clock Control Register 1 */
+#define CCSR		__REG(IMX_PLL_BASE + 0x28) /* Clock Control Status Register       */
+
+#define DDIR(x)    __REG2(IMX_GPIO_BASE + 0x00, ((x) & 7) << 8)
+#define OCR1(x)    __REG2(IMX_GPIO_BASE + 0x04, ((x) & 7) << 8)
+#define OCR2(x)    __REG2(IMX_GPIO_BASE + 0x08, ((x) & 7) << 8)
+#define ICONFA1(x) __REG2(IMX_GPIO_BASE + 0x0c, ((x) & 7) << 8)
+#define ICONFA2(x) __REG2(IMX_GPIO_BASE + 0x10, ((x) & 7) << 8)
+#define ICONFB1(x) __REG2(IMX_GPIO_BASE + 0x14, ((x) & 7) << 8)
+#define ICONFB2(x) __REG2(IMX_GPIO_BASE + 0x18, ((x) & 7) << 8)
+#define DR(x)      __REG2(IMX_GPIO_BASE + 0x1c, ((x) & 7) << 8)
+#define GIUS(x)    __REG2(IMX_GPIO_BASE + 0x20, ((x) & 7) << 8)
+#define SSR(x)     __REG2(IMX_GPIO_BASE + 0x24, ((x) & 7) << 8)
+#define ICR1(x)    __REG2(IMX_GPIO_BASE + 0x28, ((x) & 7) << 8)
+#define ICR2(x)    __REG2(IMX_GPIO_BASE + 0x2c, ((x) & 7) << 8)
+#define IMR(x)     __REG2(IMX_GPIO_BASE + 0x30, ((x) & 7) << 8)
+#define ISR(x)     __REG2(IMX_GPIO_BASE + 0x34, ((x) & 7) << 8)
+#define GPR(x)     __REG2(IMX_GPIO_BASE + 0x38, ((x) & 7) << 8)
+#define SWR(x)     __REG2(IMX_GPIO_BASE + 0x3c, ((x) & 7) << 8)
+#define PUEN(x)    __REG2(IMX_GPIO_BASE + 0x40, ((x) & 7) << 8)
+
+ /* Macros to get byte and bit positions of ECC
+ */
+#define COLPOS(x)			((x) >> 4)
+#define BITPOS(x)			((x)& 0xf)
+
+/**
+ * Memory areas of the NFC
+ */
+#define IMX_NFC_BASE                    (0xD8000000)
+#define IMX_NFC_MAIN_AREA0              (0xD8000000)
+#define IMX_NFC_MAIN_AREA1              (0xD8000200)
+#define IMX_NFC_SPARE_AREA0             (0xD8000800)
+#define IMX_NFC_REGS                    (0xD8000E00)
+
+/*
+ * NFC registers address offest
+ */
+#define NFC_OFFSET_BUFSIZE             (0x00) /* Internal SRAM Size */
+#define NFC_OFFSET_BLCK_ADD_LOCK       (0x02) /* NAND Flash Block Address for Lock Check */
+#define NFC_OFFSET_BUF_ADDR            (0x04) /* Buffer Number for Page Data Transfer To/
+                                                 From Flash Memory */
+#define NFC_OFFSET_FLASH_ADDR          (0x06) /* NAND Flash Address */
+#define NFC_OFFSET_FLASH_CMD           (0x08) /* NAND Flash Command */
+#define NFC_OFFSET_CONFIG              (0x0A) /* NFC Internal Buffer Lock Control */
+#define NFC_OFFSET_ECC_STATUS_RESULT   (0x0C) /* Controller Status/Result of Flash Operation */
+#define NFC_OFFSET_ECC_RSLT_MAIN_AREA  (0x0E) /* ECC Error Position of Main Area Data Error */
+#define NFC_OFFSET_ECC_RSLT_SPARE_AREA (0x10) /* ECC Error Position of Spare Area Data Error */
+#define NFC_OFFSET_WRPROT              (0x12) /* Nand Flash Write Protection */
+#define NFC_OFFSET_UNLOCKSTART_BLKADDR (0x14) /* Start Address for Write Protection Unlock */
+#define NFC_OFFSET_UNLOCKEND_BLKADDR   (0x16) /* End Address for Write Protection Unlock */
+#define NFC_OFFSET_WRPR_STAT           (0x18) /* Current Nand Flash Write Protection Status */
+#define NFC_OFFSET_CONFIG1             (0x1A) /* Nand Flash Operation Configuration 1 */
+#define NFC_OFFSET_CONFIG2             (0x1C) /* Nand Flash Operation Configuration 2 */
+
+/*
+ * NFC registers
+ */
+	/* Internal SRAM Size */
+#define NFC_BUFSIZE             __REG16(IMX_NFC_REGS + NFC_OFFSET_BUFSIZE)
+	/* NAND Flash Block Address for Lock Check */
+#define NFC_BLCK_ADD_LOCK       __REG16(IMX_NFC_REGS + NFC_OFFSET_BLCK_ADD_LOCK)
+	/* Buffer Number for Page Data Transfer To From Flash Memory */
+#define NFC_BUF_ADDR            __REG16(IMX_NFC_REGS + NFC_OFFSET_BUF_ADDR)
+	/* NAND Flash Address */
+#define NFC_FLASH_ADDR          __REG16(IMX_NFC_REGS + NFC_OFFSET_FLASH_ADDR)
+	/* NAND Flash Command */
+#define NFC_FLASH_CMD           __REG16(IMX_NFC_REGS + NFC_OFFSET_FLASH_CMD)
+	/* NFC Internal Buffer Lock Control */
+#define NFC_CONFIG              __REG16(IMX_NFC_REGS + NFC_OFFSET_CONFIG)
+	/* Controller Status/Result of Flash Operation */
+#define NFC_ECC_STATUS_RESULT   __REG16(IMX_NFC_REGS + NFC_OFFSET_ECC_STATUS_RESULT)
+	/* ECC Error Position of Main Area Data Error */
+#define NFC_ECC_RSLT_MAIN_AREA  __REG16(IMX_NFC_REGS + NFC_OFFSET_ECC_RSLT_MAIN_AREA)
+	/* ECC Error Position of Spare Area Data Error */
+#define NFC_ECC_RSLT_SPARE_AREA __REG16(IMX_NFC_REGS + NFC_OFFSET_ECC_RSLT_SPARE_AREA)
+	/* Nand Flash Write Protection */
+#define NFC_WRPROT              __REG16(IMX_NFC_REGS + NFC_OFFSET_WRPROT)
+	/* Start Address for Write Protection Unlock */
+#define NFC_UNLOCKSTART_BLKADDR __REG16(IMX_NFC_REGS + NFC_OFFSET_UNLOCKSTART_BLKADDR)
+	/* End Address for Write Protection Unlock */
+#define NFC_UNLOCKEND_BLKADDR   __REG16(IMX_NFC_REGS + NFC_OFFSET_UNLOCKEND_BLKADDR)
+	/* Current Nand Flash Write Protection Status */
+#define NFC_WRPR_STAT           __REG16(IMX_NFC_REGS + NFC_OFFSET_WRPR_STAT)
+	/* Nand Flash Operation Configuration 1 */
+#define NFC_CONFIG1             __REG16(IMX_NFC_REGS + NFC_OFFSET_CONFIG1)
+	/* Nand Flash Operation Configuration 2 */
+#define NFC_CONFIG2             __REG16(IMX_NFC_REGS + NFC_OFFSET_CONFIG2)
+
+/* NFC_ECC_STATUS_RESULT Status Register Bit Fields */
+#define NFC_ECC_STAT_ERM_SHFT 	(2)		    /* ERM shift */
+#define NFC_ECC_STAT_ERS_MASK 	(0x03)		/* ERS mask  */
+#define NFC_ECC_STAT_ERROR1 	(1<<0)		/* correctable error */
+#define NFC_ECC_STAT_ERROR2 	(1<<1)		/* non correctable error */
+
+/* NFC_CONFIG Control Register Bit Fields */
+#define NFC_CONFIG_UNLOCKED     (1<<1)		/* unlocked */
+#define NFC_CONFIG_LOCKED       (1<<0)		/* locked */
+/* NFC_WRPROT Control Register Bit Fields */
+#define NFC_WRPROT_UNLOCKBLK    (4<<0)		/* unlock block according to given address range */
+#define NFC_WRPROT_LOCKALL 	    (2<<0)		/* lock all */
+#define NFC_WRPROT_LOCKTIGHT    (1<<0)		/* lock-tight locked blocks */
+/* NFC_WRPR_STAT Status Register Bit Fields */
+#define NFC_WRPR_US 	        (1<<2)		/* Unlocked status	*/
+#define NFC_WRPR_LS 	        (1<<1)		/* Locked status */
+#define NFC_WRPR_LTS 	        (1<<0)		/* Lock-tight Status */
+/* NFC_CONFIG1 Control Register Bit Fields */
+#define NFC_CONFIG1_CEn 	    (1<<7)		/* Flash force CE */
+#define NFC_CONFIG1_RST 	    (1<<6)		/* Reset */
+#define NFC_CONFIG1_BIG 	    (1<<5)		/* Big Endian Mode */
+#define NFC_CONFIG1_INT_MSK     (1<<4)		/* Mask Interrupt Bit	*/
+#define NFC_CONFIG1_ECC_EN 	    (1<<3)		/* ECC operation enable */
+#define NFC_CONFIG1_SP_EN 	    (1<<2)		/* Flash spare enable */
+/* NFC_CONFIG2 Control Register Bit Fields */
+#define NFC_CONFIG2_INT	        (1<<15)		/* Interrupt */
+#define NFC_CONFIG2_FDO_STATUS	(4<<3)		/* Flash status output */
+#define NFC_CONFIG2_FDO_ID	    (2<<3)		/* Flash ID output */
+#define NFC_CONFIG2_FDO_PAGE    (1<<3)		/* Flash data output */
+#define NFC_CONFIG2_FDI         (1<<2)		/* Flash data input	*/
+#define NFC_CONFIG2_FADD 	    (1<<1)		/* Flash address input */
+#define NFC_CONFIG2_FCMD 	    (1<<0)		/* Flash command input */
+
+#define NAND_CMD_LOCK		0x2a
+#define NAND_CMD_LOCK_TIGHT	0x2c
+#define NAND_CMD_UNLOCK1	0x23
+#define NAND_CMD_UNLOCK2	0x24
+#define NAND_CMD_LOCK_STATUS	0x7a
+
+#endif
+
 #endif				/* _IMX_REGS_H */
