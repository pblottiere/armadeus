Signed-off-by: Eric Jarrige <eric.jarrige@armadeus.org>
Signed-off-by: Philippe Reynes <tremyfr@yahoo.fr>
---
 arch/arm/include/asm/arch-mx5/imx_iim.h |   61 ++++++
 common/Makefile                         |    1 +
 common/cmd_iim.c                        |   95 +++++++++
 drivers/misc/Makefile                   |    1 +
 drivers/misc/imx_iim.c                  |  333 +++++++++++++++++++++++++++++++
 5 files changed, 491 insertions(+), 0 deletions(-)
 create mode 100644 arch/arm/include/asm/arch-mx5/imx_iim.h
 create mode 100644 common/cmd_iim.c
 create mode 100644 drivers/misc/imx_iim.c

diff --git a/arch/arm/include/asm/arch-mx5/imx_iim.h b/arch/arm/include/asm/arch-mx5/imx_iim.h
new file mode 100644
index 0000000..c5203a0
--- /dev/null
+++ b/arch/arm/include/asm/arch-mx5/imx_iim.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2009-2010 Freescale Semiconductor, Inc.
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#ifndef __IMX_IIM_H__
+#define __IMX_IIM_H__
+
+
+#define IIM_PROD_REV_SH         3
+#define IIM_PROD_REV_LEN        5
+#define IIM_SREV_REV_SH         4
+#define IIM_SREV_REV_LEN        4
+#define PROD_SIGNATURE_MX51     0x1
+
+/*
+ * IIM STAT
+ */
+#define IIM_STAT_BUSY	(1 << 7)
+#define IIM_STAT_PRGD	(1 << 1)
+#define IIM_STAT_SNSD	(1 << 0)
+
+#define IIM_ERR_SHIFT       8
+#define POLL_FUSE_PRGD      (IIM_STAT_PRGD | (IIM_ERR_PRGE << IIM_ERR_SHIFT))
+#define POLL_FUSE_SNSD      (IIM_STAT_SNSD | (IIM_ERR_SNSE << IIM_ERR_SHIFT))
+
+/*
+ * IIM ERR
+ */
+#define IIM_ERR_PRGE	(1 << 7)
+#define IIM_ERR_WPE	(1 << 6)
+#define IIM_ERR_OPE	(1 << 5)
+#define IIM_ERR_RPE	(1 << 4)
+#define IIM_ERR_WLRE	(1 << 3)
+#define IIM_ERR_SNSE	(1 << 2)
+#define IIM_ERR_PARITYE	(1 << 1)
+
+#define IIM_BANK_AREA_0_OFFSET	0x800
+#define IIM_BANK_AREA_1_OFFSET	0xc00
+#define IIM_BANK_AREA_2_OFFSET	0x1000
+#define IIM_BANK_AREA_3_OFFSET	0x1400
+
+int iim_read(int bank, char row);
+int iim_blow(int bank, int row, int val);
+int iim_blow_func(char *func_name, char *func_val);
+
+#endif
diff --git a/common/Makefile b/common/Makefile
index 973f05a..f368b24 100644
--- a/common/Makefile
+++ b/common/Makefile
@@ -113,6 +113,7 @@ ifdef CONFIG_FPGA
 obj-$(CONFIG_CMD_FUSE) += cmd_fuse.o
 obj-$(CONFIG_CMD_GETTIME) += cmd_gettime.o
 obj-$(CONFIG_CMD_GPIO) += cmd_gpio.o
+obj-$(CONFIG_CMD_IIM) += cmd_iim.o
 obj-$(CONFIG_CMD_I2C) += cmd_i2c.o
 obj-$(CONFIG_CMD_IOTRACE) += cmd_iotrace.o
 obj-$(CONFIG_CMD_HASH) += cmd_hash.o
diff --git a/common/cmd_iim.c b/common/cmd_iim.c
new file mode 100644
index 0000000..d47ccf5
--- /dev/null
+++ b/common/cmd_iim.c
@@ -0,0 +1,79 @@
+/*
+ * Copyright (C) 2008-2010 Freescale Semiconductor, Inc.
+ *
+ * Copyright (C) 2007, Freescale Semiconductor, Inc
+ * Andy Fleming
+ *
+ * Based vaguely on the pxa mmc code:
+ * Copyright (C) 2003
+ * Kyle Harris, Nexus Technologies, Inc. kharris@nexus-tech.net
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <linux/types.h>
+#include <asm/io.h>
+#include <command.h>
+#include <common.h>
+#include <asm/arch/imx_iim.h>
+
+int do_iimops(cmd_tbl_t *cmdtp, int flag, int argc, char *const argv[])
+{
+	int bank = 0,
+		row = 0,
+		val = 0;
+
+	if (argc < 3 || argc > 5)
+		goto err_rtn;
+
+	if (strcmp(argv[1], "read") == 0) {
+		if (strcmp(argv[2], "fecmac") == 0) {
+			if (3 == argc)
+				iim_blow_func(argv[2], NULL);
+			else
+				goto err_rtn;
+		} else {
+			if (4 == argc) {
+				bank = simple_strtoul(argv[2], NULL, 16);
+				row = simple_strtoul(argv[3], NULL, 16);
+
+				iim_read(bank, row);
+			} else
+				goto err_rtn;
+		}
+	} else if (strcmp(argv[1], "blow") == 0) {
+		if (strcmp(argv[2], "fecmac") == 0) {
+			if (4 == argc)
+				iim_blow_func(argv[2], argv[3]);
+			else
+				goto err_rtn;
+		} else {
+			if (5 == argc) {
+				bank = simple_strtoul(argv[2], NULL, 16);
+				row = simple_strtoul(argv[3], NULL, 16);
+				val = simple_strtoul(argv[4], NULL, 16);
+
+				iim_blow(bank, row, val);
+			} else
+				goto err_rtn;
+		}
+	} else
+		goto err_rtn;
+
+	return 0;
+err_rtn:
+	printf("Invalid parameters!\n");
+	printf("It is too dangeous for you to use iim command.\n");
+	return 1;
+}
+
+U_BOOT_CMD(
+	iim, 5, 1, do_iimops,
+	"IIM sub system",
+	"Warning: all numbers in parameter are in hex format!\n"
+	"iim read <bank> <row>	- Read some fuses\n"
+	"iim read fecmac	- Read FEC Mac address\n"
+	"iim blow <bank> <row> <value>	- Blow some fuses\n"
+	"iim blow fecmac <0x##:0x##:0x##:0x##:0x##:0x##>"
+	"- Blow FEC Mac address");
+
diff --git a/drivers/misc/Makefile b/drivers/misc/Makefile
index 271463c..9a444bc 100644
--- a/drivers/misc/Makefile
+++ b/drivers/misc/Makefile
@@ -15,6 +15,7 @@ COBJS-$(CONFIG_ALI152X) += ali512x.o
 obj-$(CONFIG_CROS_EC_SPI) += cros_ec_spi.o
 obj-$(CONFIG_FSL_IIM) += fsl_iim.o
 obj-$(CONFIG_GPIO_LED) += gpio_led.o
+obj-$(CONFIG_IMX_IIM) += imx_iim.o
 obj-$(CONFIG_FSL_MC9SDZ60) += mc9sdz60.o
 obj-$(CONFIG_MXC_OCOTP) += mxc_ocotp.o
 obj-$(CONFIG_MXS_OCOTP) += mxs_ocotp.o
diff --git a/drivers/misc/imx_iim.c b/drivers/misc/imx_iim.c
new file mode 100644
index 0000000..32da5fc
--- /dev/null
+++ b/drivers/misc/imx_iim.c
@@ -0,0 +1,317 @@
+/*
+ * Copyright (C) 2008-2010 Freescale Semiconductor, Inc.
+ * Terry Lv
+ *
+ * Copyright (C) 2007, Freescale Semiconductor, Inc
+ * Andy Fleming
+ *
+ * Based vaguely on the pxa mmc code:
+ * Copyright (C) 2003
+ * Kyle Harris, Nexus Technologies, Inc. kharris@nexus-tech.net
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <linux/types.h>
+#include <asm/io.h>
+#include <asm/arch/imx_iim.h>
+#include <asm/arch/imx-regs.h>
+#include <net.h>
+
+static const struct iim_regs *imx_iim =
+		(struct iim_regs *)IMX_IIM_BASE;
+
+/* slen - streng length, e.g.: 23 -> slen=2; abcd -> slen=4 */
+/* only convert hex value as string input. so "12" is 0x12. */
+static u32 quick_atoi(char *a, u32 slen)
+{
+	u32 i, num = 0, digit;
+
+	for (i = 0; i < slen; i++) {
+		if (a[i] >= '0' && a[i] <= '9') {
+			digit = a[i] - '0';
+		} else if (a[i] >= 'a' && a[i] <= 'f') {
+			digit = a[i] - 'a' + 10;
+		} else if (a[i] >= 'A' && a[i] <= 'F') {
+			digit = a[i] - 'A' + 10;
+		} else {
+			printf("ERROR: %c\n", a[i]);
+			return -1;
+		}
+		num = (num * 16) + digit;
+	}
+
+    return num;
+}
+
+static void fuse_op_start(void)
+{
+	/* Do not generate interrupt */
+	writel(0, &(imx_iim->statm));
+	/* clear the status bits and error bits */
+	writel(0x3, &(imx_iim->stat));
+	writel(0xfe, &(imx_iim->err));
+}
+
+/*
+ * The action should be either:
+ *          POLL_FUSE_PRGD
+ * or:
+ *          POLL_FUSE_SNSD
+ */
+static s32 poll_fuse_op_done(s32 action)
+{
+	u32 status, error;
+
+	if (action != POLL_FUSE_PRGD && action != POLL_FUSE_SNSD) {
+		printf("%s(%d) invalid operation\n", __func__, action);
+		return -1;
+	}
+
+	/* Poll busy bit till it is NOT set */
+	while ((readl(&(imx_iim->stat)) & IIM_STAT_BUSY) != 0)
+		;
+
+	/* Test for successful write */
+	status = readl(&(imx_iim->stat));
+	error = readl(&(imx_iim->err));
+
+	if ((status & action) != 0 && \
+			(error & (action >> IIM_ERR_SHIFT)) == 0) {
+		if (error) {
+			printf("Even though the operation"
+				"seems successful...\n");
+			printf("There are some error(s) "
+				"at addr=0x%x: 0x%x\n",
+				(u32)&(imx_iim->err), error);
+		}
+		return 0;
+	}
+	printf("%s(%d) failed\n", __func__, action);
+	printf("status address=0x%x, value=0x%x\n",
+		(u32)&(imx_iim->stat), status);
+	printf("There are some error(s) at addr=0x%x: 0x%x\n",
+		(u32)&(imx_iim->err), error);
+	return -1;
+}
+
+static u32 sense_fuse(s32 bank, s32 row, s32 bit)
+{
+	s32 addr, addr_l, addr_h;
+
+	fuse_op_start();
+
+	addr = ((bank << 11) | (row << 3) | (bit & 0x7));
+	/* Set IIM Program Upper Address */
+	addr_h = (addr >> 8) & 0x000000FF;
+	/* Set IIM Program Lower Address */
+	addr_l = (addr & 0x000000FF);
+
+#ifdef IIM_FUSE_DEBUG
+	printf("%s: addr_h=0x%x, addr_l=0x%x\n",
+			__func__, addr_h, addr_l);
+#endif
+	writel(addr_h, &(imx_iim->ua));
+	writel(addr_l, &(imx_iim->la));
+
+	/* Start sensing */
+	writel(0x8, &(imx_iim->fctl));
+	if (poll_fuse_op_done(POLL_FUSE_SNSD) != 0) {
+		printf("%s(bank: %d, row: %d, bit: %d failed\n",
+			__func__, bank, row, bit);
+	}
+
+	return readl(&imx_iim->sdat);
+}
+
+int iim_read(int bank, char row)
+{
+	u32 fuse_val;
+	s32 err = 0;
+
+	printf("Read fuse at bank:%d row:%d\n", bank, row);
+	fuse_val = sense_fuse(bank, row, 0);
+	printf("fuses at (bank:%d, row:%d) = 0x%x\n", bank, row, fuse_val);
+
+	return err;
+}
+
+/* Blow fuses based on the bank, row and bit positions (all 0-based)
+*/
+static s32 fuse_blow_bit(s32 bank, s32 row, s32 bit)
+{
+	int addr, addr_l, addr_h, ret = -1;
+
+	fuse_op_start();
+
+	/* Disable IIM Program Protect */
+	writel(0xaa, &(imx_iim->prg_p));
+
+	addr = ((bank << 11) | (row << 3) | (bit & 0x7));
+	/* Set IIM Program Upper Address */
+	addr_h = (addr >> 8) & 0x000000FF;
+	/* Set IIM Program Lower Address */
+	addr_l = (addr & 0x000000FF);
+
+#ifdef IIM_FUSE_DEBUG
+	printf("blowing addr_h=0x%x, addr_l=0x%x\n", addr_h, addr_l);
+#endif
+
+	writel(addr_h, &(imx_iim->ua));
+	writel(addr_l, &(imx_iim->la));
+
+	/* Start Programming */
+	writel(0x31, &(imx_iim->fctl));
+	if (poll_fuse_op_done(POLL_FUSE_PRGD) == 0)
+		ret = 0;
+
+	/* Enable IIM Program Protect */
+	writel(0x0, &(imx_iim->prg_p));
+
+	return ret;
+}
+
+static void fuse_blow_row(s32 bank, s32 row, s32 value)
+{
+	u32 reg, i;
+
+	/* enable fuse blown */
+	reg = readl(CCM_BASE_ADDR + 0x64);
+	reg |= 0x10;
+	writel(reg, CCM_BASE_ADDR + 0x64);
+
+	for (i = 0; i < 8; i++) {
+		if (((value >> i) & 0x1) == 0)
+			continue;
+	if (fuse_blow_bit(bank, row, i) != 0) {
+			printf("fuse_blow_bit(bank: %d, row: %d, "
+				"bit: %d failed\n",
+				bank, row, i);
+		}
+    }
+    reg &= ~0x10;
+    writel(reg, CCM_BASE_ADDR + 0x64);
+}
+
+int iim_blow(int bank, int row, int val)
+{
+	u32 fuse_val, err = 0;
+
+	printf("Blowing fuse at bank:%d row:%d value:%d\n",
+			bank, row, val);
+	fuse_blow_row(bank, row, val);
+	fuse_val = sense_fuse(bank, row, 0);
+	printf("fuses at (bank:%d, row:%d) = 0x%x\n", bank, row, fuse_val);
+
+	return err;
+}
+
+static int iim_read_mac_addr(u8 *data)
+{
+	s32 bank = CONFIG_IIM_MAC_BANK;
+	s32 row  = CONFIG_IIM_MAC_ROW;
+
+	data[0] = sense_fuse(bank, row, 0) ;
+	data[1] = sense_fuse(bank, row + 1, 0) ;
+	data[2] = sense_fuse(bank, row + 2, 0) ;
+	data[3] = sense_fuse(bank, row + 3, 0) ;
+	data[4] = sense_fuse(bank, row + 4, 0) ;
+	data[5] = sense_fuse(bank, row + 5, 0) ;
+
+	if (!memcmp(data, "\0\0\0\0\0\0", 6))
+		return 0;
+	else
+		return 1;
+}
+
+int iim_blow_func(char *func_name, char *func_val)
+{
+	u32 value, i;
+	char *s;
+	char val[3];
+	s32 err = 0;
+
+	if (0 == strcmp(func_name, "scc")) {
+		/* fuse_blow scc
+	C3D153EDFD2EA9982226EF5047D3B9A0B9C7138EA87C028401D28C2C2C0B9AA2 */
+		printf("Ready to burn SCC fuses\n");
+		s = func_val;
+		for (i = 0; ; ++i) {
+			memcpy(val, s, 2);
+			val[2] = '\0';
+			value = quick_atoi(val, 2);
+			/* printf("fuse_blow_row(2, %d, value=0x%x)\n",
+					i, value); */
+			fuse_blow_row(2, i, value);
+
+			if ((++s)[0] == '\0') {
+				printf("ERROR: Odd string input\n");
+				err = -1;
+				break;
+			}
+			if ((++s)[0] == '\0') {
+				printf("Successful\n");
+				break;
+			}
+		}
+	} else if (0 == strcmp(func_name, "srk")) {
+		/* fuse_blow srk
+	418bccd09b53bee1ab59e2662b3c7877bc0094caee201052add49be8780dff95 */
+		printf("Ready to burn SRK key fuses\n");
+		s = func_val;
+		for (i = 0; ; ++i) {
+			memcpy(val, s, 2);
+			val[2] = '\0';
+			value = quick_atoi(val, 2);
+			if (i == 0) {
+				/* 0x41 goes to SRK_HASH[255:248],
+				 * bank 1, row 1 */
+				fuse_blow_row(1, 1, value);
+			} else {
+				/* 0x8b in SRK_HASH[247:240] bank 3, row 1 */
+				/* 0xcc in SRK_HASH[239:232] bank 3, row 2 */
+				/* ... */
+				fuse_blow_row(3, i, value);
+
+				if ((++s)[0] == '\0') {
+					printf("ERROR: Odd string input\n");
+					err = -1;
+					break;
+				}
+				if ((++s)[0] == '\0') {
+					printf("Successful\n");
+					break;
+				}
+			}
+		}
+	} else if (0 == strcmp(func_name, "fecmac")) {
+		u8 ea[6] = { 0 };
+
+		if (NULL == func_val) {
+			/* Read the Mac address and print it */
+			iim_read_mac_addr(ea);
+
+			printf("FEC MAC address: ");
+			printf("0x%02x:0x%02x:0x%02x:0x%02x:0x%02x:0x%02x\n\n",
+				ea[0], ea[1], ea[2], ea[3], ea[4], ea[5]);
+
+			return 0;
+		}
+
+		eth_parse_enetaddr(func_val, ea);
+		if (!is_valid_ether_addr(ea)) {
+			printf("Error: invalid mac address parameter!\n");
+			err = -1;
+		} else {
+			for (i = 0; i < 6; ++i)
+				fuse_blow_row(1, i + 9, ea[i]);
+		}
+	} else {
+		printf("This command is not supported\n");
+	}
+
+	return err;
+}
+
+
-- 
1.7.2.5

