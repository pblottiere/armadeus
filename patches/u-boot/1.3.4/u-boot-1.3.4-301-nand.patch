--- ref/u-boot-1.3.4/common/cmd_nand.c	2008-08-12 16:08:38.000000000 +0200
+++ u-boot-1.3.4/common/cmd_nand.c	2009-01-12 14:15:21.000000000 +0100
@@ -80,6 +80,53 @@ static int nand_dump(nand_info_t *nand, 
 	return 0;
 }
 
+static int nand_biterr(nand_info_t *nand, ulong off, int value)
+{
+    int tempEcc, i, mask;
+	u_char *buf, *p;
+    struct nand_chip *nand_chip = nand->priv;
+ 
+	buf = malloc(nand->oobblock + nand->oobsize);
+
+	if (!buf) {
+		puts("No memory for page buffer\n");
+		return 1;
+	}
+
+	i = nand_read_raw(nand, buf, off, nand->oobblock, nand->oobsize);
+    if( nand->oobblock == 0x800 )
+        mask = 0x000007ff;
+    else
+        mask = 0x000001ff;
+
+    buf[off & mask] = (u_char)value; //modify buf  
+
+	i = nand->oobblock >> 4; p = buf;
+	while (i--) {
+		printf( "\t%02x %02x %02x %02x %02x %02x %02x %02x"
+			"  %02x %02x %02x %02x %02x %02x %02x %02x\n",
+			p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7],
+			p[8], p[9], p[10], p[11], p[12], p[13], p[14], p[15]);
+		p += 16;
+	}
+	puts("OOB:\n");
+	i = nand->oobsize >> 3;
+	while (i--) {
+		printf( "\t%02x %02x %02x %02x %02x %02x %02x %02x\n",
+			p[0], p[1], p[2], p[3], p[4], p[5], p[6], p[7]);
+		p += 8;
+	}
+    
+    tempEcc = nand_chip->eccmode;
+    nand_chip->eccmode = NAND_ECC_NONE; //swith to ECC_NONE
+	nand->write_ecc( nand, off & ~mask, nand->oobblock, &i, buf, NULL, NULL);
+    nand_chip->eccmode = tempEcc; //swith to old value      
+
+	free(buf);
+
+	return 0;
+}
+
 /* ------------------------------------------------------------------------- */
 
 static inline int str2long(char *p, ulong *num)
@@ -294,7 +341,6 @@ int do_nand(cmd_tbl_t * cmdtp, int flag,
 	if (strncmp(cmd, "dump", 4) == 0) {
 		if (argc < 3)
 			goto usage;
-
 		s = strchr(cmd, '.');
 		off = (int)simple_strtoul(argv[2], NULL, 16);
 
@@ -382,7 +428,18 @@ int do_nand(cmd_tbl_t * cmdtp, int flag,
 		return 1;
 	}
 	if (strcmp(cmd, "biterr") == 0) {
-		/* todo */
+		if (argc != 4)
+			goto usage;
+
+		off = (int)simple_strtoul(argv[2], NULL, 16);
+		i = (int)simple_strtoul(argv[3], NULL, 16);
+        
+
+        nand_biterr(nand, off, i);
+/*        tempEcc = nand_chip->eccmode;
+        nand_chip->eccmode = NAND_ECC_NONE; //swith to ECC_NONE
+        nand_write(nand, off, &size, (u_char *)addr);
+        nand_chip->eccmode = tempEcc; //swith to old value      */
 		return 1;
 	}
 
@@ -471,7 +528,7 @@ U_BOOT_CMD(nand, 5, 1, do_nand,
 	"nand dump[.oob] off - dump page\n"
 	"nand scrub - really clean NAND erasing bad blocks (UNSAFE)\n"
 	"nand markbad off - mark bad block at offset (UNSAFE)\n"
-	"nand biterr off - make a bit error at offset (UNSAFE)\n"
+	"nand biterr off value - make an error at offset. copy one page to flash without ECC (UNSAFE)\n"
 	"nand lock [tight] [status] - bring nand to lock state or display locked pages\n"
 	"nand unlock [offset] [size] - unlock section\n");
 
@@ -519,8 +576,8 @@ static int nand_load_image(cmd_tbl_t *cm
 		hdr = (image_header_t *)addr;
 
 		show_boot_progress (57);
-		image_print_contents (hdr);
-
+/*		image_print_contents (hdr);
+*/
 		cnt = image_get_image_size (hdr);
 		break;
 #if defined(CONFIG_FIT)
--- ref/u-boot-1.3.4/drivers/mtd/nand/nand_bbt.c	2008-08-12 16:08:38.000000000 +0200
+++ u-boot-1.3.4/drivers/mtd/nand/nand_bbt.c	2009-01-12 14:15:21.000000000 +0100
@@ -159,8 +159,8 @@ static int read_bbt (struct mtd_info *mt
 				}
 				/* Leave it for now, if its matured we can move this
 				 * message to MTD_DEBUG_LEVEL0 */
-				printk (KERN_DEBUG "nand_read_bbt: Bad block at 0x%08x\n",
-					((offs << 2) + (act >> 1)) << this->bbt_erase_shift);
+				/*printk (KERN_DEBUG "nand_read_bbt: Bad block at 0x%08x\n",
+					((offs << 2) + (act >> 1)) << this->bbt_erase_shift);*/
 				/* Factory marked bad or worn out ? */
 				if (tmp == 0)
 					this->bbt[offs + (act >> 3)] |= 0x3 << (act & 0x06);
@@ -375,7 +375,7 @@ static int search_bbt (struct mtd_info *
 		if (td->pages[i] == -1)
 			printk (KERN_WARNING "Bad block table not found for chip %d\n", i);
 		else
-			printk (KERN_DEBUG "Bad block table found at page %d, version 0x%02X\n", td->pages[i], td->version[i]);
+			MTDDEBUG (MTD_DEBUG_LEVEL1, "Bad block table found at page 0x%08X, version 0x%02X\n", td->pages[i], td->version[i]);
 	}
 	return 0;
 }
