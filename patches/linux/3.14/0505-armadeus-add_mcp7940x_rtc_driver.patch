Add mcp79400 Linux driver

Signed-off-by: Fabien Marteau <fabien.marteau@armadeus.com>

---
Index: linux-3.14/drivers/rtc/rtc-mcp7940x.c
===================================================================
--- /dev/null
+++ linux-3.14/drivers/rtc/rtc-mcp7940x.c
@@ -0,0 +1,492 @@
+/*
+ * RTC client/driver for the Microchip MCP7940x Real-Time Clock over I2C
+ *
+ * Based on code by Scott Wood <scottwood@freescale.com>
+ * which was based on code by Randy Vinson <rvinson@mvista.com>,
+ * which was based on the m41t00.c by Mark Greer <mgreer@mvista.com>.
+ *
+ * Copyright (C) 2014 Armadeus Systems
+ *
+ * This file is licensed under the terms of the GNU General Public License
+ * version 2. This program is licensed "as is" without any warranty of any
+ * kind, whether express or implied.
+ */
+/*
+ * It would be more efficient to use i2c msgs/i2c_transfer directly but, as
+ * recommened in .../Documentation/i2c/writing-clients section
+ * "Sending and receiving", using SMBus level communication is preferred.
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/interrupt.h>
+#include <linux/i2c.h>
+#include <linux/rtc.h>
+#include <linux/bcd.h>
+#include <linux/slab.h>
+
+/* Time of Day */
+#define MCP7940X_REG_TD_SECONDS		0x00
+#define MCP7940X_REG_TD_MINUTES		0x01
+#define MCP7940X_REG_TD_HOURS		0x02
+#define MCP7940X_REG_TD_DAY		0x03
+#define MCP7940X_REG_TD_DATE		0x04
+#define MCP7940X_REG_TD_MONTH		0x05
+#define MCP7940X_REG_TD_YEAR		0x06
+
+/* Controls */
+#define MCP7940X_REG_CONTROL		0x07
+#define MCP7940X_REG_CALIBRATION	0x08
+#define MCP7940X_REG_UNLOCK_ID		0x08
+
+/* Alarm 0 */
+#define MCP7940X_REG_ALRM0_SECONDS	0x0A
+#define MCP7940X_REG_ALRM0_MINUTES	0x0B
+#define MCP7940X_REG_ALRM0_HOURS	0x0C
+#define MCP7940X_REG_ALRM0_DAY		0x0D
+#define MCP7940X_REG_ALRM0_DATE		0x0E
+#define MCP7940X_REG_ALRM0_MONTH	0x0F
+
+/* Alarm 1 */
+#define MCP7940X_REG_ALRM1_SECONDS	0x11
+#define MCP7940X_REG_ALRM1_MINUTES	0x12
+#define MCP7940X_REG_ALRM1_HOURS	0x13
+#define MCP7940X_REG_ALRM1_DAY		0x14
+#define MCP7940X_REG_ALRM1_DATE		0x15
+#define MCP7940X_REG_ALRM1_MONTH	0x16
+
+/* Timestamp 0 */
+#define MCP7940X_REG_TS0_MINUTES	0x18
+#define MCP7940X_REG_TS0_HOURS		0x19
+#define MCP7940X_REG_TS0_DATE		0x1A
+#define MCP7940X_REG_TS0_MONTH		0x1B
+
+/* Timestamp 1 */
+#define MCP7940X_REG_TS1_MINUTES	0x1C
+#define MCP7940X_REG_TS1_HOURS		0x1D
+#define MCP7940X_REG_TS1_DATE		0x1E
+#define MCP7940X_REG_TS1_MONTH		0x1F
+
+/* bits definitions */
+#define MCP7940X_START_BITS	0x80
+#define MCP7940X_24H_BITS	0x40
+#define MCP7940X_VBATEN		0x08
+
+static const struct i2c_device_id mcp7940x_id[] = {
+	{ "mcp79400", 0 }, /* no unique ID */
+	{ "mcp79401", 1 }, /* EUI-48 */
+	{ "mcp79402", 2 }, /* EUI-64 */
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, mcp7940x_id);
+
+struct mcp7940x {
+	struct rtc_device *rtc;
+	struct i2c_client *client;
+	int exiting;
+	int irq;
+	unsigned int irqen;
+	int alrm_sec;
+	int alrm_min;
+	int alrm_hour;
+	int alrm_mday;
+	spinlock_t lock;
+};
+
+static struct i2c_driver mcp7940x_driver;
+
+#if 0
+static void mcp7940x_reg_dump(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+
+	printk(" MCP7940X_REG_TD_SECONDS	(0x%02X) -> 0x%02X\n", MCP7940X_REG_TD_SECONDS	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TD_SECONDS));
+	printk(" MCP7940X_REG_TD_MINUTES	(0x%02X) -> 0x%02X\n", MCP7940X_REG_TD_MINUTES	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TD_MINUTES));
+	printk(" MCP7940X_REG_TD_HOURS		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TD_HOURS	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TD_HOURS));
+	printk(" MCP7940X_REG_TD_DAY		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TD_DAY	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TD_DAY));
+	printk(" MCP7940X_REG_TD_DATE		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TD_DATE	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TD_DATE));
+	printk(" MCP7940X_REG_TD_MONTH		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TD_MONTH	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TD_MONTH));
+	printk(" MCP7940X_REG_TD_YEAR		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TD_YEAR	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TD_YEAR));
+	printk(" MCP7940X_REG_CONTROL		(0x%02X) -> 0x%02X\n", MCP7940X_REG_CONTROL	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_CONTROL));
+	printk(" MCP7940X_REG_CALIBRATION	(0x%02X) -> 0x%02X\n", MCP7940X_REG_CALIBRATION	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_CALIBRATION));
+	printk(" MCP7940X_REG_UNLOCK_ID		(0x%02X) -> 0x%02X\n", MCP7940X_REG_UNLOCK_ID	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_UNLOCK_ID));
+	printk(" MCP7940X_REG_ALRM0_SECONDS	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM0_SECONDS,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM0_SECONDS));
+	printk(" MCP7940X_REG_ALRM0_MINUTES	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM0_MINUTES,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM0_MINUTES));
+	printk(" MCP7940X_REG_ALRM0_HOURS	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM0_HOURS	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM0_HOURS));
+	printk(" MCP7940X_REG_ALRM0_DAY		(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM0_DAY	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM0_DAY));
+	printk(" MCP7940X_REG_ALRM0_DATE	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM0_DATE	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM0_DATE));
+	printk(" MCP7940X_REG_ALRM0_MONTH	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM0_MONTH	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM0_MONTH));
+	printk(" MCP7940X_REG_ALRM1_SECONDS	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM1_SECONDS,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM1_SECONDS));
+	printk(" MCP7940X_REG_ALRM1_MINUTES	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM1_MINUTES,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM1_MINUTES));
+	printk(" MCP7940X_REG_ALRM1_HOURS	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM1_HOURS	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM1_HOURS));
+	printk(" MCP7940X_REG_ALRM1_DAY		(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM1_DAY	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM1_DAY));
+	printk(" MCP7940X_REG_ALRM1_DATE	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM1_DATE	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM1_DATE));
+	printk(" MCP7940X_REG_ALRM1_MONTH	(0x%02X) -> 0x%02X\n", MCP7940X_REG_ALRM1_MONTH	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_ALRM1_MONTH));
+	printk(" MCP7940X_REG_TS0_MINUTES	(0x%02X) -> 0x%02X\n", MCP7940X_REG_TS0_MINUTES	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TS0_MINUTES));
+	printk(" MCP7940X_REG_TS0_HOURS		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TS0_HOURS	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TS0_HOURS));
+	printk(" MCP7940X_REG_TS0_DATE		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TS0_DATE	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TS0_DATE));
+	printk(" MCP7940X_REG_TS0_MONTH		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TS0_MONTH	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TS0_MONTH));
+	printk(" MCP7940X_REG_TS1_MINUTES	(0x%02X) -> 0x%02X\n", MCP7940X_REG_TS1_MINUTES	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TS1_MINUTES));
+	printk(" MCP7940X_REG_TS1_HOURS		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TS1_HOURS	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TS1_HOURS));
+	printk(" MCP7940X_REG_TS1_DATE		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TS1_DATE	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TS1_DATE));
+	printk(" MCP7940X_REG_TS1_MONTH		(0x%02X) -> 0x%02X\n", MCP7940X_REG_TS1_MONTH	 ,i2c_smbus_read_byte_data(client,MCP7940X_REG_TS1_MONTH));
+}
+#endif
+
+static int mcp7940x_read_time(struct device *dev, struct rtc_time *time)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	int ret;
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_TD_SECONDS);
+	if (ret < 0)
+		return ret;
+	time->tm_sec = ((ret&0x70)>>4)*10 + (ret&0x0F);
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_TD_MINUTES);
+	if (ret < 0)
+		return ret;
+	time->tm_min = ((ret&0x70)>>4)*10 + (ret&0x0F);
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_TD_HOURS);
+	if (ret < 0)
+		return ret;
+	time->tm_hour = ((ret&0x30)>>4)*10 + (ret&0x0F);
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_TD_DATE);
+	if (ret < 0)
+		return ret;
+	time->tm_mday = ((ret&0x30)>>4)*10 + (ret&0x0F);
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_TD_MONTH);
+	if (ret < 0)
+		return ret;
+	time->tm_mon = (((ret&0x10)>>4)*10 + (ret&0x0F)) - 1;
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_TD_YEAR);
+	if (ret < 0)
+		return ret;
+	time->tm_year = ((((ret&0xF0)>>4)*10 + (ret&0x0F))) + 100;
+
+	return 0;
+}
+
+static int mcp7940x_set_time(struct device *dev, struct rtc_time *time)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	int ret;
+	int value;
+	int day;
+
+	value = ((((time->tm_sec/10)&0x07)<<4)|(time->tm_sec % 10))|
+		MCP7940X_START_BITS;
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_TD_SECONDS,
+					value);
+	if (ret < 0)
+		return ret;
+
+	value = (((time->tm_min/10)&0x07)<<4)|(time->tm_min % 10);
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_TD_MINUTES,
+					value);
+	if (ret < 0)
+		return ret;
+
+	value = ((((time->tm_hour/10)&0x03)<<4)|(time->tm_hour % 10));
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_TD_HOURS,
+					value);
+	if (ret < 0)
+		return ret;
+
+	value = (((time->tm_mday/10)&0x03)<<4)|(time->tm_mday % 10);
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_TD_DATE,
+					value);
+	if (ret < 0)
+		return ret;
+
+	/*****/
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_TD_DAY);
+	if (ret < 0)
+		return ret;
+	day = (time->tm_wday == 0)?7:time->tm_wday;
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_TD_DAY,
+					(ret&0xF8)|day);
+	if (ret < 0)
+		return ret;
+	/*****/
+
+	value = ((((time->tm_mon+1)/10)&0x01)<<4)|((time->tm_mon+1) % 10);
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_TD_MONTH,
+					value);
+	if (ret < 0)
+		return ret;
+
+	value = ((((time->tm_year-100)/10)&0x0F)<<4)|((time->tm_year-100) % 10);
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_TD_YEAR,
+					value);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+//struct rtc_wkalrm {
+//        unsigned char enabled;  /* 0 = alarm disabled, 1 = alarm enabled */
+//        unsigned char pending;  /* 0 = alarm not pending, 1 = alarm pending */
+//        struct rtc_time time;   /* time the alarm is set to */
+//};
+
+static int mcp79400_read_alarm(struct device *dev, struct rtc_wkalrm *wkalrm) {
+	struct i2c_client *client = to_i2c_client(dev);
+	struct rtc_time *time = &wkalrm->time;
+	int ret;
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_ALRM0_SECONDS);
+	if (ret < 0)
+		return ret;
+	time->tm_sec = ((ret&0x70)>>4)*10 + (ret&0x0F);
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_ALRM0_MINUTES);
+	if (ret < 0)
+		return ret;
+	time->tm_min = ((ret&0x70)>>4)*10 + (ret&0x0F);
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_ALRM0_HOURS);
+	if (ret < 0)
+		return ret;
+	time->tm_hour = ((ret&0x30)>>4)*10 + (ret&0x0F);
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_ALRM0_DATE);
+	if (ret < 0)
+		return ret;
+	time->tm_mday = ((ret&0x30)>>4)*10 + (ret&0x0F);
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_ALRM0_MONTH);
+	if (ret < 0)
+		return ret;
+	time->tm_mon = (((ret&0x10)>>4)*10 + (ret&0x0F)) - 1;
+
+	time->tm_year = -1;
+	time->tm_wday = -1;
+	time->tm_yday = -1;
+	time->tm_isdst= -1;
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_CONTROL);
+	if (ret < 0)
+		return ret;
+	wkalrm->enabled	= ((ret&0x10)>>4);
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_ALRM0_DAY);
+	if (ret < 0)
+		return ret;
+	wkalrm->pending	= ((ret&0x08)>>3);
+
+	return 0;
+}
+
+static int mcp79400_set_alarm(struct device *dev, struct rtc_wkalrm *wkalrm) {
+	struct i2c_client *client = to_i2c_client(dev);
+	struct rtc_time *time = &wkalrm->time;
+	int ret;
+	int value;
+	int day;
+
+	/* clear pending alarm */
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_ALRM0_DAY);
+	if (ret < 0)
+		return ret;
+	day = (time->tm_wday == 0)?7:time->tm_wday;
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_ALRM0_DAY,
+					((ret|0x70)&0x70)|day);
+	if (ret < 0)
+		return ret;
+
+	value = ((((time->tm_sec/10)&0x07)<<4)|(time->tm_sec % 10))|
+							MCP7940X_START_BITS;
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_ALRM0_SECONDS,
+					value);
+	if (ret < 0)
+		return ret;
+
+	value = (((time->tm_min/10)&0x07)<<4)|(time->tm_min % 10);
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_ALRM0_MINUTES,
+					value);
+	if (ret < 0)
+		return ret;
+
+	value = ((((time->tm_hour/10)&0x03)<<4)|(time->tm_hour % 10));
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_ALRM0_HOURS,
+					value);
+	if (ret < 0)
+		return ret;
+
+	value = (((time->tm_mday/10)&0x03)<<4)|(time->tm_mday % 10);
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_ALRM0_DATE,
+					value);
+	if (ret < 0)
+		return ret;
+
+	value = ((((time->tm_mon+1)/10)&0x01)<<4)|((time->tm_mon+1) % 10);
+	ret = i2c_smbus_write_byte_data(client,
+					MCP7940X_REG_ALRM0_MONTH,
+					value);
+	if (ret < 0)
+		return ret;
+
+	ret = i2c_smbus_read_byte_data(client, MCP7940X_REG_CONTROL);
+	if (ret < 0)
+		return ret;
+	if (wkalrm->enabled) {
+		ret = i2c_smbus_write_byte_data(client,
+						MCP7940X_REG_CONTROL,
+						ret | 0x10);
+	} else {
+		ret = i2c_smbus_write_byte_data(client,
+						MCP7940X_REG_CONTROL,
+						ret & ~(0x10));
+	}
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+/* TODO: see rtc-ds1511.c */
+static int mcp79400_alarm_irq_enable(struct device *dev, unsigned int enabled)
+{
+	return 0;
+}
+
+static const struct rtc_class_ops mcp7940x_rtc_ops = {
+	.read_time = mcp7940x_read_time,
+	.set_time = mcp7940x_set_time,
+	.read_alarm = mcp79400_read_alarm, /* Use ALARM0 only */
+	.set_alarm = mcp79400_set_alarm,
+	.alarm_irq_enable = mcp79400_alarm_irq_enable,
+};
+
+static const struct of_device_id mcp7940x_rtc_dt_match[] = {
+	{ .compatible = "microchip,mcp7940x-rtc", },
+	{ /* sentinel */ }
+};
+MODULE_DEVICE_TABLE(of, mcp7940x_rtc_dt_match);
+
+static int mcp7940x_probe(struct i2c_client *client,
+			const struct i2c_device_id *id)
+{
+	struct mcp7940x *mcp7940x;
+	int ret;
+
+	mcp7940x = devm_kzalloc(&client->dev, sizeof(struct mcp7940x),
+				GFP_KERNEL);
+	if (!mcp7940x)
+		return -ENOMEM;
+
+	mcp7940x->client = client;
+	i2c_set_clientdata(client, mcp7940x);
+
+	ret = i2c_smbus_read_byte_data(mcp7940x->client, MCP7940X_REG_TD_HOURS);
+	if (ret < 0)
+		return -EIO;
+
+	/* set rtc to 24h format */
+	if ((ret & MCP7940X_24H_BITS)) {
+		ret = i2c_smbus_write_byte_data(mcp7940x->client,
+						MCP7940X_REG_TD_HOURS,
+						(u8)(ret & ~MCP7940X_24H_BITS));
+		if(ret < 0)
+			return -EIO;
+	}
+
+	ret = i2c_smbus_read_byte_data(mcp7940x->client, MCP7940X_REG_TD_DAY);
+	if (ret < 0)
+		return -EIO;
+
+	/* Use external baterie if Vcc fails */
+	if (!(ret & MCP7940X_VBATEN)) {
+		ret = i2c_smbus_write_byte_data(mcp7940x->client,
+						MCP7940X_REG_TD_DAY,
+						(u8)(ret | MCP7940X_VBATEN));
+		if(ret < 0)
+			return -EIO;
+	}
+
+	ret = i2c_smbus_read_byte_data(mcp7940x->client, MCP7940X_REG_TD_SECONDS);
+	if (ret < 0)
+		return -EIO;
+
+	/* If time counter not launched, launch it */
+	if (!(ret & MCP7940X_START_BITS)) {
+		ret = i2c_smbus_write_byte_data(mcp7940x->client,
+						MCP7940X_REG_TD_SECONDS,
+						(u8)(ret | MCP7940X_START_BITS));
+		if(ret < 0)
+			return -EIO;
+	}
+
+	device_set_wakeup_capable(&client->dev, 1);
+
+	mcp7940x->rtc = devm_rtc_device_register(&client->dev, client->name,
+						&mcp7940x_rtc_ops, THIS_MODULE);
+	if (IS_ERR(mcp7940x->rtc)) {
+		dev_err(&client->dev, "unable to register the class device\n");
+		return PTR_ERR(mcp7940x->rtc);
+	}
+
+	mcp7940x->rtc->uie_unsupported = 1;
+
+	return 0;
+}
+
+static int mcp7940x_remove(struct i2c_client *client)
+{
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int mcp7940x_suspend(struct device *dev)
+{
+	return 0;
+}
+
+static int mcp7940x_resume(struct device *dev)
+{
+	return 0;
+}
+
+static const struct dev_pm_ops mcp7940x_pm_ops = {
+	.suspend        = mcp7940x_suspend,
+	.resume         = mcp7940x_resume,
+};
+#endif
+
+static struct i2c_driver mcp7940x_driver = {
+	.driver = {
+		.name	= "rtc-mcp7940x",
+		.owner	= THIS_MODULE,
+#ifdef CONFIG_PM
+		.pm	= &mcp7940x_pm_ops,
+#endif
+		.of_match_table = mcp7940x_rtc_dt_match,
+	},
+	.probe = mcp7940x_probe,
+	.remove = mcp7940x_remove,
+	.id_table = mcp7940x_id,
+};
+
+module_i2c_driver(mcp7940x_driver)
+
+MODULE_AUTHOR("Fabien Marteau <fabien.marteau@armadeus.com>");
+MODULE_DESCRIPTION("Microchip mcp7940x RTC Driver");
+MODULE_LICENSE("GPL");
Index: linux-3.14/drivers/rtc/Kconfig
===================================================================
--- linux-3.14.orig/drivers/rtc/Kconfig
+++ linux-3.14/drivers/rtc/Kconfig
@@ -539,6 +539,16 @@ config RTC_DRV_S5M
	  This driver can also be built as a module. If so, the module
	  will be called rtc-s5m.

+config RTC_DRV_MCP7940X
+	tristate "Microchip MCP7940X"
+	help
+	  If you say yes here you get support for Microchip
+	  MCP7940x real-time clock chips.
+	  The alarm functionality is not supported.
+
+	  This driver can also be built as a module. If so, the module
+	  will be called rtc-mcp7940x.
+
 endif # I2C

 comment "SPI RTC drivers"
Index: linux-3.14/drivers/rtc/Makefile
===================================================================
--- linux-3.14.orig/drivers/rtc/Makefile
+++ linux-3.14/drivers/rtc/Makefile
@@ -70,6 +70,7 @@ obj-$(CONFIG_RTC_DRV_M41T94)	+= rtc-m41t
 obj-$(CONFIG_RTC_DRV_M48T35)	+= rtc-m48t35.o
 obj-$(CONFIG_RTC_DRV_M48T59)	+= rtc-m48t59.o
 obj-$(CONFIG_RTC_DRV_M48T86)	+= rtc-m48t86.o
+obj-$(CONFIG_RTC_DRV_MCP7940X)  += rtc-mcp7940x.o
 obj-$(CONFIG_RTC_DRV_MXC)	+= rtc-mxc.o
 obj-$(CONFIG_RTC_DRV_MAX6900)	+= rtc-max6900.o
 obj-$(CONFIG_RTC_DRV_MAX8907)	+= rtc-max8907.o
