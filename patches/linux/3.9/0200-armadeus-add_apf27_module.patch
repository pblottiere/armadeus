The APF27 is an i.M27 based SOM (System On Module) that can be plugged on
several docking/development boards. Here only basic module support
is added (Ethernet, Serial, NAND Flash, USB OTG).

Signed-off-by: Julien Boibessot <julien.boibessot@armadeus.com>
Signed-off-by: Eric Jarrige <eric.jarrige@armadeus.org>
Signed-off-by: Nicolas Colombain <nicolas.colombain@armadeus.com>
---
 arch/arm/mach-imx/Kconfig                   |   13 ++
 arch/arm/mach-imx/Makefile                  |    1 +
 arch/arm/mach-imx/mach-apf27.c              |  258 +++++++++++++++++++++++++++
 arch/arm/plat-mxc/include/mach/uncompress.h |    1 +
 4 files changed, 273 insertions(+), 0 deletions(-)
 create mode 100644 arch/arm/mach-imx/mach-apf27.c

Index: linux-3.8-rc1/arch/arm/mach-imx/Kconfig
===================================================================
--- linux-3.8-rc1.orig/arch/arm/mach-imx/Kconfig	2013-01-02 10:07:38.000000000 +0100
+++ linux-3.8-rc1/arch/arm/mach-imx/Kconfig	2013-01-02 10:07:44.000000000 +0100
@@ -500,6 +500,21 @@
 	  Include support for Freescale i.MX27 based platforms
 	  using the device tree for discovery
 
+config MACH_APF27
+	bool "Armadeus Systems APF27"
+	select SOC_IMX27
+	select IMX_HAVE_PLATFORM_FSL_USB2_UDC
+	select IMX_HAVE_PLATFORM_MXC_EHCI
+	select IMX_HAVE_PLATFORM_IMX2_WDT
+	select IMX_HAVE_PLATFORM_IMX_I2C
+	select IMX_HAVE_PLATFORM_IMX_UART
+	select IMX_HAVE_PLATFORM_MXC_NAND
+	select IMX_HAVE_PLATFORM_IMX_FB
+	select MXC_ULPI if USB_ULPI
+	help
+	  Include support for APF27 platform. This includes specific
+	  configurations for the module and its peripherals.
+
 endif
 
 if ARCH_MULTI_V6
Index: linux-3.8-rc1/arch/arm/mach-imx/Makefile
===================================================================
--- linux-3.8-rc1.orig/arch/arm/mach-imx/Makefile	2013-01-02 10:07:38.000000000 +0100
+++ linux-3.8-rc1/arch/arm/mach-imx/Makefile	2013-01-02 10:07:44.000000000 +0100
@@ -66,6 +66,7 @@
 obj-$(CONFIG_MACH_MXT_TD60) += mach-mxt_td60.o
 obj-$(CONFIG_MACH_IMX27IPCAM) += mach-imx27ipcam.o
 obj-$(CONFIG_MACH_IMX27_DT) += imx27-dt.o
+obj-$(CONFIG_MACH_APF27) += mach-apf27.o
 
 # i.MX31 based machines
 obj-$(CONFIG_MACH_MX31ADS) += mach-mx31ads.o
Index: linux-3.8-rc1/arch/arm/mach-imx/mach-apf27.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-3.8-rc1/arch/arm/mach-imx/mach-apf27.c	2013-01-02 10:08:00.000000000 +0100
@@ -0,0 +1,294 @@
+ /*
+ * Support for the APF27 System On Module
+ *
+ * Copyright (C) 2008-2012 Armadeus Systems <support@armadeus.com>
+ *
+ * Based on code which is:
+ * Copyright 2007 Robert Schwebel <r.schwebel@pengutronix.de>, Pengutronix
+ * Copyright (C) 2008 Juergen Beisert (kernel@pengutronix.de)
+ * Copyright 2009 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
+ * MA  02110-1301, USA.
+ */
+
+#include <linux/platform_device.h>
+#include <linux/i2c.h>
+#include <linux/serial.h>
+#include <linux/delay.h>
+#include <linux/clk.h>
+#include <linux/usb/otg.h>
+#include <linux/usb/ulpi.h>
+#include <linux/phy.h>
+
+#include <asm/mach/flash.h>
+#include <asm/mach/arch.h>
+#include <asm/mach-types.h>
+#include <asm/mach/time.h>
+
+#include "hardware.h"
+#include "common.h"
+#include "devices-imx27.h"
+#include "iomux-mx27.h"
+#include "ulpi.h"
+
+
+static const int apf27_pins[] __initconst = {
+	/* UART1 */
+	PE12_PF_UART1_TXD,
+	PE13_PF_UART1_RXD,
+	/* USB_OTG */
+	PE0_PF_USBOTG_NXT,
+	PE1_PF_USBOTG_STP,
+	PE2_PF_USBOTG_DIR,
+	PE24_PF_USBOTG_CLK,
+	PE25_PF_USBOTG_DATA7,
+	PC7_PF_USBOTG_DATA5,
+	PC8_PF_USBOTG_DATA6,
+	PC9_PF_USBOTG_DATA0,
+	PC10_PF_USBOTG_DATA2,
+	PC11_PF_USBOTG_DATA1,
+	PC12_PF_USBOTG_DATA4,
+	PC13_PF_USBOTG_DATA3,
+	/* UART3 */
+	PE8_PF_UART3_TXD,
+	PE9_PF_UART3_RXD,
+	PE10_PF_UART3_CTS,
+	PE11_PF_UART3_RTS,
+	/* ETHERNET */
+	PD0_AIN_FEC_TXD0,
+	PD1_AIN_FEC_TXD1,
+	PD2_AIN_FEC_TXD2,
+	PD3_AIN_FEC_TXD3,
+	PD4_AOUT_FEC_RX_ER,
+	PD5_AOUT_FEC_RXD1,
+	PD6_AOUT_FEC_RXD2,
+	PD7_AOUT_FEC_RXD3,
+	PD8_AF_FEC_MDIO,
+	PD9_AIN_FEC_MDC,
+	PD10_AOUT_FEC_CRS,
+	PD11_AOUT_FEC_TX_CLK,
+	PD12_AOUT_FEC_RXD0,
+	PD13_AOUT_FEC_RX_DV,
+	PD14_AOUT_FEC_RX_CLK,
+	PD15_AOUT_FEC_COL,
+	PD16_AIN_FEC_TX_ER,
+	PF23_AIN_FEC_TX_EN,
+	/* I2C2 */
+	PC5_PF_I2C2_SDA,
+	PC6_PF_I2C2_SCL,
+};
+
+/* APF27 has an "on module" Ethernet transceiver */
+int lan8700_wakeup(struct phy_device *phydev)
+{
+#define LAN87xx_SPECIAL_REG 0x12
+
+	int rc = phy_read(phydev, LAN87xx_SPECIAL_REG);
+
+	phy_write(phydev, LAN87xx_SPECIAL_REG, rc | 0xE0);
+	phy_write(phydev, MII_BMCR, BMCR_RESET);
+	udelay(1000);
+	return 0;
+}
+
+/* APF27 has a Micron 128MiB 1,8V NAND flash, 16 bits width */
+/* Need of partitions table until U-Boot is synchro with mainline Linux ?? */
+static struct mtd_partition apf27_nand_partitions[] = {
+	{
+		.name		= "u-boot",
+		.offset		= 0x0,
+		.size		= 1024*1024,
+	}, {
+		.name		= "env",
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= 512*1024,
+	}, {
+		.name		= "env2",
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= 512*1024,
+	}, {
+		.name		= "firmware",
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= 512*1024,
+	}, {
+		.name		= "dtb",
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= 512*1024,
+	}, {
+		.name		= "kernel",
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= 5*1024*1024,
+	}, {
+		.name		= "rootfs",
+		.offset		= MTDPART_OFS_APPEND,
+		.size		= MTDPART_SIZ_FULL,
+	},
+};
+
+static const struct mxc_nand_platform_data apf27_nand_board_info __initconst = {
+	.width = 2,
+	.hw_ecc = 1,
+	.flash_bbt = 1, /* we handle Bad Block Table */
+	.parts = apf27_nand_partitions,
+	.nr_parts = ARRAY_SIZE(apf27_nand_partitions),
+};
+
+/* APF27 has an I2C EEPROM on I2C2 Bus */
+static const struct imxi2c_platform_data apf27_i2c_1_data __initconst = {
+	.bitrate = 100000,
+};
+
+static struct i2c_board_info apf27_i2c_devices_bus1[] = {
+	{
+		I2C_BOARD_INFO("24c02", 0x50),
+	},
+};
+
+/* APF27 has an RS232 debug port/console on UART1 with "on module"
+   transceiver */
+static struct imxuart_platform_data uart0_pdata = {
+	.flags = 0,
+};
+
+/* APF27 has an "on module" transceiver for UART3 */
+static struct imxuart_platform_data uart2_pdata = {
+	.flags = IMXUART_HAVE_RTSCTS,
+};
+
+/* APF27 has an "on module" transceiver for USB OTG */
+static int otg_mode_host = 1;
+
+static int __init apf27_otg_mode(char *options)
+{
+	if (!strcmp(options, "host"))
+		otg_mode_host = 1;
+	else if (!strcmp(options, "device"))
+		otg_mode_host = 0;
+	else
+		pr_info("otg_mode neither \"host\" nor \"device\". "
+			"Defaulting to host\n");
+
+	return 0;
+}
+__setup("otg_mode=", apf27_otg_mode);
+
+static void apf27_usbotg_phy_init(void)
+{
+#define USBCTRL_OFFSET		0x600
+#define USBCTRL_UIE_BIT		(1 << 28)
+#define USBCTRL_WIE_BIT		(1 << 27)
+#define USBCMD_OFFSET		0x140
+#define USBCMD_RST_BIT		(1 << 1)
+#define PORTSC1_OFFSET		0x184
+#define PORTSC_PTS_MASK		(3 << 30)
+#define PORTSC_PTS_ULPI		(2 << 30)
+
+	unsigned int reg;
+
+	/* Tweak power/wake up handling */
+	reg = readl(MX27_IO_ADDRESS(MX27_USB_BASE_ADDR + USBCTRL_OFFSET));
+	reg |= USBCTRL_WIE_BIT | USBCTRL_UIE_BIT;
+	writel(reg, MX27_IO_ADDRESS(MX27_USB_BASE_ADDR + USBCTRL_OFFSET));
+
+	/* Select ULPI PHY */
+	reg = readl(MX27_IO_ADDRESS(MX27_USB_BASE_ADDR + PORTSC1_OFFSET));
+	reg = (reg & ~PORTSC_PTS_MASK) | PORTSC_PTS_ULPI;
+	printk("---%s %d\n", __func__, __LINE__);
+	writel(reg, MX27_IO_ADDRESS(MX27_USB_BASE_ADDR + PORTSC1_OFFSET));
+	mdelay(10);
+
+	printk("---%s %d\n", __func__, __LINE__);
+	/* Reset PHY */
+	reg = readl(MX27_IO_ADDRESS(MX27_USB_BASE_ADDR + USBCMD_OFFSET));
+	reg |= USBCMD_RST_BIT;
+	writel(reg, MX27_IO_ADDRESS(MX27_USB_BASE_ADDR + USBCMD_OFFSET));
+	mdelay(10);
+}
+
+static int apf27_otg_init(struct platform_device *pdev)
+{
+	int ret;
+
+	ret = mx27_initialize_usb_hw(pdev->id, MXC_EHCI_INTERFACE_DIFF_UNI);
+	apf27_usbotg_phy_init(); /* PHY is in powerdown mode by default */
+
+	return ret;
+}
+
+static struct mxc_usbh_platform_data otg_pdata __initdata = {
+	.init	= apf27_otg_init,
+	.portsc = MXC_EHCI_MODE_ULPI,
+};
+
+static const struct fsl_usb2_platform_data otg_device_pdata __initconst = {
+	.operating_mode = FSL_USB2_DR_DEVICE,
+	.phy_mode	= FSL_USB2_PHY_ULPI,
+};
+
+static void __init apf27_init(void)
+{
+	int ret;
+
+	imx27_soc_init();
+	ret = mxc_gpio_setup_multiple_pins(apf27_pins,
+			ARRAY_SIZE(apf27_pins), "APF27");
+	if (ret)
+		printk(KERN_ERR "apf27: Failed to setup pins (%d)\n", ret);
+
+	imx27_add_imx_uart0(&uart0_pdata);
+	imx27_add_imx_uart2(&uart2_pdata);
+
+	/* bring lan8700 out of power down mode */
+	phy_register_fixup_for_id("imx27-fec-1:1f", lan8700_wakeup);
+	imx27_add_fec(NULL);
+
+	imx27_add_mxc_nand(&apf27_nand_board_info);
+
+	imx27_add_imx2_wdt();
+
+	if (otg_mode_host) {
+		otg_pdata.otg = imx_otg_ulpi_create(ULPI_OTG_DRVVBUS |
+				ULPI_OTG_DRVVBUS_EXT);
+		if (otg_pdata.otg)
+			imx27_add_mxc_ehci_otg(&otg_pdata);
+	}
+	if (!otg_mode_host)
+		imx27_add_fsl_usb2_udc(&otg_device_pdata);
+
+	i2c_register_board_info(1, apf27_i2c_devices_bus1,
+				ARRAY_SIZE(apf27_i2c_devices_bus1));
+	imx27_add_imx_i2c(1, &apf27_i2c_1_data);
+}
+
+static void __init apf27_timer_init(void)
+{
+	mx27_clocks_init(26000000); /* init ext ref, even if not used */
+}
+
+static struct sys_timer apf27_timer = {
+	.init = apf27_timer_init,
+};
+
+MACHINE_START(APF27, "Armadeus APF27")
+	/* Maintainer: Julien Boibessot <julien.boibessot@armadeus.com> */
+	.atag_offset = 0x100,
+	.map_io = mx27_map_io,
+	.init_early = imx27_init_early,
+	.init_irq = mx27_init_irq,
+	.handle_irq = imx27_handle_irq,
+	.timer = &apf27_timer,
+	.init_machine = apf27_init,
+	.restart = mxc_restart,
+MACHINE_END
Index: linux-3.8-rc1/arch/arm/tools/mach-types
===================================================================
--- linux-3.8-rc1.orig/arch/arm/tools/mach-types	2013-01-02 10:07:38.000000000 +0100
+++ linux-3.8-rc1/arch/arm/tools/mach-types	2013-01-02 10:07:44.000000000 +0100
@@ -297,6 +297,7 @@
 wbd111			MACH_WBD111		WBD111			1690
 mv2120			MACH_MV2120		MV2120			1693
 mx51_3ds		MACH_MX51_3DS		MX51_3DS		1696
+apf27			MACH_APF27		APF27			1698
 imx27lite		MACH_IMX27LITE		IMX27LITE		1701
 usb_a9260		MACH_USB_A9260		USB_A9260		1709
 usb_a9263		MACH_USB_A9263		USB_A9263		1710
