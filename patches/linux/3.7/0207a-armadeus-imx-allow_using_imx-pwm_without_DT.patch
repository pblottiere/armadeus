pwm-imx driver is only working with device tree. This patch adds support for
platforms without device tree.

Signed-off-by: Gwenhael Goavec-Merou <gwenhael.goavec-merou@armadeus.com>
---

Index: linux-3.7.6/arch/arm/plat-mxc/include/mach/devices-common.h
===================================================================
--- linux-3.7.6.orig/arch/arm/plat-mxc/include/mach/devices-common.h
+++ linux-3.7.6/arch/arm/plat-mxc/include/mach/devices-common.h
@@ -281,6 +281,7 @@ struct platform_device *__init imx_add_p
 
 struct imx_mxc_pwm_data {
 	int id;
+	const char *devid;
 	resource_size_t iobase;
 	resource_size_t iosize;
 	resource_size_t irq;
Index: linux-3.7.6/drivers/pwm/pwm-imx.c
===================================================================
--- linux-3.7.6.orig/drivers/pwm/pwm-imx.c
+++ linux-3.7.6/drivers/pwm/pwm-imx.c
@@ -231,6 +231,19 @@ static const struct of_device_id imx_pwm
 };
 MODULE_DEVICE_TABLE(of, imx_pwm_dt_ids);
 
+static struct platform_device_id imx_pwm_devtype[] = {
+	{
+		.name = "imx1-pwm",
+		.driver_data = &imx_pwm_data_v1,
+	}, {
+		.name = "imx27-pwm",
+		.driver_data = &imx_pwm_data_v2,
+	}, {
+		/* sentinel */
+	}
+};
+MODULE_DEVICE_TABLE(platform, imx_pwm_devtype);
+
 static int __devinit imx_pwm_probe(struct platform_device *pdev)
 {
 	const struct of_device_id *of_id =
@@ -240,8 +253,6 @@ static int __devinit imx_pwm_probe(struc
 	struct resource *r;
 	int ret = 0;
 
-	if (!of_id)
-		return -ENODEV;
 
 	imx = devm_kzalloc(&pdev->dev, sizeof(*imx), GFP_KERNEL);
 	if (imx == NULL) {
@@ -278,7 +289,11 @@ static int __devinit imx_pwm_probe(struc
 	if (imx->mmio_base == NULL)
 		return -EADDRNOTAVAIL;
 
-	data = of_id->data;
+	if (of_id)
+		data = of_id->data;
+	else
+		data = pdev->id_entry->driver_data;
+
 	imx->config = data->config;
 	imx->set_enable = data->set_enable;
 
@@ -308,6 +323,7 @@ static struct platform_driver imx_pwm_dr
 	},
 	.probe		= imx_pwm_probe,
 	.remove		= __devexit_p(imx_pwm_remove),
+	.id_table	= imx_pwm_devtype,
 };
 
 module_platform_driver(imx_pwm_driver);
