Index: linux-2.6.38-rc3/arch/arm/mach-imx/apf9328.c
===================================================================
--- /dev/null
+++ linux-2.6.38-rc3/arch/arm/mach-imx/apf9328.c
@@ -0,0 +1,584 @@
+/*
+ * linux/arch/arm/mach-imx/apf9328.c
+ *
+ * Copyright (c) 2005-2011 Armadeus systems
+ * This work is based on scb9328.c from Sascha Hauer
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include <asm/mach/arch.h>
+#include <asm/mach/time.h>
+#include <mach/common.h>
+#include <linux/device.h>
+#include <linux/platform_device.h>
+#include <linux/mtd/physmap.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/serial_8250.h>
+#include <linux/serial.h>
+#include <linux/spi/spi.h>
+
+#include <asm/system.h>
+#include <mach/hardware.h>
+#include <linux/irq.h>
+#include <asm/pgtable.h>
+#include <asm/page.h>
+
+#include <asm/mach/map.h>
+#include <asm/mach-types.h>
+#include <mach/gpio.h>
+#include <mach/imx-uart.h>
+#include <mach/mmc.h>
+#include <mach/usb.h>
+#include <mach/spi.h>
+#include <mach/mx1.h> /* mxc_gpio_mode() */
+#include <linux/spi/max1027.h>
+#include <mach/ssi.h>
+#include <mach/dma-mx1-mx2.h>
+#include "../../../drivers/armadeus/pwm/pwm.h"
+#include <linux/dm9000.h>
+#include <mach/iomux-v1.h>
+#include <mach/iomux-mx1.h>
+#include <mach/board-apf9328.h>
+#ifdef CONFIG_MACH_APF9328_FPGA
+#include "../plat-mxc/include/mach/fpga.h" /* To be removed when MX1 arch is fully integrated */
+#endif
+#include <mach/imxfb.h>
+#include "devices-imx1.h"
+
+#define IMX_FB_VIRT     0xF1000000
+#define IMX_FB_SIZE     (256*1024)
+#ifdef CONFIG_ARMADEUS_MAX1027_MODULE
+#define CONFIG_ARMADEUS_MAX1027 1
+#endif
+#ifdef CONFIG_SPI_IMX_MODULE
+#define CONFIG_SPI_IMX 1
+#endif
+#ifdef CONFIG_SND_IMX_PCM_MODULE
+#define CONFIG_SND_IMX_PCM 1
+#endif
+#ifdef CONFIG_IMX_BACKLIGHT_MODULE
+#define CONFIG_IMX_BACKLIGHT 1
+#endif
+#ifdef CONFIG_ARMADEUS_PWM_DRIVER_MODULE
+#define CONFIG_PWM
+#endif
+#ifdef CONFIG_ARMADEUS_PWM_DRIVER
+#define CONFIG_PWM
+#endif
+
+
+static int apf9328_pins[] = {
+	/* SPI0 */
+	PC14_PF_SPI1_SCLK,
+	PC16_PF_SPI1_MISO,
+	PC17_PF_SPI1_MOSI,
+};
+
+/*
+ * APF9328 has a DM9000 Ethernet controller
+ */
+static struct resource dm9000_resources[] = {
+	[0] = {
+		.start  = (APF9328_ETH_PHYS + 0),
+		.end    = (APF9328_ETH_PHYS + 1),
+		.flags  = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start  = (APF9328_ETH_PHYS + 2),
+		.end    = (APF9328_ETH_PHYS + 3),
+		.flags  = IORESOURCE_MEM,
+	},
+	[2] = {
+		.start  = (APF9328_ETH_IRQ),
+		.end    = (APF9328_ETH_IRQ),
+		.flags  = IORESOURCE_IRQ | IORESOURCE_IRQ_LOWLEVEL,
+	},
+};
+
+static struct dm9000_plat_data dm9000_setup = {
+	.flags          = DM9000_PLATF_16BITONLY
+};
+
+static struct platform_device dm9000x_device = {
+	.name           = "dm9000",
+	.id             = 0,
+	.num_resources  = ARRAY_SIZE(dm9000_resources),
+	.resource       = dm9000_resources,
+	.dev            = { .platform_data = &dm9000_setup, },
+};
+
+#ifdef CONFIG_MXC_PWM
+static struct resource pwm_resources[] = {
+	[0] = {
+		.start  = 0x00208000,
+		.end    = 0x0020800c,
+		.flags  = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start  = (MX1_PWM_INT),
+		.end    = (MX1_PWM_INT),
+		.flags  = IORESOURCE_IRQ,
+	},
+};
+
+static int apf9328_pwm_0_init(void)
+{
+	/* Init Port PA[2] : PWMO*/
+	mxc_gpio_mode(PA2_PF_PWM0);
+	return 0;
+}
+
+static int apf9328_pwm_0_exit(void)
+{
+	return 0;
+}
+
+static struct imx_pwm_platform_data apf9328_pwm_0_data = {
+	.init = apf9328_pwm_0_init,
+	.exit = apf9328_pwm_0_exit,
+};
+
+static struct platform_device imx_pwm_device = {
+	.name           = "imx-pwm",
+	.id             = 0,
+	.num_resources  = ARRAY_SIZE(pwm_resources),
+	.resource       = pwm_resources,
+	.dev            = {
+		.platform_data = &apf9328_pwm_0_data,
+	}
+};
+#endif /* CONFIG_MXC_PWM */
+
+#ifdef CONFIG_USB_GADGET_IMX
+static int apf9328_udc_0_init(struct device * dev)
+{
+	mxc_gpio_mode(PC3_PF_SSI_RXFS);
+	mxc_gpio_mode(PB20_PF_USBD_AFE);
+	mxc_gpio_mode(PB21_PF_USBD_OE);
+	mxc_gpio_mode(PB22_PF_USBD_RCV);
+	mxc_gpio_mode(PB23_PF_USBD_SUSPND);
+	mxc_gpio_mode(PB24_PF_USBD_VP);
+	mxc_gpio_mode(PB25_PF_USBD_VM);
+	mxc_gpio_mode(PB26_PF_USBD_VPO);
+	mxc_gpio_mode(PB27_PF_USBD_VMO);
+
+	return 0;
+}
+
+static void apf9328_udc_0_exit(struct device * dev)
+{
+}
+
+static struct imxusb_platform_data apf9328_udc_0_data = {
+	.init = apf9328_udc_0_init,
+	.exit = apf9328_udc_0_exit,
+};
+#endif /* CONFIG_USB_GADGET_IMX */
+
+// TBD GGM
+#if 0
+#if defined(CONFIG_SND_IMX_PCM) || defined(CONFIG_SND_IMX_PCM_MODULE)
+int apf9328_ssi_gpio_init(struct platform_device *pdev)
+{
+	/* Activate SSI on PortC */
+	mxc_gpio_mode(PC3_PF_SSI_RXFS);
+	FMCR &= ~(SSI_RXFS_SEL);
+	mxc_gpio_mode(PC4_PF_SSI_RXCLK);
+	FMCR &= ~(SSI_RXCLK_SEL);
+	mxc_gpio_mode(PC5_PF_SSI_RXDAT);
+	FMCR &= ~(SSI_RXDAT_SEL);
+	mxc_gpio_mode(PC6_PF_SSI_TXDAT);
+	mxc_gpio_mode(PC7_PF_SSI_TXFS);
+	FMCR &= ~(SSI_TXFS_SEL);
+	mxc_gpio_mode(PC8_PF_SSI_TXCLK);
+	FMCR &= ~(SSI_TXCLK_SEL);
+
+	printk("SSI pins configured\n");
+	return 0;
+}
+
+static struct imx_ssi_platform_data apf9328_ssi_pdata = {
+	.init = apf9328_ssi_gpio_init,
+};
+
+static struct resource ssi_resources[] = {
+	[0] = {
+		.start  = (0x00218000),
+		.end    = (0x00218000 + 0x28),
+		.flags  = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start	= SSI_TX_INT,
+		.end	= SSI_TX_INT,
+		.flags	= IORESOURCE_IRQ
+	},
+	[2] = {
+		.start	= SSI_TX_ERR_INT,
+		.end	= SSI_TX_ERR_INT,
+		.flags	= IORESOURCE_IRQ
+	},
+	[3] = {
+		.start	= SSI_RX_INT,
+		.end	= SSI_RX_INT,
+		.flags	= IORESOURCE_IRQ
+	},
+	[4] = {
+		.start	= SSI_RX_ERR_INT,
+		.end	= SSI_RX_ERR_INT,
+		.flags	= IORESOURCE_IRQ
+	},
+	[5] = {
+		.name	= "tx0",
+		.start	= DMA_REQ_SSI_T,
+		.end	= DMA_REQ_SSI_T,
+		.flags	= IORESOURCE_DMA
+	},
+	[6] = {
+		.name	= "rx0",
+		.start	= DMA_REQ_SSI_R,
+		.end	= DMA_REQ_SSI_R,
+		.flags	= IORESOURCE_DMA
+	},
+};
+
+static struct platform_device apf9328_ssi_device = {
+	.name           = "imx-ssi",
+	.id             = 0,
+	.num_resources  = ARRAY_SIZE(ssi_resources),
+	.resource       = ssi_resources,
+	.dev            = {
+		.platform_data = &apf9328_ssi_pdata,
+	}
+};
+
+#endif /* defined(CONFIG_SND_IMX_PCM) || defined(CONFIG_SND_IMX_PCM_MODULE) */
+#endif
+
+/* --- SERIAL RESSOURCE --- */
+static int mxc_uart0_pins[] = {
+	PC9_PF_UART1_CTS,
+	PC10_PF_UART1_RTS,
+	PC11_PF_UART1_TXD,
+	PC12_PF_UART1_RXD
+};
+
+static int uart_mxc_port0_init(struct platform_device *pdev)
+{
+	return mxc_gpio_setup_multiple_pins(mxc_uart0_pins, ARRAY_SIZE(mxc_uart0_pins), "UART1");
+}
+
+static void uart_mxc_port0_exit(struct platform_device *pdev)
+{
+	mxc_gpio_release_multiple_pins(mxc_uart0_pins, ARRAY_SIZE(mxc_uart0_pins));
+}
+
+static struct imxuart_platform_data uart0_pdata = {
+	.init = uart_mxc_port0_init,
+	.exit = uart_mxc_port0_exit,
+	.flags = 0,
+};
+
+static int mxc_uart1_pins[] = {
+	PB28_PF_UART2_CTS,
+	PB29_PF_UART2_RTS,
+	PB30_PF_UART2_TXD,
+	PB31_PF_UART2_RXD
+};
+
+static int uart_mxc_port1_init(struct platform_device *pdev)
+{
+	return mxc_gpio_setup_multiple_pins(mxc_uart1_pins, ARRAY_SIZE(mxc_uart1_pins), "UART2");
+}
+
+static void uart_mxc_port1_exit(struct platform_device *pdev)
+{
+	mxc_gpio_release_multiple_pins(mxc_uart1_pins, ARRAY_SIZE(mxc_uart1_pins));
+}
+
+static struct imxuart_platform_data uart1_pdata = {
+	.init = uart_mxc_port1_init,
+	.exit = uart_mxc_port1_exit,
+	.flags = IMXUART_HAVE_RTSCTS,
+};
+
+#ifdef CONFIG_SPI_IMX
+#define SPIDEV_CS (GPIO_PORTB + 18)
+#define MAX1027_CS (GPIO_PORTC + 15)
+
+static int apf9328_spi1_cs[] = {
+	MAX1027_CS,
+	SPIDEV_CS,
+};
+
+static const struct spi_imx_master imx_spi1_master_info = {
+	.chipselect = apf9328_spi1_cs,
+	.num_chipselect = ARRAY_SIZE(apf9328_spi1_cs),
+};
+
+#define MCP251X_CS (GPIO_PORTB + 19)
+#define TSC2102_CS (GPIO_PORTB + 17)
+
+static int apf9328_spi2_cs[] = {
+	TSC2102_CS,
+	MCP251X_CS,
+};
+
+static const struct spi_imx_master imx_spi2_master_info = {
+	.chipselect = apf9328_spi2_cs,
+	.num_chipselect = ARRAY_SIZE(apf9328_spi2_cs),
+};
+#endif /* CONFIG_SPI_IMX */
+
+/*
+ * APF9328 can have an optionnal MAX1027 ADC
+ */
+#ifdef CONFIG_ARMADEUS_MAX1027
+#define IMX_SPI1_SS_PIN 15
+#define MAX1027_EOC_INT (GPIO_PORTA | 13)
+#define MAX1027_CNVST (GPIO_PORTA | 14)
+
+static int max1027_init(struct spi_device *spi)
+{
+	mxc_gpio_mode(MAX1027_EOC_INT | GPIO_IN | GPIO_GPIO);
+	mxc_gpio_mode(MAX1027_CNVST | GPIO_OUT | GPIO_GPIO);
+	return 0;
+}
+
+static int max1027_exit(struct spi_device *spi)
+{
+	return 0;
+}
+
+static struct max1027_config apf9328_max1027_config = {
+	.conv = MAX1027_CONV_DEFAULT,
+	.setup = MAX1027_SETUP_DEFAULT,
+	.avg = MAX1027_AVG_DEFAULT,
+	.cnvst_pin = (int)(MAX1027_CNVST|GPIO_PORTA),
+	.init = max1027_init,
+	.exit = max1027_exit
+};
+#endif /* CONFIG_ARMADEUS_MAX1027 */
+
+
+#ifdef CONFIG_ARMADEUS_MAX1027
+static struct spi_board_info spi_board_info[] __initdata = {
+{
+	.modalias	= "max1027",
+	.max_speed_hz	= 8000000,
+	.bus_num	= 0, /* SPI1 */
+	.chip_select	= 0,
+	.mode 		= 0,
+	.irq		= IRQ_GPIOA(MAX1027_EOC_INT),
+	.platform_data	= &apf9328_max1027_config,
+},
+};
+#endif
+
+#ifdef CONFIG_IMX_BACKLIGHT
+static struct imxbl_machinfo imx_bl_machinfo = {
+	.max_intensity      = 0xff,
+	.default_intensity  = 0x90,
+	.limit_mask         = 0x7f, /* When battery is low */
+/*    set_bl_intensity = put a function here if you want to overload default one, */
+};
+
+static struct platform_device imxbl_device = {
+	.name       = "imx-bl",
+	.dev        = {
+	//        .parent = &imxfb_device.dev, crash kernel even if EXPORT_SYMBOL() is done in generic.c
+		.platform_data	= &imx_bl_machinfo,
+	},
+	.id        = 0,
+};
+#endif /* CONFIG_IMX_BACKLIGHT */
+
+/*
+ * The APF9328 can have up to 32MB NOR Flash
+ */
+static struct resource flash_resource = {
+	.start  = MX1_CS0_PHYS,
+	.end    = MX1_CS0_PHYS + (32 * 1024 * 1024) - 1,
+	.flags  = IORESOURCE_MEM,
+};
+
+static struct physmap_flash_data apf9328_flash_data = {
+	.width  = 2,
+};
+
+static struct platform_device apf9328_flash_device = {
+	.name           = "physmap-flash",
+	.id             = 0,
+	.dev = {
+		.platform_data = &apf9328_flash_data,
+	},
+	.resource = &flash_resource,
+	.num_resources = 1,
+};
+
+/*
+ * The APF9328 can have an optionnal Xilinx's Spartan3 FPGA
+ * directly connected to its address/data busses
+ */
+#ifdef CONFIG_MACH_APF9328_FPGA
+static int apf9328_fpga_irq_init(struct platform_device *pdev)
+{
+	int res = 0;
+
+	/* TODO */
+	set_irq_type(APF9328_FPGA_IRQ, IRQF_TRIGGER_RISING);
+
+	return res;
+}
+
+static void apf9328_fpga_irq_exit(struct platform_device *pdev)
+{
+	/* TODO */
+}
+
+struct fpga_irq_mng_platform_data apf9328_fpga_irq = {
+	.init = apf9328_fpga_irq_init,
+	.exit = apf9328_fpga_irq_exit,
+};
+
+struct platform_device apf9328_ocore_irq_mng_device = {
+	.name 	= "ocore_irq_mng",
+	.id 	= 0,
+	.dev 	= { .platform_data = &apf9328_fpga_irq, },
+};
+#endif /* CONFIG_MACH_APF9328_FPGA */
+
+#ifdef CONFIG_I2C_IMX
+static int mxc_i2c_pins[] = {
+	PA15_PF_I2C_SDA,
+	PA16_PF_I2C_SCL,
+};
+
+static int apf9328_i2c_init(struct platform_device *pdev)
+{
+	return mxc_gpio_setup_multiple_pins(mxc_i2c_pins,
+					ARRAY_SIZE(mxc_i2c_pins), "I2C");
+}
+
+static int apf9328_i2c_exit(struct platform_device *pdev)
+{
+	mxc_gpio_release_multiple_pins(mxc_i2c_pins, ARRAY_SIZE(mxc_i2c_pins));
+	return 0;
+}
+
+static const struct imxi2c_platform_data apf9328_i2c_data __initconst = {
+	.bitrate = 100000,
+	.init = apf9328_i2c_init,
+	.exit = apf9328_i2c_exit,
+};
+#endif /* CONFIG_I2C_IMX */
+
+static struct platform_device *devices[] __initdata = {
+	&dm9000x_device,
+#ifdef CONFIG_PWM
+	&imx_pwm_device,
+#endif
+#ifdef CONFIG_IMX_BACKLIGHT
+	&imxbl_device,
+#endif
+#if defined(CONFIG_SND_IMX_PCM) || defined(CONFIG_SND_IMX_PCM_MODULE)
+	&apf9328_ssi_device,
+#endif
+	&apf9328_flash_device,
+#ifdef CONFIG_MACH_APF9328_FPGA
+	&apf9328_ocore_irq_mng_device,
+#endif
+};
+
+static void __init apf9328_init(void)
+{
+	mxc_gpio_setup_multiple_pins(apf9328_pins,
+		ARRAY_SIZE(apf9328_pins), "apf9328");
+
+	imx1_add_imx_uart0(&uart0_pdata); /* console */
+	imx1_add_imx_uart1(&uart1_pdata);
+
+#ifdef CONFIG_SPI_IMX
+#if defined (CONFIG_ARMADEUS_MAX1027) || defined (CONFIG_SPIDEV)
+	mxc_gpio_mode(GPIO_PORTC | IMX_SPI1_SS_PIN | GPIO_OUT | GPIO_GPIO);
+	mxc_gpio_mode(GPIO_PORTA | 4 | GPIO_GPIO | GPIO_OUT);
+#endif
+	imx1_add_spi_imx0(&imx_spi1_master_info);
+	imx1_add_spi_imx1(&imx_spi2_master_info);
+#if defined (CONFIG_ARMADEUS_MAX1027)
+	spi_register_board_info(spi_board_info, ARRAY_SIZE(spi_board_info));
+#endif
+#endif
+#ifdef CONFIG_I2C_IMX
+	imx1_add_i2c_imx(&apf9328_i2c_data);
+#endif
+#ifdef CONFIG_USB_GADGET_IMX
+	mxc_register_device(&imx_usb_device, &apf9328_udc_0_data);
+#endif
+	platform_add_devices(devices, ARRAY_SIZE(devices));
+	apf9328_baseboard_init();
+}
+
+/*
+ * Register here the memory addresses we want to access from our drivers and
+ * which are not already registered in generic.c
+ */
+
+static struct map_desc apf9328_io_desc[] __initdata = {
+#ifdef CONFIG_MACH_APF9328_FPGA
+	/* FPGA Memory mapping */
+	{
+		.virtual = MX1_CS1_VIRT,
+		.pfn = __phys_to_pfn(MX1_CS1_PHYS),
+		.length = MX1_CS1_SIZE,
+		.type = MT_DEVICE
+	},
+#endif
+};
+
+void __init apf9328_map_io(void)
+{
+	mx1_map_io();
+	iotable_init(apf9328_io_desc, ARRAY_SIZE(apf9328_io_desc));
+
+}
+
+static void __init apf9328_init_irq(void)
+{
+	/* Init generic IRQs */
+	mx1_init_irq();
+
+	/* Init our custom IRQs (DM9000) */
+
+	mxc_gpio_mode(GPIO_PORTB | 14 | GPIO_IN | GPIO_GPIO);
+	set_irq_type(APF9328_ETH_IRQ, IRQF_TRIGGER_FALLING);
+}
+static void __init apf9328_timer_init(void)
+{
+	mx1_clocks_init(32768);
+}
+static struct sys_timer apf9328_timer = {
+	.init = apf9328_timer_init,
+};
+
+MACHINE_START(APF9328, "Armadeus APF9328")
+	/* Maintainer: Julien Boibessot, Armadeus */
+	.boot_params  = MX1_PHYS_OFFSET + 0x100,
+	.map_io       = apf9328_map_io,
+	.init_irq     = apf9328_init_irq,
+	.timer        = &apf9328_timer,
+	.init_machine = apf9328_init,
+MACHINE_END
Index: linux-2.6.38-rc3/arch/arm/mach-imx/apf9328_lcd_config.h
===================================================================
--- /dev/null
+++ linux-2.6.38-rc3/arch/arm/mach-imx/apf9328_lcd_config.h
@@ -0,0 +1,348 @@
+/*
+ *
+ * Armadeus LCD configuration file
+ *
+ * Put here all that is needed to configure the Hardware
+ * interface to your LCD
+ *
+ *
+ */
+
+#ifndef APF_LCD_CONFIG_H
+#define APF_LCD_CONFIG_H
+
+#define IMX_NEEDS_DEPRECATED_SYMBOLS
+
+#ifdef CONFIG_FB_IMX
+
+#include <linux/delay.h>
+
+#include <mach/gpio.h>
+#include <mach/imxfb.h>
+#ifdef CONFIG_ARCH_MX1
+# include <mach/mx1.h>
+# define LCDC_BASE_ADDR		MX1_LCDC_BASE_ADDR
+# define MXC_IO_ADDRESS		MX1_IO_ADDRESS
+#else
+# include <mach/mx2x.h>
+# define LCDC_BASE_ADDR		MX27_LCDC_BASE_ADDR
+# define MXC_IO_ADDRESS		MX27_IO_ADDRESS
+#endif
+
+#define LCDISR_EOF	(1 << 1)
+
+#ifdef CONFIG_MACH_APF9328
+# define OPTREX_F51900_POWER_DOWN	(GPIO_PORTD | 7)	/* PD7_REV */
+# define SHARP_LQ043_POWER_DOWN		(GPIO_PORTD | 12)	/* PD12_ACD_OE */
+# define CONTRAST_LINE			(GPIO_PORTD | 11)	/* PD11_CONTRAST */
+#elif defined(CONFIG_MACH_APF27)
+# define OPTREX_F51900_POWER_DOWN	(GPIO_PORTA | 24)	/* PA24_REV */
+# define SHARP_LQ043_POWER_DOWN		(GPIO_PORTA | 31)	/* PA31_OE_ACD */
+# define CONTRAST_LINE			(GPIO_PORTA | 30)	/* PA30_CONTRAST */
+#endif
+
+#define DEFAULT_DMA_SETTINGS        (DMACR_BURST | DMACR_HM(8) | DMACR_TM(4))
+
+#ifdef CONFIG_MACH_APF9328
+static int apf9328_fb_init(struct platform_device *pdev);
+#endif
+
+char lcd_name[32];
+void apf_set_lcd_name(const char *name) {
+	printk(KERN_DEBUG "--- Setting LCD name to (%s)\n", name);
+	strlcpy(lcd_name, name, sizeof(lcd_name));
+}
+
+/*
+ * Power on/off LCD's internal logic
+ */
+static void apf_lcd_power(int on)
+{
+	u32 isr;
+
+	printk(KERN_DEBUG "%s: %s, %s\n", __func__, on ? "on":"off", lcd_name);
+	isr = 0;
+
+	if (!strcmp("Optrex-FS1900", lcd_name)) {
+		if (on)
+			gpio_set_value(OPTREX_F51900_POWER_DOWN, 1);
+		else
+			gpio_set_value(OPTREX_F51900_POWER_DOWN, 0);
+	} else if (!strcmp("Microtips-T035", lcd_name)) {
+		/* No LCD powerdown yet */
+	} else if (!strcmp("Sharp-LQ043", lcd_name)) {
+		if (on) {
+			mdelay(200); /* at least ten frames have to be processed before
+					enabling the display */
+			/* Waits end of current frame */
+			isr = readl(MXC_IO_ADDRESS(LCDC_BASE_ADDR) + 0x40);
+			printk("isr %08x\n", isr);
+			do {
+				isr = readl(MXC_IO_ADDRESS(LCDC_BASE_ADDR) + 0x40);
+				pr_debug("isr %08x\n", isr);
+				udelay(1000);
+				pr_debug("%08x\n", isr);
+			} while ((isr & LCDISR_EOF) == 0);
+
+			gpio_set_value(SHARP_LQ043_POWER_DOWN, 1);
+			mdelay(200);
+		} else {
+			gpio_set_value(SHARP_LQ043_POWER_DOWN, 0);
+			mdelay(200); /* needs to wait 10 frames after DISP goes down
+					before shutting down LCDC (done in imxfb) */
+		}
+	} else if (!strcmp("Chimei-LW700AT9003", lcd_name)) {
+		/* No LCD powerdown yet */
+	} else {
+		/* All other cases: use CONTRAST as PWDN */
+		if (on) {
+			gpio_set_value(CONTRAST_LINE, 0);
+		} else {
+			gpio_set_value(CONTRAST_LINE, 1);
+		}
+	}
+}
+
+/*
+ * Power on/off LCD's backlight
+ */
+static void apf_lcd_backlight_power(int on)
+{
+	u32 pwmr;
+
+	printk(KERN_DEBUG "%s: %s\n", __func__, on ? "on":"off");
+
+	pwmr = readl(MXC_IO_ADDRESS(LCDC_BASE_ADDR) + 0x2c);
+	printk(KERN_DEBUG "pwmr: %08x\n", pwmr);
+
+#ifdef CONFIG_MACH_APF9328
+	if (pwmr)
+		mxc_gpio_mode(PD11_PF_CONTRAST);
+#endif
+}
+
+
+static struct imx_fb_videomode apf_fb_modes[] = {
+	{	/* Default one */
+		.mode = {
+			.name		= "Sharp-LQ043",
+			.refresh	= 60,
+			.xres		= 480,
+			.yres		= 272,
+			.pixclock	= 125000, /* picoS -> ~8MHz */
+			.left_margin	= 3, /* should be 2 but i.MX doesn't support it */
+			.right_margin	= 2,
+			.upper_margin	= 3,
+			.lower_margin	= 2,
+			.hsync_len	= 41,
+			.vsync_len	= 10,
+		},
+		.pcr = PCR_TFT | PCR_COLOR | PCR_PBSIZ_8 | PCR_BPIX_16 |
+			PCR_FLMPOL | PCR_LPPOL | PCR_CLKPOL | PCR_SCLKIDLE |
+			PCR_SCLK_SEL | PCR_PCD(5),
+		.bpp = 16,
+	},
+	{
+		.mode = {
+			.name		= "Microtips-T035",
+			.refresh	= 60,
+			.xres		= 320,
+			.yres		= 240,
+			.pixclock	= 156250, /* picoS -> ~6.4MHz */
+			.left_margin	= 4,
+			.upper_margin	= 20,
+			.right_margin	= 69,
+			.lower_margin	= 20,
+			.hsync_len	= 31,
+			.vsync_len	= 3,
+		},
+		.pcr = PCR_TFT | PCR_COLOR | PCR_PBSIZ_8 | PCR_BPIX_16 |
+			PCR_FLMPOL | PCR_LPPOL | PCR_SCLKIDLE | PCR_SCLK_SEL |
+			PCR_PCD(7),
+		.bpp = 16,
+	},
+	{
+		.mode = {
+			.name		= "Sharp-LQ057",
+			.refresh	= 60,
+			.xres		= 320,
+			.yres		= 240,
+			.pixclock	= 158730, /* picoS -> ~6.3MHz */
+			.left_margin	= 9,
+			.upper_margin	= 0,
+			.right_margin	= 27,
+			.lower_margin	= 7,
+			.hsync_len	= 9,
+			.vsync_len	= 2,
+		},
+		.bpp = 16,
+		.pcr = PCR_TFT | PCR_COLOR | PCR_PBSIZ_8 | PCR_BPIX_16 |
+			PCR_SCLKIDLE | PCR_SCLK_SEL | PCR_PCD(9),
+	},
+	{
+		.mode = {
+			.name		= "Optrex-F51900",
+			.refresh	= 60,
+			.xres		= 320,
+			.yres		= 240,
+			.pixclock	= 62500,
+			.left_margin	= 2,
+			.upper_margin	= 2,
+			.right_margin	= 2,
+			.lower_margin	= 2,
+			.hsync_len	= 2,
+			.vsync_len	= 2,
+		},
+		.bpp = 8,
+		.pcr = PCR_COLOR | PCR_PBSIZ_8 | PCR_BPIX_8 | PCR_ACD(5) |
+			PCR_END_BYTE_SWAP | PCR_PCD(3),
+	},
+	{
+		.mode = {
+			.name		= "Chimei-LW700AT9003",
+			.refresh	= 60,
+			.xres		= 800,
+			.yres		= 480,
+			.pixclock	= 30303, /* picoS */
+			.left_margin	= 96,
+			.right_margin	= 96, /* at least 3 & 1 */
+			.upper_margin	= 0x14,
+			.lower_margin	= 0x15,
+			.hsync_len	= 64,
+			.vsync_len	= 4,
+		},
+		.bpp = 16,
+		.pcr = 0xfae80083, /*PCR_TFT | PCR_COLOR | PCR_PBSIZ_8 | PCR_BPIX_16 |
+			PCR_FLMPOL | PCR_LPPOL | PCR_SCLKIDLE | PCR_CLKPOL |
+			PCR_SCLK_SEL | PCR_PCD(3),*/
+	},
+};
+
+static struct imx_fb_platform_data apf_fb_data /*__initdata*/ = {
+	.mode		= apf_fb_modes,
+	.num_modes	= ARRAY_SIZE(apf_fb_modes),
+	.dmacr		= DEFAULT_DMA_SETTINGS,
+	.lcd_power	= apf_lcd_power,
+	.backlight_power= apf_lcd_backlight_power,
+#ifdef CONFIG_MACH_APF9328
+	.init           = apf9328_fb_init,
+#elif CONFIG_MACH_APF27
+	.init		= apf27_fb_init,
+#endif
+};
+
+void apf_fb_set_default_contrast(void /*char *name*/)
+{
+	if (!strcmp("Optrex-FS1900", lcd_name)) {
+		apf_fb_data.pwmr = 0;	/* No contrast management */
+	} else if (!strcmp("Microtips-T035", lcd_name)) {
+		apf_fb_data.pwmr = 0x00000150;	/* Contrast with PWM @ Line Pulse / 256, medium width by default */
+	} else if (!strcmp("Sharp-LQ043", lcd_name)) {
+		apf_fb_data.pwmr = 0x000003ff; /* Contrast with PWM @ Pixel clock / 256, max width by default */
+	} else if (!strcmp("Chimei-LW700AT9003", lcd_name)) {
+		apf_fb_data.pwmr = 0x00a903ff;	/* Contrast with PWM @ Pixel clock / 256, max width by default */
+	} else {
+		apf_fb_data.pwmr = 0;	/* No contrast management */
+	}
+}
+
+/*
+ * Configure all GPIOs needed by LCDs
+ */
+#ifdef CONFIG_MACH_APF9328
+static int apf9328_fb_init(struct platform_device *pdev)
+{
+	struct imx_fb_platform_data *fb_inf = &apf_fb_data;
+	int width;
+
+	pr_debug("%s\n", __func__);
+
+	if (!strcmp("Optrex-FS1900", lcd_name)) {
+		gpio_set_value(OPTREX_F51900_POWER_DOWN, 1); /* Initializes it High */
+		mxc_gpio_mode(OPTREX_F51900_POWER_DOWN | GPIO_OUT | GPIO_GPIO);
+	} else if (!strcmp("Sharp-LQ043", lcd_name)) {
+		/* ACD_OE (SHARP_LQ043_POWER_DOWN) used as power down signal */
+		gpio_set_value(SHARP_LQ043_POWER_DOWN, 0); /* Initializes it Low */
+		mxc_gpio_mode(SHARP_LQ043_POWER_DOWN | GPIO_OUT | GPIO_GPIO);//1<<16 | 3<<10);
+	} else {
+		/* otherwise use ACD_OE as standard LCD controller signal */
+		mxc_gpio_mode(PD12_PF_ACD_OE);
+	}
+
+	if (fb_inf->mode->pcr & PCR_TFT)
+		width = 16;
+	else
+		width = 1 << ((fb_inf->mode->pcr >> 28) & 0x3);
+
+	switch (width) {
+	case 16:
+		mxc_gpio_mode(PD30_PF_LD15);
+		mxc_gpio_mode(PD29_PF_LD14);
+		mxc_gpio_mode(PD28_PF_LD13);
+		mxc_gpio_mode(PD27_PF_LD12);
+		mxc_gpio_mode(PD26_PF_LD11);
+		mxc_gpio_mode(PD25_PF_LD10);
+		mxc_gpio_mode(PD24_PF_LD9);
+		mxc_gpio_mode(PD23_PF_LD8);
+	case 8:
+		mxc_gpio_mode(PD22_PF_LD7);
+		mxc_gpio_mode(PD21_PF_LD6);
+		mxc_gpio_mode(PD20_PF_LD5);
+		mxc_gpio_mode(PD19_PF_LD4);
+	case 4:
+		mxc_gpio_mode(PD18_PF_LD3);
+		mxc_gpio_mode(PD17_PF_LD2);
+	case 2:
+		mxc_gpio_mode(PD16_PF_LD1);
+	case 1:
+		mxc_gpio_mode(PD15_PF_LD0);
+	}
+
+	mxc_gpio_mode(PD6_PF_LSCLK);
+	mxc_gpio_mode(PD14_PF_FLM_VSYNC);
+	mxc_gpio_mode(PD13_PF_LP_HSYNC);
+
+	/* Sharp's HR TFT displays specific */
+	if (fb_inf->mode->pcr & PCR_SHARP) {
+		mxc_gpio_mode(PD7_PF_REV);
+		mxc_gpio_mode(PD8_PF_CLS);
+		mxc_gpio_mode(PD9_PF_PS);
+		mxc_gpio_mode(PD10_PF_SPL_SPR);
+	}
+
+	/* GPIO Function for CONTRAST pin */
+	gpio_set_value(CONTRAST_LINE, 0); /* Initializes it Low */
+	mxc_gpio_mode(CONTRAST_LINE | GPIO_OUT /*| GPIO_GPIO*/ | 1<<16 | 3<<10);
+
+	return 0;
+}
+
+static void apf9328_init_lcd(void)
+{
+	char *opt, *name = NULL, *options = NULL;
+
+	if (fb_get_options("imxfb", &options))
+		goto end;
+
+	if (!options || !*options)
+		goto end;
+
+	while ((opt = strsep(&options, ",")) != NULL) {
+		if (!*opt)
+			continue;
+		else
+			name = opt;
+	}
+
+	apf_set_lcd_name(name);
+	apf_fb_set_default_contrast();
+
+	imx1_add_imx_fb(&apf_fb_data);
+end:
+	return;
+}
+#endif /* CONFIG_MACH_APF9328 */
+
+#endif /* CONFIG_FB_IMX */
+
+#endif /* APF_LCD_CONFIG_H */
Index: linux-2.6.38-rc3/arch/arm/plat-mxc/include/mach/board-apf9328.h
===================================================================
--- /dev/null
+++ linux-2.6.38-rc3/arch/arm/plat-mxc/include/mach/board-apf9328.h
@@ -0,0 +1,71 @@
+/*
+ * linux/include/asm-arm/arch-imx/apf9328.h
+ *
+ * Copyright (c) 2005 Armadeus
+ * This work is based on scb9328.h from Sascha Hauer
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#ifndef __ASM_ARCH_APF9328_H
+#define __ASM_ARCH_APF9328_H
+
+/* ------------------------------------------------------------------------ */
+/* Memory Map for the APF9328 Board                                         */
+/* ------------------------------------------------------------------------ */
+
+/* Ethernet */
+#define IMX_CS4_VIRT           0xed000000
+#define IMX_CS0_VIRT           0xe8000000
+#define IMX_CS1_VIRT           0xea000000
+#define APF9328_ETH_VIRT ( IMX_CS4_VIRT + 0x00C00000 )
+#define APF9328_ETH_PHYS ( MX1_CS4_PHYS + 0x00C00000 )
+#define APF9328_ETH_IRQ  ( IRQ_GPIOB(14) )
+
+/* FLASH */
+#define APF9328_FLASH_PHYS      MX1_CS0_PHYS
+#ifdef CONFIG_IMX_APF9328_FLASH_8MB
+# define APF9328_FLASH_SIZE     0x00800000
+#endif
+#ifdef CONFIG_IMX_APF9328_FLASH_16MB
+# define APF9328_FLASH_SIZE     0x01000000
+#endif
+#define APF9328_FLASH_BASE      IMX_CS0_VIRT
+
+/* FPGA */
+#define ARMADEUS_FPGA_BASE_ADDR_VIRT ( APF9328_FPGA_VIRT )
+#define ARMADEUS_FPGA_BASE_ADDR_PHYS ( APF9328_FPGA_PHYS )
+#define ARMADEUS_FPGA_IRQ       ( APF9328_FPGA_IRQ )
+
+#define APF9328_FPGA_VIRT ( IMX_CS1_VIRT )
+#define APF9328_FPGA_PHYS ( MX1_CS1_PHYS )
+#define APF9328_FPGA_IRQ  ( IRQ_GPIOA(1) )
+
+#define CLK32 32768
+
+#ifndef __ASSEMBLY__
+/*
+ * The APF9328 module needs a baseboard to work. After basic initializing
+ * its own devices, it calls baseboard's init function.
+ * TODO: Add your own baseboard init function and call it from
+ * inside apf9328_init().
+ *
+ * This example here is for the DevLight/Full development boards. Refer apf9328-dev.c.
+ */
+
+extern void apf9328_baseboard_init(void);
+#endif
+
+#endif /* __ASM_ARCH_APF9328_H */
Index: linux-2.6.38-rc3/arch/arm/mach-imx/apf9328-dev.c
===================================================================
--- /dev/null
+++ linux-2.6.38-rc3/arch/arm/mach-imx/apf9328-dev.c
@@ -0,0 +1,325 @@
+/*
+ * apf9328-dev.c
+ * Declares hardware present on APF9328_DevLight or DevFull boards
+ *
+ * Copyright (c) 2009-2011 Armadeus systems
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ */
+
+#include <linux/device.h>
+#include <linux/platform_device.h>
+#include <linux/mtd/physmap.h>
+#include <linux/init.h>
+#include <linux/interrupt.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spidev.h>
+#include <mach/common.h>
+#include <mach/gpio.h>
+#include <linux/spi/tsc2102.h>
+#include <linux/can/platform/mcp251x.h>
+
+#include <asm/system.h>
+#include <mach/hardware.h>
+#include <linux/irq.h>
+#include <asm/pgtable.h>
+#include <asm/page.h>
+
+#include <asm/mach/map.h>
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <mach/imx-uart.h>
+#include <mach/mmc.h>
+#include <mach/usb.h>
+#include <mach/spi.h>
+#include <mach/mx1.h> /* mxc_gpio_mode() */
+#include <mach/gpio.h>
+//#include <mach/imx-alsa.h>
+//#include <linux/usb/isp116x.h>
+#include <linux/usb/isp1760.h>
+#include <mach/ssi.h>
+#include <mach/iomux-mx1.h>
+#include <mach/iomux-v1.h>
+#include "devices-imx1.h"
+#include <mach/imxfb.h>
+//#include "generic.h"
+
+
+#ifdef CONFIG_SPI_TSC2102_MODULE
+#define CONFIG_SPI_TSC2102 1
+#endif
+#ifdef CONFIG_CAN_MCP251X_MODULE
+#define CONFIG_CAN_MCP251X 1
+#endif
+#ifdef CONFIG_ARMADEUS_ISP1761_MODULE
+#define CONFIG_ARMADEUS_ISP1761 1
+#endif
+#ifdef CONFIG_SPI_SPIDEV_MODULE
+#define CONFIG_SPI_SPIDEV 1
+#endif
+#ifdef CONFIG_MMC_IMX_MODULE
+#define CONFIG_MMC_IMX 1
+#endif
+
+
+/*
+ * APF9328_DevFull board has an ISP1761 USB Host controller
+ */
+#ifdef CONFIG_ARMADEUS_ISP1761
+#define ISP1761_BASE		MX1_CS3_PHYS
+#define ISP1761_GPIO_IRQ	(GPIO_PORTC | 10)
+#define ISP1761_IRQ		(IRQ_GPIOC(10))
+
+static struct resource devfull_isp1761_resources[] = {
+	[0] = {
+		.name	= "isp1761-regs",
+		.start  = ISP1761_BASE + 0x00000000,
+		.end    = ISP1761_BASE + 0x000fffff,
+		.flags  = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start  = ISP1761_IRQ,
+		.end    = ISP1761_IRQ,
+		.flags  = IORESOURCE_IRQ | IORESOURCE_IRQ_LOWLEVEL,
+	},
+};
+
+static struct platform_device devfull_isp1761_device = {
+	.name           = "isp1761",
+	.id             = 0,
+	.num_resources  = ARRAY_SIZE(devfull_isp1761_resources),
+	.resource       = devfull_isp1761_resources,
+};
+#endif /* CONFIG_ARMADEUS_ISP1761 */
+
+
+/*
+ * APF9328_DevFull board has a TSC2102 for touchscreens control
+ * and sound playing
+ */
+#ifdef CONFIG_SPI_TSC2102
+#define TSC2102_CS_GPIOB 17
+#define TSC2102_INT_GPIOD 8
+#define SPI2_RXD_SEL (1<<8)
+#define FMCR MX1_IO_ADDRESS(MX1_SCM_BASE_ADDR)+4
+static int tsc2102_init_gpio(void)
+{
+	/* Activate SPI2 port ---- */
+	/* Configure SPI2 outputs */
+	mxc_gpio_mode(PD7_AIN_SPI2_SCLK);
+	mxc_gpio_mode(PD10_AIN_SPI2_TXD);
+	mxc_gpio_mode(PD9_AOUT_SPI2_RXD);
+	__raw_writel(__raw_readl(FMCR)|SPI2_RXD_SEL,FMCR);
+
+	/* PortD 8 is used as PINTDAV interrupt */
+	mxc_gpio_mode(GPIO_PORTD | TSC2102_INT_GPIOD | GPIO_IN | GPIO_GPIO);
+	set_irq_type(IRQ_GPIOD(TSC2102_INT_GPIOD), IRQF_TRIGGER_FALLING);
+
+	printk("TSC2102 GPIOs initialized\n");
+	return 0;
+}
+
+static struct tsc210x_config apf9328_tsc2102_config = {
+	.use_internal = 1, /* -> use internal voltage reference */
+	.monitor = TSC_BAT1 | TSC_AUX | TSC_TEMP,
+	.init = tsc2102_init_gpio,
+/*    .apm_report = palmte_get_power_status,*/
+/*#if defined(CONFIG_SND_IMX_TSC2102) || defined(CONFIG_SND_IMX_TSC2102_MODULE)
+	.alsa_config = &apf9328_alsa_pdata,
+#endif*/
+};
+
+#if defined(CONFIG_SND_IMX_TSC2102) || defined(CONFIG_SND_IMX_TSC2102_MODULE)
+static struct imx_sound_platform_data apf9328_alsa_pdata;
+
+static struct platform_device tsc2102_alsa_device = {
+	.name           = "tsc210x-alsa",
+	.id             = 0,
+	.dev            = {
+		.platform_data = &apf9328_alsa_pdata,
+	}
+};
+#endif /* defined(CONFIG_SND_IMX_TSC2102) || defined(CONFIG_SND_IMX_TSC2102_MODULE) */
+
+#endif /* CONFIG_SPI_TSC2102 */
+
+/*
+ * APF9328_DevFull board has a MCP251X CAN bus Host controller
+ */
+#ifdef CONFIG_CAN_MCP251X
+#define CAN_MPC251X_CS_GPIOB 19
+#define CAN_MPC251X_INT_GPIOC 13
+
+/* Chip select command for MCP251X */
+#if 0
+static void mcp251X_cs(u32 command)
+{
+	/* PortB 19 is used as chip select */
+	if (command == SPI_CS_DEASSERT)
+		DR(1) |= 1<< CAN_MPC251X_CS_GPIOB;
+	else
+		DR(1) &= ~(1<< CAN_MPC251X_CS_GPIOB);
+}
+
+static struct spi_imx_chip mcp251X_hw = {
+	.cs_control		= mcp251X_cs,
+};
+#endif
+static void mcp251X_init_gpio(void)
+{
+#if 0
+	/* PortB 19 is used as chip select (in GPIO mode) */
+	DR(1) |= 1 << CAN_MPC251X_CS_GPIOB; /* Initializes it High */
+	mxc_gpio_mode(GPIO_PORTB | CAN_MPC251X_CS_GPIOB | GPIO_OUT | GPIO_GIUS | GPIO_DR);
+
+	/* PortC 13 is used as CAN interrupt */
+	set_irq_type(IRQ_GPIOC(CAN_MPC251X_INT_GPIOC), IRQF_TRIGGER_FALLING);
+	mxc_gpio_mode(GPIO_PORTC | CAN_MPC251X_INT_GPIOC | GPIO_IN | GPIO_GIUS);
+
+	/* Configure SPI2 outputs */
+	mxc_gpio_mode(PD7_AIN_SPI2_SCLK);
+	mxc_gpio_mode(PD10_AIN_SPI2_TXD);
+	mxc_gpio_mode(PD9_AOUT_SPI2_RXD);
+	FMCR |= SPI2_RXD_SEL; /* RX is AOUT on PORTD */
+#endif
+}
+static struct mcp251x_platform_data apf9328_mcp251x_config = {
+	.oscillator_frequency  = 16000000,
+	.model                 = CAN_MCP251X_MCP2515,
+	.board_specific_setup  = NULL,
+	//.device_reset          = NULL,
+	.transceiver_enable    = NULL,
+};
+
+#endif /* CONFIG_CAN_MCP251X */
+
+/*
+ * APF9328 CONFIG SPIDEV
+ */
+#ifdef CONFIG_SPI_SPIDEV
+static int spidev_init_gpio(void)
+{
+	return 0;
+}
+
+static struct spidev_platform_data apf9328_spidev_config = {
+	.init = spidev_init_gpio,
+};
+
+#endif /* CONFIG_SPI_SPIDEV */
+
+
+static struct spi_board_info spi_dev_board_info[] __initdata = {
+#ifdef CONFIG_SPI_TSC2102
+{
+	.modalias	= "tsc210x",
+//	.controller_data= &tsc2102_hw,
+	.max_speed_hz	= 8000000,
+	.bus_num	= 1, /* SPI2 */
+	.irq		= IRQ_GPIOD(TSC2102_INT_GPIOD),
+	.chip_select	= 0,
+	.mode 		= 0,
+	.platform_data	= &apf9328_tsc2102_config,
+},
+#endif
+#ifdef CONFIG_CAN_MCP251X
+{
+	.modalias	= "mcp251x",
+	.max_speed_hz	= 8000000, /* 8MHz */
+	//.controller_data= &mcp251X_hw,
+	.bus_num	= 1,
+	.mode		= SPI_MODE_0,
+	.chip_select	= 1,
+	.irq		= IRQ_GPIOC( CAN_MPC251X_INT_GPIOC ),
+	.platform_data	= &apf9328_mcp251x_config,
+},
+#endif
+#ifdef CONFIG_SPI_SPIDEV
+{
+	.modalias          = "spidev",
+	.max_speed_hz      = 8000000, /* 8MHz */
+	.bus_num           = 0, /* SPI1 */
+	.mode              = SPI_MODE_0,
+	.chip_select       = 1,
+	.platform_data     = &apf9328_spidev_config,
+},
+#endif /* CONFIG_SPI_SPIDEV */
+};
+
+#ifdef CONFIG_I2C
+static struct i2c_board_info apf9328_i2c_devices_bus0[] = {
+	[0] = {
+		.type = "ds1374",
+		.flags = 0,  /* FIXME */
+		.addr = 0x68,
+		.platform_data = NULL,
+		.irq = 0,
+	},
+};
+#endif
+
+/*
+ * You may connect several types of LCD on these boards
+ */
+#ifdef CONFIG_FB_IMX
+/* all custom LCD configuration is deported to this file for clarity purpose: */
+#include "apf9328_lcd_config.h"
+#endif
+
+static struct platform_device *devices[] __initdata = {
+#if defined(CONFIG_SND_IMX_TSC2102) || defined(CONFIG_SND_IMX_TSC2102_MODULE)
+	&tsc2102_alsa_device,
+#endif
+#ifdef CONFIG_ARMADEUS_ISP1761
+	&devfull_isp1761_device,
+#endif
+#ifdef CONFIG_MMC_IMX
+	&imx_mmc_device,
+#endif
+};
+
+void __init apf9328_baseboard_init(void)
+{
+	printk("    APF9328_Dev\n");
+
+	/* Initializes serial port 2 GPIOs */
+	mxc_gpio_mode(PB30_PF_UART2_TXD);
+	mxc_gpio_mode(PB31_PF_UART2_RXD);
+	mxc_gpio_mode(PB28_PF_UART2_CTS);
+	mxc_gpio_mode(PB29_PF_UART2_RTS);
+
+#ifdef CONFIG_FB_IMX
+	apf9328_init_lcd();
+#endif
+#ifdef CONFIG_CAN_MCP251X
+	mcp251X_init_gpio();
+#endif
+#ifdef CONFIG_I2C
+	i2c_register_board_info(0,apf9328_i2c_devices_bus0,
+				ARRAY_SIZE(apf9328_i2c_devices_bus0));
+#endif
+#ifdef CONFIG_ARMADEUS_ISP1761
+	mxc_gpio_mode(ISP1761_GPIO_IRQ | GPIO_IN | GPIO_GPIO);
+	set_irq_type(ISP1761_IRQ, IRQF_TRIGGER_FALLING);
+#endif
+	platform_add_devices(devices, ARRAY_SIZE(devices));
+
+#if defined (CONFIG_SPI_TSC2102) || defined (CONFIG_CAN_MCP251X) || defined(CONFIG_SPI_SPIDEV)
+	mxc_gpio_mode(GPIO_PORTB | 19 | GPIO_GPIO | GPIO_OUT);
+	mxc_gpio_mode(GPIO_PORTB | 17 | GPIO_GPIO | GPIO_OUT);
+	spi_register_board_info(spi_dev_board_info, ARRAY_SIZE(spi_dev_board_info));
+#endif
+}
+
