Add APF51Dev baseboard support.

Signed-off-by: Julien Boibessot <julien.boibessot@armadeus.com>

Index: linux-2.6.38.8/arch/arm/mach-mx5/Kconfig
===================================================================
--- linux-2.6.38.8.orig/arch/arm/mach-mx5/Kconfig	2013-11-12 16:06:41.675233324 +0100
+++ linux-2.6.38.8/arch/arm/mach-mx5/Kconfig	2013-11-12 16:26:15.015570479 +0100
@@ -175,4 +175,27 @@
 	  Include support for Armadeus systems APF51 System On Module. This
 	  includes specific configurations for the board and its peripherals.
 
+config MACH_APF51_HAS_BASEBOARD
+	bool
+
+choice
+	prompt "Baseboard"
+	depends on MACH_APF51
+	default MACH_APF51_DEV
+
+config MACH_APF51_DEV
+	prompt "Armadeus systems APF51Dev development board"
+	bool
+	select MACH_APF51_HAS_BASEBOARD
+	select IMX_HAVE_PLATFORM_IMX_IPUV3
+	select IMX_HAVE_PLATFORM_SPI_IMX
+	select IMX_HAVE_PLATFORM_SDHCI_ESDHC_IMX
+	select IMX_HAVE_PLATFORM_IMX_SSI
+	select IMX_HAVE_PLATFORM_IMX_KEYPAD
+	select IMX_HAVE_PLATFORM_MXC_PWM
+	help
+	  This selects the APF51Dev as baseboard and adds board's specific
+	  devices.
+endchoice
+
 endif
Index: linux-2.6.38.8/arch/arm/mach-mx5/Makefile
===================================================================
--- linux-2.6.38.8.orig/arch/arm/mach-mx5/Makefile	2013-11-12 16:06:41.675233324 +0100
+++ linux-2.6.38.8/arch/arm/mach-mx5/Makefile	2013-11-12 16:26:15.015570479 +0100
@@ -8,6 +8,7 @@
 
 obj-$(CONFIG_CPU_FREQ_IMX)    += cpu_op-mx51.o
 obj-$(CONFIG_MACH_APF51) += board-apf51.o
+obj-$(CONFIG_MACH_APF51_DEV) += apf51dev-baseboard.o
 obj-$(CONFIG_MACH_MX51_BABBAGE) += board-mx51_babbage.o
 obj-$(CONFIG_MACH_MX51_3DS) += board-mx51_3ds.o
 obj-$(CONFIG_MACH_MX53_EVK) += board-mx53_evk.o
Index: linux-2.6.38.8/arch/arm/mach-mx5/apf51dev-baseboard.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-2.6.38.8/arch/arm/mach-mx5/apf51dev-baseboard.c	2013-11-12 16:27:44.145123084 +0100
@@ -0,0 +1,558 @@
+ /*
+ * Support for APF51's official development baseboard (APF51Dev)
+ *
+ * Copyright (C) 2011 Armadeus systems <support@armadeus.com>
+ *
+ * Based on code which is:
+ * Copyright 2009-2010 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright (C) 2009-2010 Amit Kucheria <amit.kucheria@canonical.com>
+ *
+ * The code contained herein is licensed under the GNU General Public
+ * License. You may obtain a copy of the GNU General Public License
+ * Version 2 or later at the following locations:
+ *
+ * http://www.opensource.org/licenses/gpl-license.html
+ * http://www.gnu.org/copyleft/gpl.html
+ */
+
+#include <linux/gpio.h>
+#include <linux/platform_device.h>
+#include <linux/gpio_keys.h>
+#include <linux/io.h>
+#include <linux/input.h>
+#include <linux/leds.h>
+#include <linux/spi/spi.h>
+#include <linux/spi/spidev.h>
+#include <linux/fb.h>
+#include <linux/mfd/imx-ipu-v3.h>
+#include <sound/wm8960.h>
+#include <linux/delay.h>
+#include <mach/iomux-mx51.h>
+#include <mach/ipu-v3.h>
+#include <mach/i2c.h>
+#include <mach/audmux.h>
+#include <mach/ssi.h>
+#include <linux/can/platform/mcp251x.h>
+
+#include "../../../drivers/staging/iio/dac/mcp49x2.h"
+#include "devices-imx51.h"
+#include "devices.h"
+#include "cpu_op-mx51.h"
+
+#define APF51_GPIO_SPECIAL_PAD_CTRL (PAD_CTL_DSE_HIGH | PAD_CTL_PKE | PAD_CTL_SRE_FAST | PAD_CTL_PUE)
+
+#define APF51_SDHCI_PAD_CTRL	(PAD_CTL_PKE | PAD_CTL_DSE_MED | \
+				PAD_CTL_PUS_47K_UP | PAD_CTL_PUE | \
+				PAD_CTL_SRE_FAST | PAD_CTL_DVS)
+
+#define APF51_LCD_PAD_CTRL (PAD_CTL_SRE_SLOW | PAD_CTL_DSE_MED)
+
+static iomux_v3_cfg_t apf51dev_pads[] = {
+	/* SD1 */
+	(_MX51_PAD_SD1_CMD__SD1_CMD | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD1_CLK__SD1_CLK | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD1_DATA0__SD1_DATA0 | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD1_DATA1__SD1_DATA1 | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD1_DATA2__SD1_DATA2 | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD1_DATA3__SD1_DATA3 | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_EIM_CS4__GPIO2_29 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),
+	/* write protection not used */
+	(_MX51_PAD_GPIO1_1__GPIO1_1 | MUX_PAD_CTRL(PAD_CTL_DSE_HIGH | PAD_CTL_PKE |
+						   PAD_CTL_SRE_FAST | PAD_CTL_PUE |
+						   PAD_CTL_PUS_100K_DOWN)),
+
+	/* SD2 (WiFi) */
+	(_MX51_PAD_SD2_CMD__SD2_CMD | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD2_CLK__SD2_CLK | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD2_DATA0__SD2_DATA0 | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD2_DATA1__SD2_DATA1 | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD2_DATA2__SD2_DATA2 | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+	(_MX51_PAD_SD2_DATA3__SD2_DATA3 | MUX_PAD_CTRL(APF51_SDHCI_PAD_CTRL)),
+
+	(_MX51_PAD_EIM_EB2__GPIO2_22 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)), /* WIFI_PWRDN# */
+	(_MX51_PAD_EIM_EB3__GPIO2_23 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)), /* WIFI_RESET# */
+
+#ifdef APF51DEV_PROTO
+	/* UART3 (Bluetooth) - Protos */
+	MX51_PAD_UART3_RXD__UART3_RXD,
+	MX51_PAD_UART3_TXD__UART3_TXD,
+	/* RTS/CTS on Keypad */
+#else
+	/* UART2 (Bluetooth) */
+	MX51_PAD_UART2_RXD__UART2_RXD,
+	MX51_PAD_UART2_TXD__UART2_TXD,
+	MX51_PAD_EIM_D25__UART2_CTS,
+	MX51_PAD_EIM_D26__UART2_RTS,
+#endif
+
+	(_MX51_PAD_EIM_CS3__GPIO2_28 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)), /* BT_RESET# */
+
+	/* UART1 */
+	MX51_PAD_UART1_RXD__UART1_RXD,
+	MX51_PAD_UART1_TXD__UART1_TXD,
+	MX51_PAD_UART1_RTS__UART1_RTS,
+	MX51_PAD_UART1_CTS__UART1_CTS,
+
+	/* eCSPI1 */
+	MX51_PAD_CSPI1_MISO__ECSPI1_MISO,
+	MX51_PAD_CSPI1_MOSI__ECSPI1_MOSI,
+	MX51_PAD_CSPI1_SCLK__ECSPI1_SCLK,
+	(_MX51_PAD_CSPI1_SS0__GPIO4_24 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),
+	(_MX51_PAD_CSPI1_SS1__GPIO4_25 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),
+	(_MX51_PAD_CSPI1_RDY__GPIO4_26 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)), /* LDAC for mcp4912 */
+
+	(_MX51_PAD_NANDF_D14__GPIO3_26 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),	/* ADC_SSTRB */
+
+	/* eCSPI2 */
+	MX51_PAD_NANDF_RB2__ECSPI2_SCLK,
+	MX51_PAD_NANDF_RB3__ECSPI2_MISO,
+	MX51_PAD_NANDF_D15__ECSPI2_MOSI,
+	(_MX51_PAD_NANDF_D12__GPIO3_28 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),	/* SS1 */
+	(_MX51_PAD_NANDF_D13__GPIO3_27 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),	/* SS2 */
+
+	(_MX51_PAD_NANDF_RB1__GPIO3_9 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),	/* CAN_INT# */
+
+	/* Display */
+	(_MX51_PAD_DISP1_DAT0__DISP1_DAT0 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT1__DISP1_DAT1 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT2__DISP1_DAT2 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT3__DISP1_DAT3 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT4__DISP1_DAT4 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT5__DISP1_DAT5 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT6__DISP1_DAT6 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT7__DISP1_DAT7 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT8__DISP1_DAT8 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT9__DISP1_DAT9 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT10__DISP1_DAT10 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT11__DISP1_DAT11 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT12__DISP1_DAT12 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT13__DISP1_DAT13 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT14__DISP1_DAT14 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT15__DISP1_DAT15 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT16__DISP1_DAT16 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT17__DISP1_DAT17 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT18__DISP1_DAT18 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT19__DISP1_DAT19 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT20__DISP1_DAT20 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT21__DISP1_DAT21 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT22__DISP1_DAT22 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DISP1_DAT23__DISP1_DAT23 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),
+	(_MX51_PAD_DI1_PIN2__DI1_PIN2 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),	/* HSYNC */
+	(_MX51_PAD_DI1_PIN3__DI1_PIN3 | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),	/* VSYNC */
+	(_MX51_PAD_DI1_D1_CS__DI1_D1_CS | MUX_PAD_CTRL(APF51_LCD_PAD_CTRL)),	/* CONTRAST */
+
+	/* SSI */
+	MX51_PAD_AUD3_BB_TXD__AUD3_TXD,
+	MX51_PAD_AUD3_BB_RXD__AUD3_RXD,
+	MX51_PAD_AUD3_BB_CK__AUD3_TXC,
+	MX51_PAD_AUD3_BB_FS__AUD3_TXFS,
+
+	/* KEYPAD */
+	MX51_PAD_KEY_ROW0__KEY_ROW0,
+	MX51_PAD_KEY_ROW1__KEY_ROW1,
+	MX51_PAD_KEY_ROW2__KEY_ROW2,
+	MX51_PAD_KEY_ROW3__KEY_ROW3,
+	MX51_PAD_KEY_COL0__KEY_COL0,
+	MX51_PAD_KEY_COL1__KEY_COL1,
+	MX51_PAD_KEY_COL2__KEY_COL2,
+	MX51_PAD_KEY_COL3__KEY_COL3,
+#ifdef APF51DEV_PROTO
+	MX51_PAD_KEY_COL4__UART3_RTS,
+	MX51_PAD_KEY_COL5__UART3_CTS,
+#else
+	MX51_PAD_KEY_COL4__KEY_COL4,
+	MX51_PAD_KEY_COL5__KEY_COL5,
+#endif
+
+	/* ONEWIRE */
+
+	/* LED */
+#ifdef APF51DEV_USE_LED_AS_PWM
+	MX51_PAD_GPIO1_2__PWM1_PWMO,
+#else
+	(_MX51_PAD_GPIO1_2__GPIO1_2 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),
+#endif
+	/* User switch */
+#ifdef APF51DEV_USE_SWITCH_AS_PWM
+	MX51_PAD_GPIO1_3__PWM2_PWMO,
+#else
+	(_MX51_PAD_GPIO1_3__GPIO1_3 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),
+#endif
+	/* Other GPIOs ! TBDL ! */
+	(_MX51_PAD_I2C1_CLK__GPIO4_16 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),	/* HDMI_RST# */
+	(_MX51_PAD_I2C1_DAT__GPIO4_17 | MUX_PAD_CTRL(APF51_GPIO_SPECIAL_PAD_CTRL)),	/* HDMI_DETECT */
+};
+
+/* Serial ports */
+static struct imxuart_platform_data apf51dev_uart_pdata = {
+	.flags = IMXUART_HAVE_RTSCTS,
+};
+
+/* APF51Proto has a LCD connector for a 18 bits 800x480 Chimei TFT LCD */
+static struct fb_videomode apf51dev_modes[] = {
+        {
+		.name 		= "Chimei-LW700AT9003",
+		.refresh 	= 60,
+		.xres 		= 800,
+		.yres 		= 480,
+		.pixclock 	= 30303, /* picoS */
+		.left_margin 	= 96, .right_margin = 96,
+		.upper_margin 	= 0x14, .lower_margin = 0x15,
+		.hsync_len 	= 64, .vsync_len = 4,
+		.sync 		= FB_SYNC_CLK_IDLE_EN,
+		.vmode 		= FB_VMODE_NONINTERLACED,
+		.flag 		= 0,
+        },
+};
+
+static struct ipuv3_fb_platform_data apf51dev_fb0_data = {
+	.interface_pix_fmt = IPU_PIX_FMT_RGB666,
+	.modes = apf51dev_modes,
+	.num_modes = ARRAY_SIZE(apf51dev_modes),
+	.display = 0,
+};
+
+static struct imx_ipuv3_platform_data apf51dev_ipu_data = {
+	.fb_head0_platform_data = &apf51dev_fb0_data,
+};
+
+/* ECSPI1 */
+#define APF51DEV_ECSPI1_SS0	IMX_GPIO_NR(4, 24)
+#define APF51DEV_ECSPI1_SS1	IMX_GPIO_NR(4, 25)
+
+static struct mcp49x2_config mcp4912_dat = {
+	.ldac_pin = IMX_GPIO_NR(4, 26), /* GPIO4-26 */
+	.vref_mv = {3100, 3100},
+};
+
+static struct spi_board_info apf51dev_spi1_board_info[] __initdata = {
+	{
+		.modalias = "as1531",
+		.max_speed_hz = 8000000,
+		.bus_num = 0,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.platform_data = NULL,
+	},
+	{
+		.modalias = "mcp4912",
+		.max_speed_hz = 8000000,
+		.bus_num = 0,
+		.chip_select = 1,
+		.mode = SPI_MODE_0,
+		.platform_data = &mcp4912_dat,
+	},
+};
+
+static int apf51dev_spi1_cs[] = {
+	APF51DEV_ECSPI1_SS0,
+	APF51DEV_ECSPI1_SS1,
+};
+
+static const struct spi_imx_master apf51dev_spi1_pdata __initconst = {
+	.chipselect     = apf51dev_spi1_cs,
+	.num_chipselect = ARRAY_SIZE(apf51dev_spi1_cs),
+};
+
+
+/* CAN */
+#define CAN_MCP251X_INT IMX_GPIO_NR(3, 9)
+
+static struct mcp251x_platform_data mcp251x_info = {
+         .oscillator_frequency =  16000000,
+         .board_specific_setup =NULL,
+         .power_enable = NULL,
+         .transceiver_enable = NULL,
+};
+
+/* ECSPI2 */
+#define APF51DEV_ECSPI2_SS1	IMX_GPIO_NR(3, 28)
+#define APF51DEV_ECSPI2_SS2	IMX_GPIO_NR(3, 27)
+
+static struct spidev_platform_data spidev_platdata = {
+	.init = NULL,
+};
+
+static struct spi_board_info apf51dev_spi2_board_info[] = {
+	{
+		.modalias = "mcp2515",
+		.max_speed_hz = 8000000,
+		.bus_num = 1,
+		.chip_select = 0,
+		.mode = SPI_MODE_0,
+		.platform_data = &mcp251x_info,
+		.irq = gpio_to_irq(CAN_MCP251X_INT),
+	},
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 8000000,
+		.bus_num = 1,
+		.chip_select = 1,
+		.mode = SPI_MODE_0,
+		.platform_data = &spidev_platdata,
+	},
+};
+
+static int apf51dev_spi2_cs[] = {
+	APF51DEV_ECSPI2_SS1,
+	APF51DEV_ECSPI2_SS2,
+};
+
+static const struct spi_imx_master apf51dev_spi2_pdata __initconst = {
+	.chipselect     = apf51dev_spi2_cs,
+	.num_chipselect = ARRAY_SIZE(apf51dev_spi2_cs),
+};
+
+
+/* Audio (Wolfson WM8960 connected to I2C & SSI) */
+static struct wm8960_data apf51dev_wm8960_pdata = {
+	.capless = 0, /* Headphone outputs NOT configured in capless mode */
+	.shared_lrclk = 1,
+	.use_alrcgpio = 1,
+};
+
+static struct imx_ssi_platform_data apf51dev_ssi0_pdata = {
+	.flags = IMX_SSI_SYN | IMX_SSI_USE_I2S_SLAVE,
+};
+
+/* I2C2 */
+static struct i2c_board_info apf51dev_i2c2_devices[] __initdata = {
+	{
+		I2C_BOARD_INFO("tfp410", 0x38),
+	},
+	{
+	/* EDID */
+		I2C_BOARD_INFO("eeprom", 0x50),
+	},
+	{
+		I2C_BOARD_INFO("wm8960", 0x1a),
+		.platform_data = &apf51dev_wm8960_pdata,
+	},
+#if 0
+	{
+	/* Camera */
+	},
+#endif
+};
+
+#define ESDHC_CARD_DETECT	(GPIO_PORTB | 29)
+static struct esdhc_platform_data edshc0_pdata = {
+	.cd_gpio = ESDHC_CARD_DETECT,	/* card detect pin */
+};
+
+static struct esdhc_platform_data edshc1_pdata = {
+	.no_sdio_irq = 1,	/* Temporary ! (for Wi2Wi) */
+};
+
+#if defined(CONFIG_KEYBOARD_GPIO) || defined(CONFIG_KEYBOARD_GPIO_MODULE)
+static struct gpio_keys_button apf51dev_gpio_keys[] = {
+	{
+		.gpio		= IMX_GPIO_NR(1, 3),
+		.code		= BTN_EXTRA, /* See include/linux/input.h */
+		.desc		= "user",
+		.active_low	= 1,
+		.wakeup		= 1,
+	},
+};
+
+static struct gpio_keys_platform_data apf51dev_gpio_keys_data = {
+	.buttons	= apf51dev_gpio_keys,
+	.nbuttons	= ARRAY_SIZE(apf51dev_gpio_keys),
+};
+
+static struct platform_device apf51dev_gpio_keys_device = {
+	.name = "gpio-keys",
+	.id = -1,
+	.dev = {
+		.platform_data = &apf51dev_gpio_keys_data,
+	},
+};
+#endif /* CONFIG_KEYBOARD_GPIO */
+
+#if defined(CONFIG_LEDS_GPIO) || defined(CONFIG_LEDS_GPIO_MODULE)
+static struct gpio_led apf51dev_led[] = {
+	{
+		.name = "apfdev:green:user",
+		.default_trigger = "heartbeat",
+		.gpio = (GPIO_PORTA | 2),
+		.active_low = 0,
+	},
+};
+
+static struct gpio_led_platform_data apf51dev_led_data = {
+	.num_leds	= ARRAY_SIZE(apf51dev_led),
+	.leds		= apf51dev_led
+};
+
+static struct platform_device apf51dev_led_dev = {
+	.name		= "leds-gpio",
+	.id		= -1,
+	.dev		= {
+		.platform_data	= &apf51dev_led_data,
+	},
+};
+#endif /* CONFIG_LEDS_GPIO */
+
+static int init_gpio(void)
+{
+#define USER_LED_GPIO		(GPIO_PORTA | 2)
+#define WIFI_PWRDN 		(GPIO_PORTB | 22)
+#define WIFI_RESET 		(GPIO_PORTB | 23)
+#define BT_RESET 		(GPIO_PORTB | 28)
+#define HDMI_DETECT_GPIO	(GPIO_PORTD | 17)
+
+	int ret;
+
+	/* WIFI */
+	ret = gpio_request(WIFI_PWRDN, "WIFI");
+	if (ret) {
+		pr_warn("failed to get WIFI_PWRDN GPIO: %d\n", ret);
+		return ret;
+	}
+	ret = gpio_request(WIFI_RESET, "WIFI");
+	if (ret) {
+		pr_warn("failed to get WIFI_RESET GPIO: %d\n", ret);
+		return ret;
+	}
+	gpio_direction_output(WIFI_PWRDN, 1);
+	udelay(1000);
+	gpio_direction_output(WIFI_RESET, 1);
+
+	/* BT */
+	ret = gpio_request(BT_RESET, "BT");
+	if (ret) {
+		pr_warn("failed to get BT_RESET GPIO: %d\n", ret);
+		return ret;
+	}
+	gpio_direction_output(BT_RESET, 1);
+
+	/* USER */
+	ret = gpio_request(USER_LED_GPIO, "USER_LED_GPIO");
+	if (ret) {
+		pr_warn("failed to get User LED GPIO: %d\n", ret);
+		return ret;
+	}
+	gpio_direction_output(USER_LED_GPIO, 1);
+	gpio_free(USER_LED_GPIO);
+
+	/* HDMI */
+	ret = gpio_request(HDMI_DETECT_GPIO, "HDMI_DETECT_GPIO");
+	if (ret) {
+		pr_warn("failed to get HDMI detect GPIO: %d\n", ret);
+		return ret;
+	}
+	gpio_direction_input(HDMI_DETECT_GPIO);
+
+	return 0;
+}
+
+#if defined(CONFIG_KEYBOARD_IMX) || defined(CONFIG_KEYBOARD_IMX_MODULE)
+static int apf51dev_keymap[] = {
+	KEY(0, 0, KEY_1),
+	KEY(0, 1, KEY_2),
+	KEY(0, 2, KEY_3),
+	KEY(0, 3, KEY_F1),
+	KEY(0, 4, KEY_UP),
+	KEY(0, 5, KEY_F2),
+
+	KEY(1, 0, KEY_4),
+	KEY(1, 1, KEY_5),
+	KEY(1, 2, KEY_6),
+	KEY(1, 3, KEY_LEFT),
+	KEY(1, 4, KEY_SELECT),
+	KEY(1, 5, KEY_RIGHT),
+
+	KEY(2, 0, KEY_7),
+	KEY(2, 1, KEY_8),
+	KEY(2, 2, KEY_9),
+	KEY(2, 3, KEY_F3),
+	KEY(2, 4, KEY_DOWN),
+	KEY(2, 5, KEY_F4),
+
+	KEY(3, 0, KEY_0),
+	KEY(3, 1, KEY_OK),
+	KEY(3, 2, KEY_ESC),
+	KEY(3, 3, KEY_ENTER),
+	KEY(3, 4, KEY_MENU),
+	KEY(3, 5, KEY_BACK)
+};
+
+static const struct matrix_keymap_data apf51dev_keymap_data __initconst = {
+	.keymap		= apf51dev_keymap,
+	.keymap_size	= ARRAY_SIZE(apf51dev_keymap),
+};
+#endif
+
+static struct platform_device *platform_devices[] __initdata = {
+#if defined(CONFIG_LEDS_GPIO) || defined(CONFIG_LEDS_GPIO_MODULE)
+	&apf51dev_led_dev,
+#endif
+#if defined(CONFIG_KEYBOARD_GPIO) || defined(CONFIG_KEYBOARD_GPIO_MODULE)
+	&apf51dev_gpio_keys_device,
+#endif
+};
+
+
+void __init apf51_baseboard_init(void)
+{
+#if defined(CONFIG_CPU_FREQ_IMX)
+	get_cpu_op = mx51_get_cpu_op;
+#endif
+
+	mxc_iomux_v3_setup_multiple_pads(apf51dev_pads,
+					ARRAY_SIZE(apf51dev_pads));
+
+	imx51_add_imx_uart(0, &apf51dev_uart_pdata);
+#ifdef APF51DEV_PROTO
+	imx51_add_imx_uart(2, &apf51dev_uart_pdata);
+#else
+	imx51_add_imx_uart(1, &apf51dev_uart_pdata);
+#endif
+
+	init_gpio();
+
+	imx51_add_sdhci_esdhc_imx(0, &edshc0_pdata);
+	imx51_add_sdhci_esdhc_imx(1, &edshc1_pdata);
+
+	spi_register_board_info(apf51dev_spi1_board_info,
+				ARRAY_SIZE(apf51dev_spi1_board_info));
+	imx51_add_ecspi(0, &apf51dev_spi1_pdata);
+
+	spi_register_board_info(apf51dev_spi2_board_info,
+				ARRAY_SIZE(apf51dev_spi2_board_info));
+	imx51_add_ecspi(1, &apf51dev_spi2_pdata);
+
+	/* I2C2 already initialized by APF51, so just register devices */
+	i2c_register_board_info(1, apf51dev_i2c2_devices,
+				ARRAY_SIZE(apf51dev_i2c2_devices));
+
+	imx51_add_ipuv3(&apf51dev_ipu_data);
+
+	/* AUDMUX Port 1 (SSI1/imx-ssi.0)) <-> Port3 */
+	mxc_audmux_v2_configure_port(MX51_AUDMUX_PORT3,
+			MXC_AUDMUX_V2_PTCR_SYN,
+			MXC_AUDMUX_V2_PDCR_RXDSEL(MX51_AUDMUX_PORT1_SSI0));
+
+	mxc_audmux_v2_configure_port(MX51_AUDMUX_PORT1_SSI0,
+			MXC_AUDMUX_V2_PTCR_TFSDIR |
+			MXC_AUDMUX_V2_PTCR_TFSEL(MX51_AUDMUX_PORT3) |
+			MXC_AUDMUX_V2_PTCR_TCLKDIR |
+			MXC_AUDMUX_V2_PTCR_TCSEL(MX51_AUDMUX_PORT3) |
+			MXC_AUDMUX_V2_PTCR_SYN,
+			MXC_AUDMUX_V2_PDCR_RXDSEL(MX51_AUDMUX_PORT3));
+
+	imx51_add_imx_ssi(0, &apf51dev_ssi0_pdata);
+
+#if defined(CONFIG_KEYBOARD_IMX) || defined(CONFIG_KEYBOARD_IMX_MODULE)
+	imx51_add_imx_keypad(&apf51dev_keymap_data);
+#endif
+#ifdef APF51DEV_USE_LED_AS_PWM
+	imx51_add_mxc_pwm(0);
+#endif
+#ifdef APF51DEV_USE_SWITCH_AS_PWM
+	imx51_add_mxc_pwm(1);
+#endif
+
+	platform_add_devices(platform_devices, ARRAY_SIZE(platform_devices));
+
+}
