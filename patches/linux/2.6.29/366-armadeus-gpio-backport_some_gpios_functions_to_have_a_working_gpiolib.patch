Makes mxc_gpio_direction_output() actually configure pin as GPIO.
(backport from 2.6.38)

Signed-off-by: Julien Boibessot <julien.boibessot@armadeus.com>

Index: linux-2.6.29.6/arch/arm/plat-mxc/gpio.c
===================================================================
--- linux-2.6.29.6.orig/arch/arm/plat-mxc/gpio.c	2011-06-22 09:59:15.000000000 +0200
+++ linux-2.6.29.6/arch/arm/plat-mxc/gpio.c	2011-06-22 10:04:31.000000000 +0200
@@ -29,6 +29,12 @@
 static struct mxc_gpio_port *mxc_gpio_ports;
 static int gpio_table_size;
 
+#if defined(CONFIG_ARCH_MX2) || defined(CONFIG_ARCH_MX1)
+# define GPIO_OCR1	0x04
+# define GPIO_OCR2	0x08
+# define GPIO_GIUS	0x20
+#endif
+
 /* Note: This driver assumes 32 GPIOs are handled in one register */
 
 static void _clear_gpio_irqstatus(struct mxc_gpio_port *port, u32 index)
@@ -247,8 +253,32 @@
 static int mxc_gpio_direction_output(struct gpio_chip *chip,
 				     unsigned offset, int value)
 {
-	_set_gpio_direction(chip, offset, 1);
+	struct mxc_gpio_port *port =
+		container_of(chip, struct mxc_gpio_port, chip);
+	void __iomem *reg_ocr1 = port->base + GPIO_OCR1;
+	void __iomem *reg_ocr2 = port->base + GPIO_OCR2;
+	void __iomem *reg_gius = port->base + GPIO_GIUS;
+	u32 ocr1;
+	u32 ocr2;
+	u32 gius;
+
+	/* select DR mux */
+	ocr1 = __raw_readl(reg_ocr1);
+	ocr2 = __raw_readl(reg_ocr2);
+	if (offset < 16) {
+		ocr1 = ocr1 | (3 << (offset*2));
+		__raw_writel(ocr1, reg_ocr1);
+	} else {
+		ocr2 = ocr2 | (3 << ((offset-16)*2));
+		__raw_writel(ocr2, reg_ocr2);
+	}
+	/* set GIUS */
+	gius = __raw_readl(reg_gius);
+	gius = gius | (1 << (offset));
+	__raw_writel(gius, reg_gius);
+
 	mxc_gpio_set(chip, offset, value);
+	_set_gpio_direction(chip, offset, 1);
 	return 0;
 }
 
