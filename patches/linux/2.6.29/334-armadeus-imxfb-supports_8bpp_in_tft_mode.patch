
When configured with a TFT LCD interface i.MX(1/2) LCD controller can support
16, 12, 8 & 4bpp framebuffers with the same hardware interface (12 to 16 bits).
So if userspace app wants a 8bpp screen, we switch to 8bpp. This can save 
ressources (mem + proc), when using SDL for example.

Signed-off-by: Julien Boibessot <julien.boibessot@armadeus.com>

Index: linux-2.6.29.4/arch/arm/mach-imx/include/mach/imxfb.h
===================================================================
--- linux-2.6.29.4.orig/arch/arm/mach-imx/include/mach/imxfb.h	2009-06-04 10:38:07.000000000 +0200
+++ linux-2.6.29.4/arch/arm/mach-imx/include/mach/imxfb.h	2009-06-04 10:38:09.000000000 +0200
@@ -14,6 +14,7 @@
 #define PCR_BPIX_8	(3 << 25)
 #define PCR_BPIX_12	(4 << 25)
 #define PCR_BPIX_16	(4 << 25)
+#define PCR_BPIX_MASK	(7 << 25)
 #define PCR_PIXPOL	(1 << 24)
 #define PCR_FLMPOL	(1 << 23)
 #define PCR_LPPOL	(1 << 22)
Index: linux-2.6.29.4/arch/arm/plat-mxc/include/mach/imxfb.h
===================================================================
--- linux-2.6.29.4.orig/arch/arm/plat-mxc/include/mach/imxfb.h	2009-06-04 10:38:09.000000000 +0200
+++ linux-2.6.29.4/arch/arm/plat-mxc/include/mach/imxfb.h	2009-06-04 10:38:09.000000000 +0200
@@ -19,6 +19,7 @@
 #define PCR_BPIX_16	(5 << 25)
 #define PCR_BPIX_18	(6 << 25)
 #endif
+#define PCR_BPIX_MASK	(7 << 25)
 #define PCR_PIXPOL	(1 << 24)
 #define PCR_FLMPOL	(1 << 23)
 #define PCR_LPPOL	(1 << 22)
Index: linux-2.6.29.4/drivers/video/imxfb.c
===================================================================
--- linux-2.6.29.4.orig/drivers/video/imxfb.c	2009-06-04 10:38:09.000000000 +0200
+++ linux-2.6.29.4/drivers/video/imxfb.c	2009-06-04 10:38:47.000000000 +0200
@@ -528,7 +528,17 @@
 	/* add sync polarities */
 	pcr |= fbi->pcr & ~0x3F;
 
-	writel(pcr, fbi->regs + LCDC_PCR);
+	/* i.MX LCD controller can support 8bpp even if configured to output 16 bits (TFT) */
+	if ((var->bits_per_pixel == 8) && (fbi->pcr & PCR_TFT)) {
+		pr_debug("Switching imxfb to 8bpp\n");
+		writel((pcr & (~PCR_BPIX_MASK)) |
+			PCR_BPIX_8 |
+			PCR_END_BYTE_SWAP,
+			fbi->regs + LCDC_PCR);
+	} else {
+		writel(pcr, fbi->regs + LCDC_PCR);
+	}
+	writel(VPW_VPW(var->xres * var->bits_per_pixel / 8 / 4), fbi->regs + LCDC_VPW);
 
 	return 0;
 }
