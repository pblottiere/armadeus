From: Juergen Beisert <j.beisert@pengutronix.de>
Date: Tue, 9 Sep 2008 09:33:11 +0000 (+0200)
Subject: MX2: Devices support
X-Git-Url: http://pasiphae.extern.pengutronix.de/?p=imx%2Flinux-2.6.git;a=commitdiff_plain;h=811abf1605b252b49477ae9adb718ad2720ed7ef;hp=1c56cf17faa6f97274933f9f74634dff4acf04d0

MX2: Devices support

This patch expands the known devices on i.MX21/i.MX27 procesors.

New devices are:

 - spi
 - i2c
 - ssi
 - watchdog
 - framebuffer
 - camera

Note: This is for development. Not for mainline yet.

Signed-off-by: Juergen Beisert <j.beisert@pengutronix.de>
Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
---

diff --git a/arch/arm/plat-mxc/include/mach/imx_watchdog.h b/arch/arm/plat-mxc/include/mach/imx_watchdog.h
new file mode 100644
index 0000000..ab87889
--- /dev/null
+++ b/arch/arm/plat-mxc/include/mach/imx_watchdog.h
@@ -0,0 +1,44 @@
+/*
+ * imx_watchdog.h
+ *
+ * Copyright (C) 2008 Juergen Beisert (kernel@pengutronix.de)
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+/*
+ * Watchdog register definition for:
+ * - i.MX21
+ * - i.MX27
+ */
+
+/* for direct access, note: All registers are 16 bit wide */
+#define IMX_WCR_REG(x)	(*(volatile unsigned short __force*)(x))
+#define IMX_WSR_REG(x)	(*(volatile unsigned short __force*)((x) + 2))
+#define IMX_WRSR_REG(x)	(*(volatile unsigned short __force*)((x) + 4))
+
+/* for drivers usage */
+#define IMX_WCR 0
+#define IMX_WSR 2
+#define IMX_WRSR 4
+
+/* Bit definitions */
+#define IMX_WCR_WT_SHIFT	8
+#define IMX_WCR_WT_MASK		0xFF00
+#define IMX_WCR_WDA		(1<<5)
+#define IMX_WCR_SRS		(1<<4)
+#define IMX_WCR_WRE		(1<<3)
+#define IMX_WCR_WDE		(1<<2)
+#define IMX_WCR_WDBG		(1<<1)
+#define IMX_WCR_WDZST		(1<<0)
diff --git a/arch/arm/mach-mx2/devices.c b/arch/arm/mach-mx2/devices.c
index a0ee8d2..0207be3 100644
--- a/arch/arm/mach-mx2/devices.c
+++ b/arch/arm/mach-mx2/devices.c
@@ -58,6 +58,112 @@ struct platform_device mxc_irda_device = {
 	.resource = mxc_irda_resources,
 };
 
+/* Platform Data for MXC VPU */
+struct platform_device mxc_vpu_device = {
+	.name = "mxc_vpu",
+	.id = 0,
+};
+
+#ifdef CONFIG_MACH_MX27
+static struct resource mx27_camera_resources[] = {
+	{
+	       .start = CSI_BASE_ADDR,
+	       .end = CSI_BASE_ADDR + 0x1f,
+	       .flags = IORESOURCE_MEM,
+	}, {
+	       .start = EMMA_PRP_BASE_ADDR,
+	       .end = EMMA_PRP_BASE_ADDR + 0x1f,
+	       .flags = IORESOURCE_MEM,
+	}, {
+	       .start = MXC_INT_CSI,
+	       .end = MXC_INT_CSI,
+	       .flags = IORESOURCE_IRQ,
+	},{
+	       .start = MXC_INT_EMMAPRP,
+	       .end = MXC_INT_EMMAPRP,
+	       .flags = IORESOURCE_IRQ,
+	},
+};
+
+struct platform_device mx27_camera_device = {
+	.name = "mx27-camera",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(mx27_camera_resources),
+	.resource = mx27_camera_resources,
+};
+#endif
+
+/*
+ * SPI master controller
+ *
+ * - i.MX1: 2 channel (slighly different register setting)
+ * - i.MX21: 2 channel
+ * - i.MX27: 3 channel
+ */
+static struct resource mxc_spi_resources0[] = {
+	[0] = {
+	       .start = CSPI1_BASE_ADDR,
+	       .end = CSPI1_BASE_ADDR + 0x1F,
+	       .flags = IORESOURCE_MEM,
+	},
+	[1] = {
+	       .start = MXC_INT_CSPI1,
+	       .end = MXC_INT_CSPI1,
+	       .flags = IORESOURCE_IRQ,
+	},
+};
+
+static struct resource mxc_spi_resources1[] = {
+	[0] = {
+		.start = CSPI2_BASE_ADDR,
+		.end = CSPI2_BASE_ADDR + SZ_4K - 1,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = MXC_INT_CSPI2,
+		.end = MXC_INT_CSPI2,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+
+#ifdef CONFIG_MACH_MX27
+static struct resource mxc_spi_resources2[] = {
+	[0] = {
+		.start = CSPI3_BASE_ADDR,
+		.end = CSPI3_BASE_ADDR + SZ_4K - 1,
+		.flags = IORESOURCE_MEM,
+	},
+	[1] = {
+		.start = MXC_INT_CSPI3,
+		.end = MXC_INT_CSPI3,
+		.flags = IORESOURCE_IRQ,
+	},
+};
+#endif
+
+struct platform_device mxc_spi_device0 = {
+	.name = "mxc_spi",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(mxc_spi_resources0),
+	.resource = mxc_spi_resources0,
+};
+
+struct platform_device mxc_spi_device1 = {
+	.name = "mxc_spi",
+	.id = 1,
+	.num_resources = ARRAY_SIZE(mxc_spi_resources1),
+	.resource = mxc_spi_resources1,
+};
+
+#ifdef CONFIG_MACH_MX27
+struct platform_device mxc_spi_device2 = {
+	.name = "mxc_spi",
+	.id = 2,
+	.num_resources = ARRAY_SIZE(mxc_spi_resources2),
+	.resource = mxc_spi_resources2,
+};
+#endif
+
 /*
  * General Purpose Timer
  * - i.MX1: 2 timer (slighly different register handling)
@@ -169,6 +275,51 @@ struct platform_device mxc_gpt5 = {
 };
 #endif
 
+/* I2C channel #1 */
+static struct resource imx_i2c_1_resources[] = {
+	[0] = {
+		.start	= I2C_BASE_ADDR,
+		.end	= I2C_BASE_ADDR + 0x0F,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= MXC_INT_I2C,
+		.end	= MXC_INT_I2C,
+		.flags	= IORESOURCE_IRQ
+	}
+};
+
+#ifdef CONFIG_MACH_MX27
+static struct resource imx_i2c_2_resources[] = {
+	[0] = {
+		.start	= I2C2_BASE_ADDR,
+		.end	= I2C2_BASE_ADDR + 0x0F,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= MXC_INT_I2C2,
+		.end	= MXC_INT_I2C2,
+		.flags	= IORESOURCE_IRQ
+	}
+};
+#endif
+
+struct platform_device imx_i2c_device0 = {
+	.name = "imx_i2c",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(imx_i2c_1_resources),
+	.resource = imx_i2c_1_resources
+};
+
+#ifdef CONFIG_MACH_MX27
+struct platform_device imx_i2c_device1 = {
+	.name = "imx_i2c",
+	.id = 1,
+	.num_resources = ARRAY_SIZE(imx_i2c_2_resources),
+	.resource = imx_i2c_2_resources
+};
+#endif
+
 /*
  * Watchdog:
  * - i.MX1
@@ -209,6 +360,143 @@ struct platform_device mxc_nand_device = {
 	.resource = mxc_nand_resources,
 };
 
+/*
+ * lcdc:
+ * - i.MX1: the basic controller
+ * - i.MX21: to be checked
+ * - i.MX27: like i.MX1, with slightly variations
+ */
+static struct resource mxc_fb[] = {
+	{
+		.start = LCDC_BASE_ADDR,
+		.end   = LCDC_BASE_ADDR + 0xFFF,
+		.flags = IORESOURCE_MEM,
+	},
+	{
+		.start = MXC_INT_LCDC,
+		.end   = MXC_INT_LCDC,
+		.flags = IORESOURCE_IRQ,
+	}
+};
+
+/* mxc lcd driver */
+struct platform_device mxc_fb_device = {
+	.name = "imx-fb",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(mxc_fb),
+	.resource = mxc_fb,
+	.dev = {
+		.coherent_dma_mask = 0xFFFFFFFF,
+	},
+};
+
+/*
+ * SSI bus:
+ * - i.MX1: 2 channels
+ * - i.MX21: 2 channels
+ * - i.MX27: 2 channels
+ */
+static struct resource imx_ssi_resources0[] = {
+	[0] = {
+		.start	= SSI1_BASE_ADDR,
+		.end	= SSI1_BASE_ADDR + 0x6F,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= MXC_INT_SSI1,
+		.end	= MXC_INT_SSI1,
+		.flags	= IORESOURCE_IRQ
+	},
+	[2] = {
+		.name	= "tx0",
+		.start	= DMA_REQ_SSI1_TX0,
+		.end	= DMA_REQ_SSI1_TX0,
+		.flags	= IORESOURCE_DMA
+	},
+	[3] = {
+		.name	= "rx0",
+		.start	= DMA_REQ_SSI1_RX0,
+		.end	= DMA_REQ_SSI1_RX0,
+		.flags	= IORESOURCE_DMA
+	},
+	[4] = {
+		.name	= "tx1",
+		.start	= DMA_REQ_SSI1_TX1,
+		.end	= DMA_REQ_SSI1_TX1,
+		.flags	= IORESOURCE_DMA
+	},
+	[5] = {
+		.name	= "rx1",
+		.start	= DMA_REQ_SSI1_RX1,
+		.end	= DMA_REQ_SSI1_RX1,
+		.flags	= IORESOURCE_DMA
+	}
+};
+
+static struct resource imx_ssi_resources1[] = {
+	[0] = {
+		.start	= SSI2_BASE_ADDR,
+		.end	= SSI2_BASE_ADDR + 0x6F,
+		.flags	= IORESOURCE_MEM
+	},
+	[1] = {
+		.start	= MXC_INT_SSI2,
+		.end	= MXC_INT_SSI2,
+		.flags	= IORESOURCE_IRQ
+	},
+	[2] = {
+		.name	= "tx0",
+		.start	= DMA_REQ_SSI2_TX0,
+		.end	= DMA_REQ_SSI2_TX0,
+		.flags	= IORESOURCE_DMA
+	},
+	[3] = {
+		.name	= "rx0",
+		.start	= DMA_REQ_SSI2_RX0,
+		.end	= DMA_REQ_SSI2_RX0,
+		.flags	= IORESOURCE_DMA
+	},
+	[4] = {
+		.name	= "tx1",
+		.start	= DMA_REQ_SSI2_TX1,
+		.end	= DMA_REQ_SSI2_TX1,
+		.flags	= IORESOURCE_DMA
+	},
+	[5] = {
+		.name	= "rx1",
+		.start	= DMA_REQ_SSI2_RX1,
+		.end	= DMA_REQ_SSI2_RX1,
+		.flags	= IORESOURCE_DMA
+	}
+};
+
+struct platform_device imx_ssi_device0 = {
+	.name = "mxc-ssi",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(imx_ssi_resources0),
+	.resource = imx_ssi_resources0
+};
+
+struct platform_device imx_ssi_device1 = {
+	.name = "mxc-ssi",
+	.id = 1,
+	.num_resources = ARRAY_SIZE(imx_ssi_resources1),
+	.resource = imx_ssi_resources1
+};
+
+static struct resource mxc_dam_resources = {
+	.start	= AUDMUX_BASE_ADDR,
+	.end	= AUDMUX_BASE_ADDR + 0x1F,
+	.flags	= IORESOURCE_MEM
+};
+
+struct platform_device mxc_dam_device = {
+	.name = "mxc-dam",
+	.id = 0,
+	.num_resources = 1,
+	.resource = &mxc_dam_resources
+};
+
 /* GPIO port description */
 static struct mxc_gpio_port imx_gpio_ports[] = {
 	[0] = {
diff --git a/arch/arm/mach-mx2/devices.h b/arch/arm/mach-mx2/devices.h
index 6ab616e..a49c772 100644
--- a/arch/arm/mach-mx2/devices.h
+++ b/arch/arm/mach-mx2/devices.h
@@ -13,3 +13,14 @@ extern struct platform_device mxc_uart_device3;
 extern struct platform_device mxc_uart_device4;
 extern struct platform_device mxc_uart_device5;
 extern struct platform_device mxc_nand_device;
+extern struct platform_device mxc_vpu_device;
+extern struct platform_device mx27_camera_device;
+extern struct platform_device mxc_spi_device0;
+extern struct platform_device mxc_spi_device1;
+extern struct platform_device mxc_spi_device2;
+extern struct platform_device imx_i2c_device0;
+extern struct platform_device imx_i2c_device1;
+extern struct platform_device mxc_fb_device;
+extern struct platform_device imx_ssi_device0;
+extern struct platform_device imx_ssi_device1;
+extern struct platform_device mxc_dam_device;
diff --git a/arch/arm/plat-mxc/include/mach/imx_i2c.h b/arch/arm/plat-mxc/include/mach/imx_i2c.h
new file mode 100644
index 0000000..905499e
--- /dev/null
+++ b/arch/arm/plat-mxc/include/mach/imx_i2c.h
@@ -0,0 +1,81 @@
+/*
+ * Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2008 Juergen Beisert, kernel@pengutronix.de
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#ifndef __ASM_ARCH_MXC_I2C_H__
+#define __ASM_ARCH_MXC_I2C_H__
+
+struct imx_i2c_platform_data {
+	u32 max_clk;
+	int (*init)(struct platform_device *pdev);
+	int (*exit)(struct platform_device *pdev);
+};
+
+/*
+ * This file contains the I2C chip level configuration details.
+ *
+ * It also contains the API function that other drivers can use to read/write
+ * to the I2C device registers.
+ */
+
+/*
+ * This defines the string used to identify MXC I2C Bus drivers
+ */
+#define MXC_ADAPTER_NAME        "MXC I2C Adapter"
+
+#define MXC_I2C_FLAG_READ	0x01	/* if set, is read; else is write */
+#define MXC_I2C_FLAG_POLLING	0x02	/* if set, is polling mode; else is interrupt mode */
+
+int mxc_i2c_read(int bus_id, unsigned int addr, char *reg, int reg_len,
+		 char *buf, int num);
+
+int mxc_i2c_write(int bus_id, unsigned int addr, char *reg, int reg_len,
+		  char *buf, int num);
+
+int mxc_i2c_polling_read(int bus_id, unsigned int addr, char *reg, int reg_len,
+			 char *buf, int num);
+
+int mxc_i2c_polling_write(int bus_id, unsigned int addr, char *reg, int reg_len,
+			  char *buf, int num);
+
+/* FIXME: This should be in a generic register file */
+
+/* Address offsets of the I2C registers */
+#define MXC_IADR                0x00	/* Address Register */
+#define MXC_IFDR                0x04	/* Freq div register */
+#define MXC_I2CR                0x08	/* Control regsiter */
+#define MXC_I2SR                0x0C	/* Status register */
+#define MXC_I2DR                0x10	/* Data I/O register */
+
+/* Bit definitions of I2CR */
+#define MXC_I2CR_IEN            0x0080
+#define MXC_I2CR_IIEN           0x0040
+#define MXC_I2CR_MSTA           0x0020
+#define MXC_I2CR_MTX            0x0010
+#define MXC_I2CR_TXAK           0x0008
+#define MXC_I2CR_RSTA           0x0004
+
+/* Bit definitions of I2SR */
+#define MXC_I2SR_ICF            0x0080
+#define MXC_I2SR_IAAS           0x0040
+#define MXC_I2SR_IBB            0x0020
+#define MXC_I2SR_IAL            0x0010
+#define MXC_I2SR_SRW            0x0004
+#define MXC_I2SR_IIF            0x0002
+#define MXC_I2SR_RXAK           0x0001
+
+#endif /* __ASM_ARCH_MXC_I2C_H__ */
diff --git a/arch/arm/plat-mxc/include/mach/imx_spi.h b/arch/arm/plat-mxc/include/mach/imx_spi.h
new file mode 100644
index 0000000..684bf7c
--- /dev/null
+++ b/arch/arm/plat-mxc/include/mach/imx_spi.h
@@ -0,0 +1,220 @@
+/*
+ * Copyright 2004-2007 Freescale Semiconductor, Inc. All Rights Reserved.
+ * Copyright 2008 Juergen Beisert, kernel@pengutronix.de
+ * Copyright 2008 Luotao Fu, kernel@pengutronix.de
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; either version 2
+ * of the License, or (at your option) any later version.
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
+ */
+
+#ifndef __MXC_SPI_MX27_H__
+#define __MXC_SPI_MX27_H__
+
+#include <mach/hardware.h>
+#include <asm/mach-types.h>
+
+/*
+ * This structure is used to define the SPI master controller's platform
+ * data. It includes the SPI  bus number and the maximum number of
+ * slaves/chips it supports.
+ */
+struct mxc_spi_master {
+	unsigned int bus_num;		/* bus number. */
+	unsigned int maxchipselect;	/* number of chip selects. */
+	unsigned int spi_version;	/* CSPI Hardware Version. */
+
+	int (*init)(struct platform_device *pdev);
+	int (*exit)(struct platform_device *pdev);
+};
+
+/* Register definitions.
+ * XXX: The ifdef CONFIG_ARCH_MX2 segments are merged from the
+ * freescale mxc_spi_mx27.h. This is actually highly strange, since according
+ * to the processor reference manuals the spi controllers on mx27 and mx31 are
+ * identical. We might want to clearify this after chatting with freescale on
+ * this issue */
+
+#define MXC_CSPIRXDATA		0x00
+#define MXC_CSPITXDATA		0x04
+#define MXC_CSPICTRL		0x08
+#define MXC_CSPIINT		0x0C
+
+#ifdef CONFIG_ARCH_MX2
+#define MXC_CSPIDMA		0x18
+#define MXC_CSPISTAT		0x0C
+#define MXC_CSPIPERIOD		0x14
+#define MXC_CSPITEST		0x10
+#define MXC_CSPIRESET		0x1C
+#define MXC_CSPICTRL_ENABLE	(1 << 10)
+#else
+#define MXC_CSPIDMA		0x10
+#define MXC_CSPISTAT		0x14
+#define MXC_CSPIPERIOD		0x18
+#define MXC_CSPITEST		0x1C
+#define MXC_CSPIRESET		0x00
+#define MXC_CSPICTRL_ENABLE	0x1
+#endif
+
+#define MXC_CSPICTRL_DISABLE	0x0
+
+#ifdef CONFIG_ARCH_MX2
+#define MXC_CSPICTRL_MASTER	(1 << 11)
+#else
+#define MXC_CSPICTRL_MASTER	(1 << 1)
+#endif
+
+#define MXC_CSPICTRL_SLAVE	0x0
+
+#ifdef CONFIG_ARCH_MX2
+#define MXC_CSPICTRL_XCH	(1 << 9)
+#define MXC_CSPICTRL_LOWPOL	(1 << 5)
+#else
+#define MXC_CSPICTRL_XCH	(1 << 2)
+#define MXC_CSPICTRL_SMC	(1 << 3)
+#define MXC_CSPICTRL_LOWPOL	(1 << 4)
+#endif
+
+#define MXC_CSPICTRL_HIGHPOL	0x0
+
+#ifdef CONFIG_ARCH_MX2
+#define MXC_CSPICTRL_PHA	(1 << 6)
+#else
+#define MXC_CSPICTRL_PHA	(1 << 5)
+#endif
+
+#define MXC_CSPICTRL_NOPHA	0x0
+
+#ifdef CONFIG_ARCH_MX2
+#define MXC_CSPICTRL_SSCTL	(1 << 7)
+#define MXC_CSPICTRL_HIGHSSPOL 	(1 << 8)
+#else
+#define MXC_CSPICTRL_SSCTL	(1 << 6)
+#define MXC_CSPICTRL_HIGHSSPOL 	(1 << 7)
+#endif
+
+#define MXC_CSPICTRL_LOWSSPOL	0x0
+#define MXC_CSPICTRL_CSMASK	0x3
+
+#ifdef CONFIG_ARCH_MX2
+#define MXC_CSPICTRL_MAXDATRATE	0x10
+#define MXC_CSPICTRL_DATAMASK	0x1F
+#define MXC_CSPICTRL_DATASHIFT 	14
+/* This adjustment in the shift is valid only for even states only(i.e. divide
+   ratio of 2). SDHC_SPIEN is not set by default. If SDHC_SPIEN bit is set in
+   MXC_CSPICTRL, then divide ratio is 3, this shift adjustment is invalid. */
+#define MXC_CSPICTRL_ADJUST_SHIFT(x) ((x) = ((x) - 1) * 2)
+#else
+#define MXC_CSPICTRL_MAXDATRATE	0x7
+#define MXC_CSPICTRL_DATAMASK	0x7
+#define MXC_CSPICTRL_DATASHIFT 	16
+#define MXC_CSPICTRL_ADJUST_SHIFT(x) ((x) -= 2)
+#endif
+
+#define MXC_CSPICTRL_CSSHIFT_0_7	12
+#define MXC_CSPICTRL_BCSHIFT_0_7	20
+#define MXC_CSPICTRL_BCMASK_0_7		0xFFF
+#define MXC_CSPICTRL_DRCTRLSHIFT_0_7	8
+
+#define MXC_CSPICTRL_CSSHIFT_0_5	12
+#define MXC_CSPICTRL_BCSHIFT_0_5	20
+#define MXC_CSPICTRL_BCMASK_0_5		0xFFF
+#define MXC_CSPICTRL_DRCTRLSHIFT_0_5	8
+
+#define MXC_CSPICTRL_CSSHIFT_0_4	24
+#define MXC_CSPICTRL_BCSHIFT_0_4	8
+#define MXC_CSPICTRL_BCMASK_0_4		0x1F
+#define MXC_CSPICTRL_DRCTRLSHIFT_0_4	20
+
+#define MXC_CSPICTRL_CSSHIFT_0_0	19
+#define MXC_CSPICTRL_BCSHIFT_0_0	0
+#define MXC_CSPICTRL_BCMASK_0_0		0x1F
+#define MXC_CSPICTRL_DRCTRLSHIFT_0_0	12
+
+#define MXC_CSPIINT_IRQSHIFT_0_7	8
+#define MXC_CSPIINT_IRQSHIFT_0_5	9
+#define MXC_CSPIINT_IRQSHIFT_0_4	9
+#define MXC_CSPIINT_IRQSHIFT_0_0	18
+
+#ifdef CONFIG_ARCH_MX2
+#define MXC_CSPIINT_TEEN	(1 << 9)
+#define MXC_CSPIINT_THEN	(1 << 10)
+#define MXC_CSPIINT_TFEN	(1 << 11)
+#define MXC_CSPIINT_RREN	(1 << 13)
+#define MXC_CSPIINT_RHEN        (1 << 14)
+#define MXC_CSPIINT_RFEN        (1 << 15)
+#define MXC_CSPIINT_ROEN        (1 << 16)
+#else
+#define MXC_CSPIINT_TEEN	(1 << 0)
+#define MXC_CSPIINT_THEN	(1 << 1)
+#define MXC_CSPIINT_TFEN	(1 << 2)
+#define MXC_CSPIINT_RREN	(1 << 3)
+#define MXC_CSPIINT_RHEN        (1 << 4)
+#define MXC_CSPIINT_RFEN        (1 << 5)
+#define MXC_CSPIINT_ROEN        (1 << 6)
+#endif
+
+#define MXC_CSPIINT_TCEN_0_7	(1 << 7)
+#define MXC_CSPIINT_TCEN_0_5	(1 << 8)
+#define MXC_CSPIINT_TCEN_0_4	(1 << 8)
+
+#ifdef CONFIG_ARCH_MX2
+#define MXC_CSPIINT_TCEN_0_0	(1 << 12)
+#else
+#define MXC_CSPIINT_TCEN_0_0	(1 << 3)
+#endif
+
+#define MXC_CSPIINT_BOEN_0_7	0
+#define MXC_CSPIINT_BOEN_0_5	(1 << 7)
+#define MXC_CSPIINT_BOEN_0_4	(1 << 7)
+
+#ifdef CONFIG_ARCH_MX2
+#define MXC_CSPIINT_BOEN_0_0	(1 << 17)
+#else
+#define MXC_CSPIINT_BOEN_0_0	(1 << 8)
+#endif
+
+#define MXC_CSPISTAT_TE		(1 << 0)
+#define MXC_CSPISTAT_TH		(1 << 1)
+#define MXC_CSPISTAT_TF		(1 << 2)
+#define MXC_CSPISTAT_RR		(1 << 3)
+#define MXC_CSPISTAT_RH         (1 << 4)
+#define MXC_CSPISTAT_RF         (1 << 5)
+#define MXC_CSPISTAT_RO         (1 << 6)
+#define MXC_CSPISTAT_TC_0_7	(1 << 7)
+#define MXC_CSPISTAT_TC_0_5	(1 << 8)
+#define MXC_CSPISTAT_TC_0_4	(1 << 8)
+#define MXC_CSPISTAT_TC_0_0	(1 << 3)
+#define MXC_CSPISTAT_BO_0_7	0
+#define MXC_CSPISTAT_BO_0_5	(1 << 7)
+#define MXC_CSPISTAT_BO_0_4	(1 << 7)
+#define MXC_CSPISTAT_BO_0_0	(1 << 8)
+
+#define MXC_CSPIPERIOD_32KHZ	(1 << 15)
+
+#define MXC_CSPITEST_LBC	(1 << 14)
+
+/*
+ * This structure contains information that differs with
+ * SPI master controller hardware version
+ */
+struct mxc_spi_unique_def {
+	unsigned int intr_bit_shift;	/* Width of valid bits in MXC_CSPIINT. */
+	unsigned int cs_shift;	/* Chip Select shift. */
+	unsigned int bc_shift;	/* Bit count shift. */
+	unsigned int bc_mask;	/* Bit count mask. */
+	unsigned int drctrl_shift;	/* Data Control shift. */
+	unsigned int xfer_complete;	/* Transfer Complete shift. */
+	unsigned int bc_overflow;	/* Bit counnter overflow shift. */
+};
+
+#endif /*__MXC_SPI_MX27_H__ */
