Makes spi_imx driver:
* handle platform initialisation of GPIOs
* support i.MX27 (no DMA)

Signed-off-by: Nicolas Colombain <nicolas.colombain@armadeus.com>
Signed-off-by: Julien Boibessot <julien.boibessot@armadeus.com>

Index: linux-2.6.29.6/arch/arm/mach-imx/include/mach/spi_imx.h
===================================================================
--- linux-2.6.29.6.orig/arch/arm/mach-imx/include/mach/spi_imx.h	2010-06-07 11:54:25.000000000 +0200
+++ linux-2.6.29.6/arch/arm/mach-imx/include/mach/spi_imx.h	2010-06-07 11:54:44.000000000 +0200
@@ -38,6 +38,8 @@
 struct spi_imx_master {
 	u8 num_chipselect;
 	u8 enable_dma:1;
+	int (*init)(struct platform_device *pdev);
+	int (*exit)(struct platform_device *pdev);
 };
 /*-------------------------------------------------------------------------*/
 
Index: linux-2.6.29.6/drivers/spi/spi_imx.c
===================================================================
--- linux-2.6.29.6.orig/drivers/spi/spi_imx.c	2010-06-07 11:54:25.000000000 +0200
+++ linux-2.6.29.6/drivers/spi/spi_imx.c	2010-06-07 11:56:06.000000000 +0200
@@ -36,8 +36,13 @@
 #include <asm/delay.h>
 
 #include <mach/hardware.h>
+#ifndef CONFIG_ARCH_MX2  /* to remove when i.MX1 will be part of plat-mxc */
 #include <mach/imx-dma.h>
 #include <mach/spi_imx.h>
+#else
+#include <../mach-imx/include/mach/spi_imx.h>
+#endif
+
 
 /*-------------------------------------------------------------------------*/
 /* SPI Registers offsets from peripheral base address */
@@ -50,38 +55,77 @@
 #define SPI_DMA			(0x18)
 #define SPI_RESET		(0x1C)
 
-/* SPI Control Register Bit Fields & Masks */
+
+#ifdef CONFIG_ARCH_MX2
+
+#define SPI_CONTROL_BITCOUNT_MASK	(0x1F)		/* Bit Count Mask */
+#define SPI_CONTROL_POL_SHIFT		(5)
+#define SPI_CONTROL_PHA_SHIFT		(6)
+#define SPI_CONTROL_SSCTL_SHIFT		(7)
+#define SPI_CONTROL_SSPOL_SHIFT		(8)
+#define SPI_CONTROL_XCH			(0x1 << 9)	/* Exchange */
+#define SPI_CONTROL_SPIEN		(0x1 << 10)	/* SPI Module Enable */
+#define SPI_CONTROL_MODE_SHIFT		(11)
+#define SPI_CONTROL_DRCTL_SHIFT		(12)
+#define SPI_CONTROL_DATARATE_SHIFT	(14)
+/* Data Rate */
+#define SPI_CONTROL_DATARATE		(0x1f << (SPI_CONTROL_DATARATE_SHIFT))
+#define SPI_CLOCK_DIV_MIN		(1)		/* PERCLK2 / 3 */
+#define SPI_CLOCK_DIV_MAX		(0x10)		/* PERCLK2 /512 */
+/* First entry is reserved, second entry is valid only if SDHC_SPIEN is set
+ * (which is currently not the case in this driver)
+ */
+static int mxc_clkdivs[] = {0, 3, 4, 6, 8, 12, 16, 24, 32, 48, 64, 96, 128, 192,
+	256, 384, 512};
+
+/* SPI Interrupt/Status Register Bit Fields & Masks */
+#define SPI_STATUS_TE	(0x1 << 0)	/* TXFIFO Empty Status */
+#define SPI_STATUS_TH	(0x1 << 1)      /* TXFIFO Half Status */
+#define SPI_STATUS_TF	(0x1 << 2)      /* TXFIFO Full Status */
+#define SPI_STATUS_TSHFE	(0x1 << 3)
+#define SPI_STATUS_RR	(0x1 << 4)      /* RXFIFO Data Ready Status */
+#define SPI_STATUS_RH	(0x1 << 5)      /* RXFIFO Half Status */
+#define SPI_STATUS_RF	(0x1 << 6)      /* RXFIFO Full Status */
+#define SPI_STATUS_RO	(0x1 << 7)      /* RXFIFO Overflow */
+#define SPI_STATUS_BO	(0x1 << 8)      /* Bit Count Overflow */
+#define SPI_STATUS	(0x1FF)		/* SPI Status Mask */
+#define SPI_INTEN_TE	(0x1 << 9)      /* TXFIFO Empty Interrupt Enable */
+#define SPI_INTEN_TH	(0x1 << 10)      /* TXFIFO Half Interrupt Enable */
+#define SPI_INTEN_TF	(0x1 << 11)     /* TXFIFO Full Interrupt Enable */
+#define SPI_INTEN_TSHFE	(0x1 << 12)
+#define SPI_INTEN_RE	(0x1 << 13)     /* RXFIFO Data Ready Interrupt Enable */
+#define SPI_INTEN_RH	(0x1 << 14)     /* RXFIFO Half Interrupt Enable */
+#define SPI_INTEN_RF	(0x1 << 15)     /* RXFIFO Full Interrupt Enable */
+#define SPI_INTEN_RO	(0x1 << 16)     /* RXFIFO Overflow Interrupt Enable */
+#define SPI_INTEN_BO	(0x1 << 17)     /* Bit Count Overflow Interrupt Enable */
+#define SPI_INTEN	(0x1FF << 9)	/* SPI Interrupt Enable Mask */
+
+#define SPI_CONTROL_BURST		(0x1 << 23)
+
+/* This adjustment in the shift is valid only for even states only(i.e. divide
+   ratio of 2). SDHC_SPIEN is not set by default. If SDHC_SPIEN bit is set in
+   MXC_CSPICTRL, then divide ratio is 3, this shift adjustment is invalid. */
+#define SPI_CONTROL_DATARATE_ADJUST_SHIFT(x) ((x) = ((x) - 1) * 2)
+
+#define SPI_MASTER_CLOCK_NAME  "cspi_clk"
+
+#else
+
 #define SPI_CONTROL_BITCOUNT_MASK	(0xF)		/* Bit Count Mask */
-#define SPI_CONTROL_BITCOUNT(n)		(((n) - 1) & SPI_CONTROL_BITCOUNT_MASK)
-#define SPI_CONTROL_POL			(0x1 << 4)      /* Clock Polarity Mask */
-#define SPI_CONTROL_POL_ACT_HIGH	(0x0 << 4)      /* Active high pol. (0=idle) */
-#define SPI_CONTROL_POL_ACT_LOW		(0x1 << 4)      /* Active low pol. (1=idle) */
-#define SPI_CONTROL_PHA			(0x1 << 5)      /* Clock Phase Mask */
-#define SPI_CONTROL_PHA_0		(0x0 << 5)      /* Clock Phase 0 */
-#define SPI_CONTROL_PHA_1		(0x1 << 5)      /* Clock Phase 1 */
-#define SPI_CONTROL_SSCTL		(0x1 << 6)      /* /SS Waveform Select Mask */
-#define SPI_CONTROL_SSCTL_0		(0x0 << 6)      /* Master: /SS stays low between SPI burst
-							   Slave: RXFIFO advanced by BIT_COUNT */
-#define SPI_CONTROL_SSCTL_1		(0x1 << 6)      /* Master: /SS insert pulse between SPI burst
-							   Slave: RXFIFO advanced by /SS rising edge */
-#define SPI_CONTROL_SSPOL		(0x1 << 7)      /* /SS Polarity Select Mask */
-#define SPI_CONTROL_SSPOL_ACT_LOW	(0x0 << 7)      /* /SS Active low */
-#define SPI_CONTROL_SSPOL_ACT_HIGH	(0x1 << 7)      /* /SS Active high */
+#define SPI_CONTROL_POL_SHIFT		(4)
+#define SPI_CONTROL_PHA_SHIFT		(5)
+#define SPI_CONTROL_SSCTL_SHIFT		(6)
+#define SPI_CONTROL_SSPOL_SHIFT		(7)
 #define SPI_CONTROL_XCH			(0x1 << 8)      /* Exchange */
 #define SPI_CONTROL_SPIEN		(0x1 << 9)      /* SPI Module Enable */
-#define SPI_CONTROL_MODE		(0x1 << 10)     /* SPI Mode Select Mask */
-#define SPI_CONTROL_MODE_SLAVE		(0x0 << 10)     /* SPI Mode Slave */
-#define SPI_CONTROL_MODE_MASTER		(0x1 << 10)     /* SPI Mode Master */
-#define SPI_CONTROL_DRCTL		(0x3 << 11)     /* /SPI_RDY Control Mask */
-#define SPI_CONTROL_DRCTL_0		(0x0 << 11)     /* Ignore /SPI_RDY */
-#define SPI_CONTROL_DRCTL_1		(0x1 << 11)     /* /SPI_RDY falling edge triggers input */
-#define SPI_CONTROL_DRCTL_2		(0x2 << 11)     /* /SPI_RDY active low level triggers input */
+#define SPI_CONTROL_MODE_SHIFT		(10)
+#define SPI_CONTROL_DRCTL_SHIFT		(11)
+/* Data Rate */
 #define SPI_CONTROL_DATARATE		(0x7 << 13)     /* Data Rate Mask */
-#define SPI_PERCLK2_DIV_MIN		(0)		/* PERCLK2:4 */
-#define SPI_PERCLK2_DIV_MAX		(7)		/* PERCLK2:512 */
-#define SPI_CONTROL_DATARATE_MIN	(SPI_PERCLK2_DIV_MAX << 13)
-#define SPI_CONTROL_DATARATE_MAX	(SPI_PERCLK2_DIV_MIN << 13)
-#define SPI_CONTROL_DATARATE_BAD	(SPI_CONTROL_DATARATE_MIN + 1)
+#define SPI_CLOCK_DIV_MIN		(0)		/* PERCLK2 / 4 */
+#define SPI_CLOCK_DIV_MAX		(7)		/* PERCLK2 / 512 */
+#define SPI_CONTROL_DATARATE_SHIFT	(13)
+static int mxc_clkdivs[] = {4, 8, 16, 32, 64, 128, 256, 512};
 
 /* SPI Interrupt/Status Register Bit Fields & Masks */
 #define SPI_STATUS_TE	(0x1 << 0)	/* TXFIFO Empty Status */
@@ -103,6 +147,54 @@
 #define SPI_INTEN_BO	(0x1 << 15)     /* Bit Count Overflow Interrupt Enable */
 #define SPI_INTEN	(0xFF << 8)	/* SPI Interrupt Enable Mask */
 
+#define SPI_MASTER_CLOCK_NAME		"perclk2"
+
+#endif /* CONFIG_ARCH_MX2 */
+
+/* SPI Control Register Bit Fields & Masks */
+#define SPI_CONTROL_BITCOUNT(n)		(((n) - 1) & SPI_CONTROL_BITCOUNT_MASK)
+/* Clock Polarity Mask */
+#define SPI_CONTROL_POL			(0x1 << SPI_CONTROL_POL_SHIFT)
+/* Active high pol. (0=idle) */
+#define SPI_CONTROL_POL_ACT_HIGH	(0x0 << SPI_CONTROL_POL_SHIFT)
+/* Active low pol. (1=idle) */
+#define SPI_CONTROL_POL_ACT_LOW		(0x1 << SPI_CONTROL_POL_SHIFT)
+/* Clock Phase Mask */
+#define SPI_CONTROL_PHA			(0x1 << SPI_CONTROL_PHA_SHIFT)
+/* Clock Phase 0 */
+#define SPI_CONTROL_PHA_0		(0x0 << SPI_CONTROL_PHA_SHIFT)
+/* Clock Phase 1 */
+#define SPI_CONTROL_PHA_1		(0x1 << SPI_CONTROL_PHA_SHIFT)
+/* /SS Waveform Select Mask */
+#define SPI_CONTROL_SSCTL		(0x1 << SPI_CONTROL_SSCTL_SHIFT)
+/* Master: /SS stays low between SPI burst Slave: RXFIFO advanced by BIT_COUNT */
+#define SPI_CONTROL_SSCTL_0		(0x0 << SPI_CONTROL_SSCTL_SHIFT)
+/* Master: /SS insert pulse between SPI burst Slave: RXFIFO advanced by /SS rising edge */
+#define SPI_CONTROL_SSCTL_1		(0x1 << SPI_CONTROL_SSCTL_SHIFT)
+/* /SS Polarity Select Mask */
+#define SPI_CONTROL_SSPOL		(0x1 << SPI_CONTROL_SSPOL_SHIFT)
+/* /SS Active low */
+#define SPI_CONTROL_SSPOL_ACT_LOW	(0x0 << SPI_CONTROL_SSPOL_SHIFT)
+/* /SS Active high */
+#define SPI_CONTROL_SSPOL_ACT_HIGH	(0x1 << SPI_CONTROL_SSPOL_SHIFT)
+/* SPI Mode Select Mask */
+#define SPI_CONTROL_MODE		(0x1 << SPI_CONTROL_MODE_SHIFT)
+/* SPI Mode Slave */
+#define SPI_CONTROL_MODE_SLAVE		(0x0 << SPI_CONTROL_MODE_SHIFT)
+/* SPI Mode Master */
+#define SPI_CONTROL_MODE_MASTER		(0x1 << SPI_CONTROL_MODE_SHIFT)
+/* /SPI_RDY Control Mask */
+#define SPI_CONTROL_DRCTL		(0x3 << SPI_CONTROL_DRCTL_SHIFT)
+/* Ignore /SPI_RDY */
+#define SPI_CONTROL_DRCTL_0		(0x0 << SPI_CONTROL_DRCTL_SHIFT)
+/* /SPI_RDY falling edge triggers input */
+#define SPI_CONTROL_DRCTL_1		(0x1 << SPI_CONTROL_DRCTL_SHIFT)
+/* /SPI_RDY active low level triggers input */
+#define SPI_CONTROL_DRCTL_2		(0x2 << SPI_CONTROL_DRCTL_SHIFT)
+#define SPI_CONTROL_DATARATE_BAD	(SPI_CONTROL_DATARATE_MIN + 1)
+#define SPI_CONTROL_DATARATE_MIN	(SPI_CLOCK_DIV_MAX << SPI_CONTROL_DATARATE_SHIFT)
+#define SPI_CONTROL_DATARATE_MAX	(SPI_CLOCK_DIV_MIN << SPI_CONTROL_DATARATE_SHIFT)
+
 /* SPI Test Register Bit Fields & Masks */
 #define SPI_TEST_TXCNT		(0xF << 0)	/* TXFIFO Counter */
 #define SPI_TEST_RXCNT_LSB	(4)		/* RXFIFO Counter LSB */
@@ -134,6 +226,20 @@
 #define SPI_RESET_START	(0x1)		/* Start */
 
 /* Default SPI configuration values */
+#ifdef CONFIG_ARCH_MX2
+#define SPI_DEFAULT_CONTROL		\
+(					\
+	SPI_CONTROL_BITCOUNT(16) | 	\
+	SPI_CONTROL_POL_ACT_HIGH |	\
+	SPI_CONTROL_PHA_0 |		\
+	SPI_CONTROL_SPIEN |		\
+	SPI_CONTROL_SSCTL_1 |		\
+	SPI_CONTROL_MODE_MASTER |	\
+	SPI_CONTROL_DRCTL_0 |		\
+	SPI_CONTROL_BURST | 		\
+	SPI_CONTROL_DATARATE_MIN	\
+)
+#else
 #define SPI_DEFAULT_CONTROL		\
 (					\
 	SPI_CONTROL_BITCOUNT(16) | 	\
@@ -145,6 +251,7 @@
 	SPI_CONTROL_DRCTL_0 |		\
 	SPI_CONTROL_DATARATE_MIN	\
 )
+#endif /* CONFIG_ARCH_MX2 */
 #define SPI_DEFAULT_ENABLE_LOOPBACK	(0)
 #define SPI_DEFAULT_ENABLE_DMA		(0)
 #define SPI_DEFAULT_PERIOD_WAIT		(8)
@@ -154,7 +261,11 @@
 /*-------------------------------------------------------------------------*/
 /* TX/RX SPI FIFO size */
 #define SPI_FIFO_DEPTH			(8)
+#ifdef CONFIG_ARCH_MX2
+#define SPI_FIFO_BYTE_WIDTH		(4)
+#else
 #define SPI_FIFO_BYTE_WIDTH		(2)
+#endif
 #define SPI_FIFO_OVERFLOW_MARGIN	(2)
 
 /* DMA burst length for half full/empty request trigger */
@@ -332,19 +443,17 @@
 	void *tx = drv_data->tx;
 	void *tx_end = drv_data->tx_end;
 	u8 n_bytes = drv_data->n_bytes;
-	u32 remaining_writes;
 	u32 fifo_avail_space;
 	u32 n;
 	u16 d;
 
 	/* Compute how many fifo writes to do */
-	remaining_writes = (u32)(tx_end - tx) / n_bytes;
 	fifo_avail_space = SPI_FIFO_DEPTH -
 				(readl(regs + SPI_TEST) & SPI_TEST_TXCNT);
 	if (drv_data->rx && (fifo_avail_space > SPI_FIFO_OVERFLOW_MARGIN))
 		/* Fix misunderstood receive overflow */
 		fifo_avail_space -= SPI_FIFO_OVERFLOW_MARGIN;
-	n = min(remaining_writes, fifo_avail_space);
+	n = min(data_to_write(drv_data), fifo_avail_space);
 
 	dev_dbg(&drv_data->pdev->dev,
 		"write type %s\n"
@@ -352,7 +461,7 @@
 		"    fifo avail space = %d\n"
 		"    fifo writes      = %d\n",
 		(n_bytes == 1) ? "u8" : "u16",
-		remaining_writes,
+		data_to_write(drv_data),
 		fifo_avail_space,
 		n);
 
@@ -395,16 +504,14 @@
 	void *rx = drv_data->rx;
 	void *rx_end = drv_data->rx_end;
 	u8 n_bytes = drv_data->n_bytes;
-	u32 remaining_reads;
 	u32 fifo_rxcnt;
 	u32 n;
 	u16 d;
 
 	/* Compute how many fifo reads to do */
-	remaining_reads = (u32)(rx_end - rx) / n_bytes;
 	fifo_rxcnt = (readl(regs + SPI_TEST) & SPI_TEST_RXCNT) >>
 			SPI_TEST_RXCNT_LSB;
-	n = min(remaining_reads, fifo_rxcnt);
+	n = min(data_to_read(drv_data), fifo_rxcnt);
 
 	dev_dbg(&drv_data->pdev->dev,
 		"read type %s\n"
@@ -412,7 +519,7 @@
 		"    fifo rx count   = %d\n"
 		"    fifo reads      = %d\n",
 		(n_bytes == 1) ? "u8" : "u16",
-		remaining_reads,
+		data_to_read(drv_data),
 		fifo_rxcnt,
 		n);
 
@@ -456,6 +563,30 @@
 	return DONE_STATE;
 }
 
+/* Caller already set message->status (dma is already blocked) */
+static void giveback(struct spi_message *message, struct driver_data *drv_data)
+{
+	void __iomem *regs = drv_data->regs;
+
+	/* Bring SPI to sleep; restore_state() and pump_transfer()
+	   will do new setup */
+	writel(0, regs + SPI_INT_STATUS);
+	writel(0, regs + SPI_DMA);
+
+	/* Unconditioned deselct */
+	drv_data->cs_control(SPI_CS_DEASSERT);
+
+	message->state = NULL;
+	if (message->complete)
+		message->complete(message->context);
+
+	drv_data->cur_msg = NULL;
+	drv_data->cur_transfer = NULL;
+	drv_data->cur_chip = NULL;
+	queue_work(drv_data->workqueue, &drv_data->work);
+}
+
+#ifndef CONFIG_ARCH_MX2
 static int map_dma_buffers(struct driver_data *drv_data)
 {
 	struct spi_message *msg;
@@ -568,29 +699,6 @@
 	}
 }
 
-/* Caller already set message->status (dma is already blocked) */
-static void giveback(struct spi_message *message, struct driver_data *drv_data)
-{
-	void __iomem *regs = drv_data->regs;
-
-	/* Bring SPI to sleep; restore_state() and pump_transfer()
-	   will do new setup */
-	writel(0, regs + SPI_INT_STATUS);
-	writel(0, regs + SPI_DMA);
-
-	/* Unconditioned deselct */
-	drv_data->cs_control(SPI_CS_DEASSERT);
-
-	message->state = NULL;
-	if (message->complete)
-		message->complete(message->context);
-
-	drv_data->cur_msg = NULL;
-	drv_data->cur_transfer = NULL;
-	drv_data->cur_chip = NULL;
-	queue_work(drv_data->workqueue, &drv_data->work);
-}
-
 static void dma_err_handler(int channel, void *data, int errcode)
 {
 	struct driver_data *drv_data = data;
@@ -695,6 +803,7 @@
 	/* Opps problem detected */
 	return IRQ_NONE;
 }
+#endif
 
 static irqreturn_t interrupt_wronly_transfer(struct driver_data *drv_data)
 {
@@ -858,21 +967,26 @@
 
 static inline u32 spi_speed_hz(struct driver_data *drv_data, u32 data_rate)
 {
-	return clk_get_rate(drv_data->clk) / (4 << ((data_rate) >> 13));
+	u32 res;
+	int index;
+
+	index = ((data_rate & SPI_CONTROL_DATARATE) >> SPI_CONTROL_DATARATE_SHIFT);
+	res = clk_get_rate(drv_data->clk) / mxc_clkdivs[index];
+
+	return res;
 }
 
 static u32 spi_data_rate(struct driver_data *drv_data, u32 speed_hz)
 {
 	u32 div;
-	u32 quantized_hz = clk_get_rate(drv_data->clk) >> 2;
+	u32 perclk2 = clk_get_rate(drv_data->clk);
 
-	for (div = SPI_PERCLK2_DIV_MIN;
-		div <= SPI_PERCLK2_DIV_MAX;
-		div++, quantized_hz >>= 1) {
-			if (quantized_hz <= speed_hz)
-				/* Max available speed LEQ required speed */
-				return div << 13;
+	for (div = SPI_CLOCK_DIV_MIN; div <= SPI_CLOCK_DIV_MAX; div++) {
+		if (perclk2/(mxc_clkdivs[div]) <= speed_hz) {
+			return div << SPI_CONTROL_DATARATE_SHIFT;
+		}
 	}
+
 	return SPI_CONTROL_DATARATE_BAD;
 }
 
@@ -956,6 +1070,7 @@
 	/* Assert device chip-select */
 	drv_data->cs_control(SPI_CS_ASSERT);
 
+#ifndef CONFIG_ARCH_MX2
 	/* DMA cannot read/write SPI FIFOs other than 16 bits at a time; hence
 	   if bits_per_word is less or equal 8 PIO transfers are performed.
 	   Moreover DMA is convinient for transfer length bigger than FIFOs
@@ -1034,7 +1149,9 @@
 			writel(SPI_DMA_THDEN, regs + SPI_DMA);
 
 		imx_dma_enable(drv_data->tx_channel);
-	} else {
+	} else
+#endif
+     {
 		dev_dbg(&drv_data->pdev->dev,
 			"pump pio transfer\n"
 			"    tx      = %p\n"
@@ -1487,7 +1604,7 @@
 
 	drv_data->dummy_dma_buf = SPI_DUMMY_u32;
 
-	drv_data->clk = clk_get(&pdev->dev, "perclk2");
+	drv_data->clk = clk_get(&pdev->dev, SPI_MASTER_CLOCK_NAME);
 	if (IS_ERR(drv_data->clk)) {
 		dev_err(&pdev->dev, "probe - cannot get clock\n");
 		status = PTR_ERR(drv_data->clk);
@@ -1495,6 +1612,10 @@
 	}
 	clk_enable(drv_data->clk);
 
+	/* Setup any GPIO active */
+	if (platform_info->init)
+		platform_info->init(pdev);
+
 	/* Find and map resources */
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!res) {
@@ -1516,7 +1637,6 @@
 		status = -ENXIO;
 		goto err_no_iomap;
 	}
-	drv_data->rd_data_phys = (dma_addr_t)res->start;
 
 	/* Attach to IRQ */
 	irq = platform_get_irq(pdev, 0);
@@ -1531,6 +1651,8 @@
 		goto err_no_irqres;
 	}
 
+#ifndef CONFIG_ARCH_MX2
+	drv_data->rd_data_phys = (dma_addr_t)res->start;
 	/* Setup DMA if requested */
 	drv_data->tx_channel = -1;
 	drv_data->rx_channel = -1;
@@ -1583,7 +1705,7 @@
 		BLR(drv_data->rx_channel) = SPI_DMA_BLR;
 		BLR(drv_data->tx_channel) = SPI_DMA_BLR;
 	}
-
+#endif
 	/* Load default SPI configuration */
 	writel(SPI_RESET_START, drv_data->regs + SPI_RESET);
 	writel(0, drv_data->regs + SPI_RESET);
@@ -1617,9 +1739,11 @@
 err_spi_register:
 	destroy_queue(drv_data);
 
+#ifndef CONFIG_ARCH_MX2
 err_no_rxdma:
 err_no_txdma:
 err_no_devid:
+#endif
 	free_irq(irq, drv_data);
 
 err_no_irqres:
@@ -1632,6 +1756,8 @@
 err_no_iores:
 	clk_disable(drv_data->clk);
 	clk_put(drv_data->clk);
+	if (platform_info->exit)
+		platform_info->exit(pdev);
 
 err_no_clk:
 	spi_master_put(master);
@@ -1646,6 +1772,8 @@
 	struct driver_data *drv_data = platform_get_drvdata(pdev);
 	int irq;
 	int status = 0;
+	struct spi_imx_master *platform_info =
+			(struct spi_imx_master *)pdev->dev.platform_data;
 
 	if (!drv_data)
 		return 0;
@@ -1658,11 +1786,14 @@
 		dev_err(&pdev->dev, "queue remove failed (%d)\n", status);
 		return status;
 	}
+	if (platform_info->exit)
+		platform_info->exit(pdev);
 
 	/* Reset SPI */
 	writel(SPI_RESET_START, drv_data->regs + SPI_RESET);
 	writel(0, drv_data->regs + SPI_RESET);
 
+#ifndef CONFIG_ARCH_MX2
 	/* Release DMA */
 	if (drv_data->master_info->enable_dma) {
 		RSSR(drv_data->rx_channel) = 0;
@@ -1670,7 +1801,7 @@
 		imx_dma_free(drv_data->tx_channel);
 		imx_dma_free(drv_data->rx_channel);
 	}
-
+#endif
 	/* Release IRQ */
 	irq = platform_get_irq(pdev, 0);
 	if (irq >= 0)
@@ -1713,14 +1844,19 @@
 {
 	struct driver_data *drv_data = platform_get_drvdata(pdev);
 	int status = 0;
+	struct spi_imx_master *platform_info =
+			(struct spi_imx_master *)pdev->dev.platform_data;
 
 	status = stop_queue(drv_data);
 	if (status != 0) {
 		dev_warn(&pdev->dev, "suspend cannot stop queue\n");
 		return status;
 	}
+	clk_disable(drv_data->clk);
 
 	dev_dbg(&pdev->dev, "suspended\n");
+	if (platform_info->exit)
+		platform_info->exit(pdev);
 
 	return 0;
 }
@@ -1729,6 +1865,11 @@
 {
 	struct driver_data *drv_data = platform_get_drvdata(pdev);
 	int status = 0;
+	struct spi_imx_master *platform_info =
+			(struct spi_imx_master *)pdev->dev.platform_data;
+
+	if (platform_info->init)
+		platform_info->init(pdev);
 
 	/* Start the queue running */
 	status = start_queue(drv_data);
@@ -1736,6 +1877,7 @@
 		dev_err(&pdev->dev, "problem starting queue (%d)\n", status);
 	else
 		dev_dbg(&pdev->dev, "resumed\n");
+	clk_enable(drv_data->clk);
 
 	return status;
 }
@@ -1749,7 +1891,11 @@
 
 static struct platform_driver driver = {
 	.driver = {
+#ifdef CONFIG_ARCH_MX2
+		.name = "mxc_spi",
+#else
 		.name = "spi_imx",
+#endif
 		.owner = THIS_MODULE,
 	},
 	.remove = __exit_p(spi_imx_remove),
Index: linux-2.6.29.6/drivers/spi/Kconfig
===================================================================
--- linux-2.6.29.6.orig/drivers/spi/Kconfig	2010-06-07 11:54:41.000000000 +0200
+++ linux-2.6.29.6/drivers/spi/Kconfig	2010-06-07 11:54:44.000000000 +0200
@@ -118,11 +118,28 @@
 
 config SPI_IMX
 	tristate "Freescale iMX SPI controller"
-	depends on ARCH_IMX && EXPERIMENTAL
+	depends on (ARCH_IMX || ARCH_MXC) && EXPERIMENTAL
 	help
 	  This enables using the Freescale iMX SPI controller in master
 	  mode.
 
+config SPI_MXC_SELECT1
+	bool "CSPI1"
+	depends on SPI_IMX && (ARCH_MX2 || ARCH_MX3)
+	default y
+
+config SPI_MXC_SELECT2
+	bool "CSPI2"
+	depends on SPI_IMX && (ARCH_MX2 || ARCH_MX3)
+	default n
+
+config SPI_MXC_SELECT3
+	bool "CSPI3"
+	depends on SPI_IMX && (MACH_MX27 || MACH_MX31)
+	default n
+
+
+
 config SPI_LM70_LLP
 	tristate "Parallel port adapter for LM70 eval board (DEVELOPMENT)"
 	depends on PARPORT && EXPERIMENTAL
