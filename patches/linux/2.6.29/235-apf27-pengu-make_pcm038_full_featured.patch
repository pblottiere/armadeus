From: Juergen Beisert <j.beisert@pengutronix.de>
Date: Tue, 9 Sep 2008 09:33:13 +0000 (+0200)
Subject: pcm038: Extend to current development status
X-Git-Url: http://pasiphae.extern.pengutronix.de/?p=imx%2Flinux-2.6.git;a=commitdiff_plain;h=c5619ce59f6584e1be8d77caa603b0355bb506fb

pcm038: Extend to current development status

This patch expands the pcm038 BSP to the current development status. These
features are not part of the base patchset.

New devices are:

 - spi
 - i2c
 - framebuffer

Note: This is for development. Not for mainline yet.

Signed-off-by: Juergen Beisert <j.beisert@pengutronix.de>
Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
---

diff --git a/arch/arm/mach-mx2/pcm038.c b/arch/arm/mach-mx2/pcm038.c
index ff62017..7733a95 100644
--- a/arch/arm/mach-mx2/pcm038.c
+++ b/arch/arm/mach-mx2/pcm038.c
@@ -19,13 +19,20 @@
 #include <linux/platform_device.h>
 #include <linux/mtd/physmap.h>
 #include <linux/mtd/plat-ram.h>
+#include <linux/spi/spi.h>
+#include <linux/i2c.h>
 #include <asm/mach/arch.h>
 #include <asm/mach-types.h>
+#include <asm/mach/time.h>
 #include <mach/common.h>
 #include <mach/hardware.h>
 #include <mach/iomux-mx1-mx2.h>
-#include <asm/mach/time.h>
+#include <mach/gpio.h>
+#include <mach/imx_i2c.h>
+#include <mach/imx_spi.h>
 #include <mach/imx-uart.h>
+#include <mach/imx_ssi.h>
+#include <mach/pmic/platform.h>
 #include <mach/board-pcm038.h>
 #include <mach/mxc_nand.h>
 
@@ -55,6 +62,108 @@ static struct platform_device pcm038_nor_mtd_device = {
 	.resource = &pcm038_flash_resource,
 };
 
+#ifdef CONFIG_I2C
+static int mxc_i2c1_pins[] = {
+	PC5_PF_I2C2_SDA,
+	PC6_PF_I2C2_SCL
+};
+
+static int pcm038_i2c_1_init(struct platform_device *pdev)
+{
+	return mxc_gpio_setup_multiple_pins(mxc_i2c1_pins, ARRAY_SIZE(mxc_i2c1_pins),
+			MXC_GPIO_ALLOC_MODE_NORMAL, "I2C1");
+}
+
+static int pcm038_i2c_1_exit(struct platform_device *pdev)
+{
+	return mxc_gpio_setup_multiple_pins(mxc_i2c1_pins, ARRAY_SIZE(mxc_i2c1_pins),
+			MXC_GPIO_ALLOC_MODE_RELEASE, "I2C1");
+}
+
+static struct imx_i2c_platform_data pcm038_i2c_1_data = {
+	.max_clk = 100000,
+	.init = pcm038_i2c_1_init,
+	.exit = pcm038_i2c_1_exit,
+};
+
+static struct i2c_board_info pcm038_i2c_devices[] = {
+	[0] = {
+		I2C_BOARD_INFO("at24", 0x52), /* E0=0, E1=1, E2=0 */
+		.type = "24c32"
+	},
+	[1] = {
+		I2C_BOARD_INFO("rtc-pcf8563", 0x51),
+		.type = "pcf8563"
+	},
+	[2] = {
+		I2C_BOARD_INFO("lm75", 0x4a),
+		.type = "lm75"
+	}
+};
+#endif
+
+#ifdef CONFIG_SPI
+static int mxc_cspi0_pins[] = {
+	PD25_PF_CSPI1_RDY,
+	PD27_PF_CSPI1_SS1,
+	PD28_PF_CSPI1_SS0,
+	PD29_PF_CSPI1_SCLK,
+	PD30_PF_CSPI1_MISO,
+	PD31_PF_CSPI1_MOSI
+};
+
+static int gpio_spi_active_0(struct platform_device *pdev)
+{
+	return mxc_gpio_setup_multiple_pins(mxc_cspi0_pins, ARRAY_SIZE(mxc_cspi0_pins),
+			MXC_GPIO_ALLOC_MODE_NORMAL, "CSPI0");
+}
+
+static int gpio_spi_inactive_0(struct platform_device *pdev)
+{
+	return mxc_gpio_setup_multiple_pins(mxc_cspi0_pins, ARRAY_SIZE(mxc_cspi0_pins),
+			MXC_GPIO_ALLOC_MODE_RELEASE, "CSPI0");
+}
+
+static struct mxc_spi_master pcm038_spi_0_data = {
+	.maxchipselect = 4,	/* FIXME */
+	.init = gpio_spi_active_0,
+	.exit = gpio_spi_inactive_0,
+};
+
+static int gpio_pmic_active(void)
+{
+	mxc_gpio_mode(GPIO_PORTB | 23 | GPIO_GPIO | GPIO_IN); /* FIXME: Request? */
+
+	return 0;
+}
+
+static struct pmic_platform_data pcm038_pmic_irq = {
+	.init = gpio_pmic_active,
+	.exit = NULL /* TODO required? */
+};
+
+/*
+ * spi bus 1 description
+ *  - serviced by SPI master unit 1 (be seen in kernel as #0)
+ *  - SS0 selects the external MC13783
+ *    - MC13783's interrupt is connected to PB23
+ *  - SS1: external available
+ *  - SS2: external available
+ *  - SS3: external available
+ * FIXME: does this use the spi init functions correctly?
+ */
+static struct spi_board_info pcm038_spi_board_info[] __initdata = {
+	{
+		.modalias = "pmic_spi",
+		.irq = IRQ_GPIOB(23),
+		.max_speed_hz = 3000000, /* FIXME: Depends on internal PLL? */
+		.bus_num = 0,
+		.chip_select = 0,
+		.platform_data = &pcm038_pmic_irq
+	}
+};
+#endif
+
 static int mxc_uart0_pins[] = {
 	PE12_PF_UART1_TXD,
 	PE13_PF_UART1_RXD,
@@ -97,10 +206,12 @@ static int uart_mxc_port1_exit(struct platform_device *pdev)
 			MXC_GPIO_ALLOC_MODE_RELEASE, "UART1");
 }
 
-static int mxc_uart2_pins[] = { PE10_PF_UART3_CTS,
-				PE9_PF_UART3_RXD,
-				PE10_PF_UART3_CTS,
-				PE9_PF_UART3_RXD };
+static int mxc_uart2_pins[] = {
+	PE8_PF_UART3_TXD,
+	PE9_PF_UART3_RXD,
+	PE10_PF_UART3_CTS,
+	PE11_PF_UART3_RTS
+};
 
 static int uart_mxc_port2_init(struct platform_device *pdev)
 {
@@ -185,6 +296,21 @@ static void __init pcm038_init(void)
 	mxc_register_device(&mxc_uart_device2, &uart_pdata[2]);
 	mxc_register_device(&mxc_nand_device, &pcm038_nand_board_info);
 
+#ifdef CONFIG_I2C
+	/* only the i2c master 1 is used on this CPU card */
+	i2c_register_board_info(1, pcm038_i2c_devices,
+				ARRAY_SIZE(pcm038_i2c_devices));
+
+	mxc_register_device(&imx_i2c_device1, &pcm038_i2c_1_data);
+#endif
+
+#ifdef CONFIG_SPI
+	mxc_register_device(&mxc_spi_device1, &pcm038_spi_0_data);
+
+	spi_register_board_info(pcm038_spi_board_info,
+				ARRAY_SIZE(pcm038_spi_board_info));
+#endif
+
 	platform_add_devices(platform_devices, ARRAY_SIZE(platform_devices));
 
 #ifdef CONFIG_MACH_PCM970_BASEBOARD
