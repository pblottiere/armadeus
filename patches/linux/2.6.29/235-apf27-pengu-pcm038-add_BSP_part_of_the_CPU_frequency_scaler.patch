From: Juergen Beisert <j.beisert@pengutronix.de>
Date: Tue, 9 Sep 2008 09:33:13 +0000 (+0200)
Subject: pcm038: Add BSP part of the CPU frequency scaler
X-Git-Url: http://pasiphae.extern.pengutronix.de/?p=imx%2Flinux-2.6.git;a=commitdiff_plain;h=cb2337ff53b5439a13c8ea66255998d29d31477b

pcm038: Add BSP part of the CPU frequency scaler

Add the BSP depended part of the i.MX27 frequency scaler.

Signed-off-by: Juergen Beisert <j.beisert@pengutronix.de>
Signed-off-by: Sascha Hauer <s.hauer@pengutronix.de>
---

Index: linux-2.6.29/arch/arm/mach-mx2/pcm038.c
===================================================================
--- linux-2.6.29.orig/arch/arm/mach-mx2/pcm038.c	2009-03-31 09:48:13.000000000 +0200
+++ linux-2.6.29/arch/arm/mach-mx2/pcm038.c	2009-03-31 09:59:56.000000000 +0200
@@ -22,6 +22,10 @@
 #include <linux/mtd/plat-ram.h>
 #include <linux/spi/spi.h>
 #include <linux/i2c.h>
+#include <linux/cpufreq.h>
+#include <linux/delay.h>
+#include <linux/err.h>
+#include <linux/clk.h>
 #include <asm/mach/arch.h>
 #include <asm/mach-types.h>
 #include <asm/mach/time.h>
@@ -34,10 +38,13 @@
 #include <mach/imx-uart.h>
 #include <mach/imx_ssi.h>
 #include <mach/pmic/platform.h>
+#include <mach/pmic/power.h>
+#include "cpufreq_imx.h"
 #include <mach/board-pcm038.h>
 #include <mach/mxc_nand.h>
 
 #include "devices.h"
+#include "crm_regs.h"
 
 /*
  * Phytec's PCM038 comes with 2MiB battery buffered SRAM,
@@ -304,8 +311,182 @@
 	.hw_ecc = 1,
 };
 
+/* to switch the CPU speed we need various support of other components */
+#if ((defined(CONFIG_SPI_MXC) || (defined CONFIG_SPI_MXC_MODULE))  && \
+    (defined(CONFIG_CPU_FREQ_IMX27) || defined(CONFIG_CPU_FREQ_IMX27_MODULE)))
+
+static struct clk *mpll_main_0;
+static struct clk *mpll_main_1;
+static struct clk *cpu;
+
+#define double_byte(x) ((((x)+1)<<1)-1)
+#define double_all_bytes(x) ( \
+        (double_byte(((x)>>24)&0xFF)<<24) | \
+        (double_byte(((x)>>16)&0xFF)<<16) | \
+        (double_byte(((x)>> 8)&0xFF)<< 8) | \
+        (double_byte((x)&0xFF)) )
+/*
+ * Switching the CPU frequency makes currently more sense when the
+ * MPLL runs a ~800MHz to run the CPU core at ~400MHz. Running the
+ * CPU at ~400MHz requires a 1.45V core power supply. As long the
+ * boot loader does not provide this voltage we must setup it here
+ */
+static int pcm038_cpufreq_init(struct platform_device *pd)
+{
+	t_regulator_config config;
+	uint32_t cscr, reg;
+
+	mpll_main_0 = clk_get(NULL, "mpll_main.0");
+	mpll_main_1 = clk_get(NULL, "mpll_main.1");
+	cpu = clk_get(NULL, "cpu_clk");
+
+	if (IS_ERR(mpll_main_0) || IS_ERR(mpll_main_1) || IS_ERR(cpu)) {
+		printk("Cant get one of the required clocks\n");
+		/* FIXME error handling */
+	}
+	/* switch Qvdd (=CPU core supply) to 1.45V */
+	config.mode = NO_PULSE_SKIP;
+	config.stby_mode = NO_PULSE_SKIP;
+	config.voltage.sw1a = SW1A_1_45V;
+	config.voltage_lvs.sw1a = SW1A_1_45V;
+	config.voltage_stby.sw1a = SW1A_1_45V;
+	config.lp_mode = LOW_POWER_DISABLED;
+	config.factor = FACTOR_28;
+
+	if (pmic_power_regulator_set_config(SW_SW1A,&config) != PMIC_SUCCESS)
+		printk("Regulator error? Ignore this message ;-)\n");
+
+	udelay(1000);	/* TODO tune */
+
+	if (clk_get_rate(mpll_main_0) < 399000000) {
+		printk(KERN_INFO "Found MPLL running below ~400Mhz. Tuning "
+				"right now.\n");
+		/* 0x00331C23 is the setting for 399MHz from the data sheet */
+		__raw_writel(0x00331C23, CCM_MPCTL0);
+
+		cscr = __raw_readl(CCM_CSCR);
+
+		/* AHB *must* run below or equal 133MHz */
+		cscr &= ~CCM_CSCR_AHB_MASK;
+		cscr |= 0x01 << CCM_CSCR_AHB_OFFSET;
+
+		/* start with a 133MHz core frequency. Its more stable than
+		 * 400MHz at this point of time.
+		 */
+		cscr &= ~CCM_CSCR_ARM_MASK;
+		cscr |= 0x01 << CCM_CSCR_ARM_OFFSET;
+
+		cscr &= ~CCM_CSCR_ARM_SRC;
+
+		cscr |= CCM_CSCR_MPLLRES;
+
+		/* internal frequency should now be 266MHz */
+		reg = __raw_readl(CCM_PCDR1);
+		__raw_writel(double_all_bytes(reg), CCM_PCDR1);
+		__raw_writel(cscr, CCM_CSCR);	/* switch right now */
+		clk_set_parent(cpu, mpll_main_1); /* always the last call! */
+		/*
+		 * this is a citical moment. It seems the CPU dies if we do
+		 * some other things than waiting for the MPLL to lock again
+		 */
+		udelay(1000);
+	}
+
+	return 0;
+}
+
+static int pcm038_cpufreq_exit(struct platform_device *pd)
+{
+	clk_put(mpll_main_0);
+	clk_put(mpll_main_1);
+	clk_put(cpu);
+
+	return 0;
+}
+
+static int pcm038_cpufreq_transit(unsigned long freq)
+{
+	uint32_t cscr;
+	struct clk *new_clk;
+
+	cscr = __raw_readl(CCM_CSCR);
+
+	switch(freq) {
+	case 133000:
+		/* AHB *can* run at 133MHz */
+		cscr &= ~CCM_CSCR_AHB_MASK;
+		cscr |= 0x01 << CCM_CSCR_AHB_OFFSET;
+
+		cscr &= ~CCM_CSCR_ARM_MASK;
+		cscr |= 0x01 << CCM_CSCR_ARM_OFFSET;	/* 133MHz */
+
+		cscr &= ~CCM_CSCR_ARM_SRC;
+		new_clk = mpll_main_1;
+		break;
+
+	case 266000:
+		/* AHB *can* run at 133MHz */
+		cscr &= ~CCM_CSCR_AHB_MASK;
+		cscr |= 0x01 << CCM_CSCR_AHB_OFFSET;
+
+		cscr &= ~CCM_CSCR_ARM_MASK;
+		cscr |= 0x00 << CCM_CSCR_ARM_OFFSET;	/* 266MHz speed */
+
+		cscr &= ~CCM_CSCR_ARM_SRC;
+		new_clk = mpll_main_1;
+		break;
+
+	case 400000:
+		/* AHB *must* run at 133MHz */
+		cscr &= ~CCM_CSCR_AHB_MASK;
+		cscr |= 0x01 << CCM_CSCR_AHB_OFFSET;
+
+		cscr &= ~CCM_CSCR_ARM_MASK;
+		cscr |= 0x00 << CCM_CSCR_ARM_OFFSET;	/* full speed */
+
+		cscr |= CCM_CSCR_ARM_SRC;
+		new_clk = mpll_main_0;
+		break;
+
+	default:
+		return -EINVAL;
+	}
+	__raw_writel(cscr, CCM_CSCR);
+	clk_set_parent(cpu, new_clk);
+
+	return 0;
+}
+
+static struct cpufreq_frequency_table pcm038_freq_table[] = {
+	{0x01, .frequency = 133000 }, /* with 400MHz MPLL / 3 @ 1.45V Qvdd */
+	{0x02, .frequency = 266000 }, /* with 400MHz MPLL / 2 @ 1.45V Qvdd */
+	{0x03, .frequency = 400000 }, /* with 400MHz MPLL / 1 @ 1.45V Qvdd */
+	{0, CPUFREQ_TABLE_END}
+};
+
+static struct cpufreq_platform_data pcm038_cpufreq_platform_data = {
+	.freq_table = pcm038_freq_table,
+	.freq_entries = ARRAY_SIZE(pcm038_freq_table),
+	.init = pcm038_cpufreq_init,
+	.exit = pcm038_cpufreq_exit,
+	.transit = pcm038_cpufreq_transit
+};
+
+static struct platform_device pcm038_cpu_frequency_device = {
+	.name = "imx_cpufreq",
+	.id = 0,
+	.dev = {
+		.platform_data = &pcm038_cpufreq_platform_data,
+	}
+};
+# define CPU_FREQUENCY &pcm038_cpu_frequency_device,
+#else
+# define CPU_FREQUENCY
+#endif
+
 static struct platform_device *platform_devices[] __initdata = {
 	&pcm038_nor_mtd_device,
+	CPU_FREQUENCY
 	&mxc_w1_master_device,
 	&pcm038_sram_mtd_device,
 };
