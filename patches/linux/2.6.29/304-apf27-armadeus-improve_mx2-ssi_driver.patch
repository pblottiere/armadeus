Index: linux-2.6.29.6/sound/arm/imx2-ssi.h
===================================================================
--- linux-2.6.29.6.orig/sound/arm/imx2-ssi.h	2009-12-29 17:17:05.000000000 +0100
+++ linux-2.6.29.6/sound/arm/imx2-ssi.h	2009-12-29 17:17:06.000000000 +0100
@@ -23,11 +23,11 @@
 void imx_ssi_shutdown(struct snd_pcm_substream *substream, int ssi_id);
 int imx_ssi_trigger(struct snd_pcm_substream *substream, int cmd, int ssi_id);
 
-extern int imx_get_dma_tx_channel(int, int);
-extern int imx_get_dma_rx_channel(int, int);
-extern void __iomem *imx_get_dma_tx_address(int, int);
-extern void __iomem *imx_get_dma_rx_address(int, int);
-extern int setup_channel_to_iis_slave(int);
+extern int imx_ssi_get_dma_tx_channel(int, int);
+extern int imx_ssi_get_dma_rx_channel(int, int);
+extern void __iomem *imx_ssi_get_dma_tx_address(int, int);
+extern void __iomem *imx_ssi_get_dma_rx_address(int, int);
+extern int imx_ssi_setup_unit_to_iis_slave(int);
 
 /* to handle it like a module */
 extern int mx2_ssi_init(void);
Index: linux-2.6.29.6/sound/arm/imx2-ssi.c
===================================================================
--- linux-2.6.29.6.orig/sound/arm/imx2-ssi.c	2009-12-29 17:17:05.000000000 +0100
+++ linux-2.6.29.6/sound/arm/imx2-ssi.c	2009-12-29 17:21:10.000000000 +0100
@@ -28,6 +28,8 @@
 #include <sound/pcm.h>
 #include <mach/imx_ssi.h>
 #include "imx2-ssi.h"
+#include "imx2-dam.h"
+
 
 #define DRV_NAME "mxc-ssi"
 
@@ -102,7 +104,7 @@
  *      --|    rigth     ||   left       |--------------------------------
  *
  */
-int setup_channel_to_iis_slave(int id)
+int imx_ssi_setup_unit_to_iis_slave(int id)
 {
 	u32 scr;
 
@@ -110,22 +112,23 @@
 
 	pr_debug("%s called for unit %d\n", __func__, id);
 
-	scr = SSI_SCR_SYN | SSI_SCR_NET;
-
-	/* disable this unit */
+	/* set config + disable this unit */
+	scr = SSI_SCR_SYN | SSI_SCR_I2S_MODE_SLAVE; /* SSI_SCR_NET; */
 	set_reg(scr, SSI_SCR, id);
 
 	set_reg(SSI_STCR_TFEN0 |	/* FIFO 0 enabled */
 		SSI_STCR_TXBIT0 |	/* MSB first, data bits 0...15 are valid */
 		SSI_STCR_TSCKP |	/* send @falling edge */
-		SSI_STCR_TFSL |		/* one-bit-long-frame */
+		SSI_STCR_TFSI |
+// 		SSI_STCR_TFSL |		/* one-bit-long-frame */
 		SSI_STCR_TEFS,		/* shift */
 		SSI_STCR, id);
 
 	set_reg(SSI_SRCR_RFEN0 |	/* FIFO 0 enabled */
 		SSI_SRCR_RXBIT0 |
 		SSI_SRCR_RSCKP |	/* capture @rising edge */
-		SSI_SRCR_RFSL |		/* one-bit-long-frame */
+		SSI_STCR_TFSI |
+// 		SSI_SRCR_RFSL |		/* one-bit-long-frame */
 		SSI_SRCR_REFS,
 		SSI_SRCR, id);
 
@@ -133,12 +136,12 @@
 	 * bit 0: first timeslot after sync    ____    ____    ____
 	 * bit 1: second timeslot after sync       ____    ____    ____
 	 */
-	set_reg(0xFFFFFFFC, SSI_STMSK, id);
+// 	set_reg(0xFFFFFFFC, SSI_STMSK, id);
 	/*
 	 * these RX settings must correspond with the settings in PMIC's
 	 * reg 39 codec time slot settings
 	 */
-	set_reg(0xFFFFFFFC, SSI_SRMSK, id);
+// 	set_reg(0xFFFFFFFC, SSI_SRMSK, id);
 
 	/*
 	 * Watermark settings:
@@ -159,17 +162,18 @@
 	 * sample signal. In this case 16 bit per word, 32 bit per sample.
 	 * PMIC sends always 4 words (=2 samples) per sync!
 	 */
-	set_reg(SSI_STCCR_WL(16) | SSI_STCCR_DC(1), SSI_STCCR, id);
-	set_reg(SSI_SRCCR_WL(16) | SSI_SRCCR_DC(3), SSI_SRCCR, id);
+	set_reg(SSI_STCCR_WL(16) | SSI_STCCR_DC(0)/*1*/, SSI_STCCR, id);
+	set_reg(SSI_SRCCR_WL(16) | SSI_SRCCR_DC(0)/*3*/, SSI_SRCCR, id);
 
 	/* enable the unit */
 	set_reg(scr | SSI_SCR_SSIEN, SSI_SCR, id);
 
 	return 0;
 }
+EXPORT_SYMBOL(imx_ssi_setup_unit_to_iis_slave);
 
 /* id: SSI unit, fifo: FIFO 0 or 1 of this unit */
-int imx_get_dma_tx_channel(int id, int fifo)
+int imx_ssi_get_dma_tx_channel(int id, int fifo)
 {
 	struct resource *res;
 
@@ -186,9 +190,10 @@
 
 	return res->start;
 }
+EXPORT_SYMBOL(imx_ssi_get_dma_tx_channel);
 
 /* return physical address of the FIFO register */
-void __iomem *imx_get_dma_tx_address(int id, int fifo)
+void __iomem *imx_ssi_get_dma_tx_address(int id, int fifo)
 {
 	struct resource *res;
 	void __iomem *adr;
@@ -207,9 +212,10 @@
 
 	return adr;
 }
+EXPORT_SYMBOL(imx_ssi_get_dma_tx_address);
 
 /* id: SSI unit, fifo: FIFO 0 or 1 of this unit */
-int imx_get_dma_rx_channel(int id, int fifo)
+int imx_ssi_get_dma_rx_channel(int id, int fifo)
 {
 	struct resource *res;
 
@@ -226,9 +232,10 @@
 
 	return res->start;
 }
+EXPORT_SYMBOL(imx_ssi_get_dma_rx_channel);
 
 /* return physical address of the FIFO register */
-void __iomem *imx_get_dma_rx_address(int id, int fifo)
+void __iomem *imx_ssi_get_dma_rx_address(int id, int fifo)
 {
 	struct resource *res;
 	void __iomem *adr;
@@ -247,19 +254,22 @@
 
 	return adr;
 }
+EXPORT_SYMBOL(imx_ssi_get_dma_rx_address);
 
 int imx_ssi_prepare(struct snd_pcm_substream *substream,
                             int ssi_id)
 {
 	set_reg_bits(SSI_SCR_SSIEN, SSI_SCR_SSIEN, SSI_SCR, ssi_id);
 
-	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK)
+	if (substream->stream == SNDRV_PCM_STREAM_PLAYBACK) {
 		set_reg_bits(SSI_SIER_TDMAE, SSI_SIER_TDMAE, SSI_SIER, ssi_id);
-	else
-		set_reg_bits(SSI_SIER_RDMAE, SSI_SIER_RDMAE, SSI_SIER, ssi_id);
+	} else {
+		set_reg_bits(SSI_SIER_RDMAE | SSI_SIER_RFF0_EN, SSI_SIER_RDMAE | SSI_SIER_RFF0_EN, SSI_SIER, ssi_id);
+	}
 
 	return 0;
 }
+EXPORT_SYMBOL(imx_ssi_prepare);
 
 void imx_ssi_shutdown(struct snd_pcm_substream *substream,
                              int ssi_id)
@@ -272,6 +282,8 @@
 {
 	u32 scr = get_reg(SSI_SCR, ssi_id);
 
+	pr_debug("%s called for unit %d\n", __func__, ssi_id);
+
 	switch (cmd) {
 	case SNDRV_PCM_TRIGGER_START:
 	case SNDRV_PCM_TRIGGER_RESUME:
@@ -297,8 +309,9 @@
 
 	return 0;
 }
+EXPORT_SYMBOL(imx_ssi_trigger);
 
-static int __devinit mx2_iss_probe(struct platform_device *pdev)
+static int __devinit mx2_ssi_probe(struct platform_device *pdev)
 {
 	struct imx_ssi_platform_data *pdata;
 	struct resource *res;
@@ -307,7 +320,7 @@
 	pdata = pdev->dev.platform_data;
 
 	id = pdev->id;
-	pr_info("Probing i.MX SSI unit %d\n", id);
+	pr_info("Probing i.MX2 SSI unit %d\n", id);
 
 	if (unit[id].io != NULL)
 		return -EBUSY;
@@ -334,7 +347,7 @@
 		goto err2;
 	}
 
-	/* external clock (if used) should never greater than 1/4 ipg_clk! */
+	/* external clock (if used) should never be greater than 1/4 ipg_clk! */
 	pr_debug("Main clock for SSI is: %luHz\n", clk_get_rate(unit[id].clk));
 
 	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
@@ -370,7 +383,7 @@
 	return ret;
 }
 
-static int __devexit mx2_iss_remove(struct platform_device *pdev)
+static int __devexit mx2_ssi_remove(struct platform_device *pdev)
 {
 	struct imx_ssi_platform_data *pdata = pdev->dev.platform_data;
 	struct resource *res;
@@ -390,13 +403,13 @@
 	return 0;
 }
 
-static struct platform_driver mx2_iss_driver = {
+static struct platform_driver mx2_ssi_driver = {
 	.driver = {
 		.name		= DRV_NAME,
 		.owner		= THIS_MODULE,
 	},
-	.probe		= mx2_iss_probe,
-	.remove		= __devexit_p(mx2_iss_remove),
+	.probe		= mx2_ssi_probe,
+	.remove		= __devexit_p(mx2_ssi_remove),
 #ifdef CONFIG_PM
 	.suspend	= NULL, /* TODO mx2_ssi_suspend */
 	.resume		= NULL	/* TODO mx2_ssi_resume */
@@ -405,10 +418,25 @@
 
 int __init mx2_ssi_init(void)
 {
-	return platform_driver_register(&mx2_iss_driver);
+	int err;
+
+	err = mx2_dam_init();
+	if (err != 0)
+		return err;
+	else
+		return platform_driver_register(&mx2_ssi_driver);
 }
 
 void __exit mx2_ssi_exit(void)
 {
-	platform_driver_unregister(&mx2_iss_driver);
+	mx2_dam_exit();
+	platform_driver_unregister(&mx2_ssi_driver);
 }
+
+module_init(mx2_ssi_init);
+module_exit(mx2_ssi_exit);
+
+MODULE_AUTHOR("Pengutronix");
+MODULE_DESCRIPTION("i.MX2 SSI Driver");
+MODULE_LICENSE("GPL");
+
