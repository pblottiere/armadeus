Index: linux-2.6.29/drivers/net/fec_old.c
===================================================================
--- linux-2.6.29.orig/drivers/net/fec_old.c	2009-04-02 11:36:05.000000000 +0200
+++ linux-2.6.29/drivers/net/fec_old.c	2009-04-02 11:40:55.000000000 +0200
@@ -2692,6 +2692,8 @@ static int fec_enet_open(struct net_devi
 	fep->sequence_done = 0;
 	fep->link = 0;
 
+	fec_restart(dev, 1);
+
 	if (fep->phy) {
 		mii_do_cmd(dev, fep->phy->ack_int);
 		mii_do_cmd(dev, fep->phy->config);
@@ -2708,18 +2710,14 @@ static int fec_enet_open(struct net_devi
 			schedule();
 
 		mii_do_cmd(dev, fep->phy->startup);
-
-		/* Set the initial link state to true. A lot of hardware
-		 * based on this device does not implement a PHY interrupt,
-		 * so we are never notified of link change.
-		 */
-		fep->link = 1;
-	} else {
-		fep->link = 1;	/* lets just try it and see */
-		/* no phy,  go full duplex,  it's most likely a hub chip */
-		fec_restart(dev, 1);
 	}
+	/* Set the initial link state to true. A lot of hardware
+	 * based on this device does not implement a PHY interrupt,
+	 * so we are never notified of link change.
+	 */
+	fep->link = 1;
 
+	netif_start_queue(dev);
 	fep->opened = 1;
 	return 0;		/* Success */
 }
@@ -3137,8 +3135,6 @@ static void fec_restart(struct net_devic
 	 */
 	fecp->fec_ecntrl = 2;
 	fecp->fec_r_des_active = 0x01000000;
-
-	netif_start_queue(dev);
 }
 
 static void fec_stop(struct net_device *dev)
