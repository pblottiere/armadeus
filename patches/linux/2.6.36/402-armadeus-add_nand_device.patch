Add NAND device to MX5 architecture

Signed-off-by: Nicolas Colombain <nicolas.colombain@armadeus.com>

Index: linux-2.6.36/arch/arm/mach-mx5/devices.h
===================================================================
--- linux-2.6.36.orig/arch/arm/mach-mx5/devices.h	2010-10-20 22:30:22.000000000 +0200
+++ linux-2.6.36/arch/arm/mach-mx5/devices.h	2010-11-14 12:16:07.000000000 +0100
@@ -1,3 +1,4 @@
+extern struct platform_device mxc_nand_device;
 extern struct platform_device mxc_uart_device0;
 extern struct platform_device mxc_uart_device1;
 extern struct platform_device mxc_uart_device2;
Index: linux-2.6.36/arch/arm/mach-mx5/devices.c
===================================================================
--- linux-2.6.36.orig/arch/arm/mach-mx5/devices.c	2010-10-20 22:30:22.000000000 +0200
+++ linux-2.6.36/arch/arm/mach-mx5/devices.c	2010-11-14 12:15:57.000000000 +0100
@@ -17,6 +17,29 @@
 #include <mach/imx-uart.h>
 #include <mach/irqs.h>
 
+static struct resource mxc_nand_resources[] = {
+	{
+		.start = MX51_NFC_AXI_BASE_ADDR,
+		.end = MX51_NFC_AXI_BASE_ADDR + 0x1FFF,
+		.flags = IORESOURCE_MEM
+	}, {
+		.start = MX51_NFC_BASE_ADDR,
+		.end = MX51_NFC_BASE_ADDR + 0x37,
+		.flags = IORESOURCE_MEM
+	}, {
+		.start = MX51_MXC_INT_NFC,
+		.end = MX51_MXC_INT_NFC,
+		.flags = IORESOURCE_IRQ
+	},
+};
+
+struct platform_device mxc_nand_device = {
+	.name = "mxc_nand",
+	.id = 0,
+	.num_resources = ARRAY_SIZE(mxc_nand_resources),
+	.resource = mxc_nand_resources,
+};
+
 static struct resource uart0[] = {
 	{
 		.start = MX51_UART1_BASE_ADDR,
Index: linux-2.6.36/arch/arm/mach-mx5/clock-mx51.c
===================================================================
--- linux-2.6.36.orig/arch/arm/mach-mx5/clock-mx51.c	2010-10-20 22:30:22.000000000 +0200
+++ linux-2.6.36/arch/arm/mach-mx5/clock-mx51.c	2010-11-14 12:16:40.000000000 +0100
@@ -600,6 +600,84 @@ static int _clk_usboh3_set_parent(struct
 	return 0;
 }
 
+static unsigned long clk_emi_slow_get_rate(struct clk *clk)
+{
+	u32 reg, div;
+	unsigned long parent_rate;
+
+	parent_rate = clk_get_rate(clk->parent);
+
+	reg = __raw_readl(MXC_CCM_CBCDR);
+	div = ((reg & MXC_CCM_CBCDR_EMI_PODF_MASK) >>
+	       MXC_CCM_CBCDR_EMI_PODF_OFFSET) + 1;
+
+	return parent_rate / div;
+}
+
+static int _clk_emi_slow_set_parent(struct clk *clk, struct clk *parent)
+{
+	u32 reg = __raw_readl(MXC_CCM_CBCDR);
+	if (parent == &ahb_clk)
+		reg |= MXC_CCM_CBCDR_EMI_CLK_SEL;
+	else if (parent == &main_bus_clk)
+		reg &= ~MXC_CCM_CBCDR_EMI_CLK_SEL;
+	else
+		return -EINVAL;
+
+	__raw_writel(reg, MXC_CCM_CBCDR);
+
+	return 0;
+}
+
+static int _clk_emi_slow_set_rate(struct clk *clk, unsigned long rate)
+{
+	u32 reg, div;
+	unsigned long parent_rate;
+	int i = 0;
+
+	parent_rate = clk_get_rate(clk->parent);
+
+	div = parent_rate / rate;
+	if (div > 8 || div < 1 || ((parent_rate / div) != rate))
+		return -EINVAL;
+
+	reg = __raw_readl(MXC_CCM_CBCDR);
+	reg &= ~MXC_CCM_CBCDR_EMI_PODF_MASK;
+	reg |= (div - 1) << MXC_CCM_CBCDR_EMI_PODF_OFFSET;
+	__raw_writel(reg, MXC_CCM_CBCDR);
+
+	/* Wait for lock */
+	do {
+		reg = __raw_readl(MXC_CCM_CDHIPR);
+		if (!(reg & MXC_CCM_CDHIPR_EMI_PODF_BUSY))
+			break;
+
+		udelay(1);
+	} while (++i < MAX_DPLL_WAIT_TRIES);
+
+	if (i == MAX_DPLL_WAIT_TRIES) {
+		pr_err("MX5: clk_emi_slow_set_rate failed\n");
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+
+static unsigned long _clk_nfc_get_rate(struct clk *clk)
+{
+	u32 reg, div;
+	unsigned long parent_rate;
+
+	parent_rate = clk_get_rate(clk->parent);
+
+	reg = __raw_readl(MXC_CCM_CBCDR);
+	div = ((reg & MXC_CCM_CBCDR_NFC_PODF_MASK) >>
+	       MXC_CCM_CBCDR_NFC_PODF_OFFSET) + 1;
+	return parent_rate / div;
+}
+
+
 static unsigned long get_high_reference_clock_rate(struct clk *clk)
 {
 	return external_high_reference;
@@ -727,6 +805,14 @@ static struct clk usboh3_clk = {
 	.set_parent = _clk_usboh3_set_parent,
 };
 
+static struct clk emi_slow_clk = {
+	.parent = &main_bus_clk,
+	.get_rate = clk_emi_slow_get_rate,
+	.set_rate = _clk_emi_slow_set_rate,
+	.set_parent = _clk_emi_slow_set_parent,
+};
+
+
 static struct clk ahb_max_clk = {
 	.parent = &ahb_clk,
 	.enable_reg = MXC_CCM_CCGR0,
@@ -812,7 +898,12 @@ DEFINE_CLOCK(hsi2c_clk, 0, MXC_CCM_CCGR1
 
 /* FEC */
 DEFINE_CLOCK(fec_clk, 0, MXC_CCM_CCGR2, MXC_CCM_CCGRx_CG12_OFFSET,
-	NULL,  NULL, &ipg_clk, NULL);
+	NULL,  NULL, &emi_slow_clk, NULL);
+
+
+/* NFC */
+DEFINE_CLOCK(nfc_clk, 0, MXC_CCM_CCGR5, MXC_CCM_CCGRx_CG10_OFFSET,   
+	_clk_nfc_get_rate, NULL, &emi_slow_clk, NULL);
 
 #define _REGISTER_CLOCK(d, n, c) \
        { \
@@ -837,6 +928,7 @@ static struct clk_lookup lookups[] = {
 	_REGISTER_CLOCK("fsl-usb2-udc", "usb", usboh3_clk)
 	_REGISTER_CLOCK("fsl-usb2-udc", "usb_ahb", ahb_clk)
 	_REGISTER_CLOCK("imx-keypad.0", NULL, kpp_clk)
+	_REGISTER_CLOCK("mxc_nand.0", NULL, nfc_clk)
 };
