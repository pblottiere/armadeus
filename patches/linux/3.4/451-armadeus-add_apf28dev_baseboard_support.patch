Add Armadeus systems APF28Dev development board support.

Signed-off-by: Julien Boibessot <julien.boibessot@armadeus.com>

Index: linux-3.4.48/arch/arm/mach-mxs/Kconfig
===================================================================
--- linux-3.4.48.orig/arch/arm/mach-mxs/Kconfig	2013-06-11 06:31:03.183290567 +0200
+++ linux-3.4.48/arch/arm/mach-mxs/Kconfig	2013-06-11 06:39:35.465830838 +0200
@@ -118,4 +118,23 @@
 	  Include support for the Armadeus systems APF28 SOM. This includes
 	  specific configurations for the module and its peripherals.
 
+comment "APF28 baseboard support"
+	depends on MACH_APF28
+
+config MACH_APF28_DEV
+	bool "Armadeus APF28Dev development board"
+	depends on MACH_APF28
+	select MXS_HAVE_PLATFORM_AUART
+	select MXS_HAVE_PLATFORM_FLEXCAN
+	select MXS_HAVE_PLATFORM_MXS_MMC
+	select MXS_HAVE_PLATFORM_MXSFB
+	select MXS_HAVE_PLATFORM_MXS_I2C
+	select MXS_HAVE_PLATFORM_MXS_PWM
+	select MXS_HAVE_PLATFORM_MXS_SAIF
+	select MXS_HAVE_PLATFORM_MXS_LRADC
+	help
+	  This selects the Armadeus systems APF28Dev as baseboard and adds board's
+	  specific devices. "baseboard=apf28dev" bootargs will this board effective
+	  at runtime.
+
 endif
Index: linux-3.4.48/arch/arm/mach-mxs/Makefile
===================================================================
--- linux-3.4.48.orig/arch/arm/mach-mxs/Makefile	2013-06-11 06:31:03.183290567 +0200
+++ linux-3.4.48/arch/arm/mach-mxs/Makefile	2013-06-11 06:31:03.195290632 +0200
@@ -15,5 +15,6 @@
 obj-$(CONFIG_MODULE_TX28) += module-tx28.o
 obj-$(CONFIG_MACH_TX28)    += mach-tx28.o
 obj-$(CONFIG_MACH_APF28)	+= mach-apf28.o
+obj-$(CONFIG_MACH_APF28_DEV)	+= apf28dev-baseboard.o
 
 obj-y += devices/
Index: linux-3.4.48/arch/arm/mach-mxs/apf28dev-baseboard.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-3.4.48/arch/arm/mach-mxs/apf28dev-baseboard.c	2013-06-11 21:18:24.095298046 +0200
@@ -0,0 +1,222 @@
+/*
+ * Copyright 2011-2013 Armadeus systems.
+ *
+ * Based on code which is:
+ * Copyright 2010 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/leds.h>
+#include <linux/irq.h>
+#include <linux/clk.h>
+#include <linux/spi/spi.h>
+
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/time.h>
+
+#include <mach/common.h>
+#include <mach/iomux-mx28.h>
+
+#include "devices-mx28.h"
+
+#define APF28DEV_CAN
+#define MX28EVK_FLEXCAN_SWITCH	MXS_GPIO_NR(2, 13)
+#define APF28DEV_FEC_PHY_RESET	MXS_GPIO_NR(0, 23)
+
+static const iomux_cfg_t apf28dev_pads[] __initconst = {
+	/* AUART0 */
+	MX28_PAD_AUART0_RX__AUART0_RX | MXS_PAD_CTRL,
+	MX28_PAD_AUART0_TX__AUART0_TX | MXS_PAD_CTRL,
+	MX28_PAD_AUART0_CTS__AUART0_CTS | MXS_PAD_CTRL,
+	MX28_PAD_AUART0_RTS__AUART0_RTS | MXS_PAD_CTRL,
+	/* AUART1 */
+	MX28_PAD_AUART1_RX__AUART1_RX | MXS_PAD_CTRL,
+	MX28_PAD_AUART1_TX__AUART1_TX | MXS_PAD_CTRL,
+	MX28_PAD_AUART1_CTS__AUART1_CTS | MXS_PAD_CTRL,
+	MX28_PAD_AUART1_RTS__AUART1_RTS | MXS_PAD_CTRL,
+	/* AUART2 */
+	MX28_PAD_AUART2_RX__AUART2_RX | MXS_PAD_CTRL,
+	MX28_PAD_AUART2_TX__AUART2_TX | MXS_PAD_CTRL,
+	MX28_PAD_AUART2_CTS__AUART2_CTS | MXS_PAD_CTRL,
+	MX28_PAD_AUART2_RTS__AUART2_RTS | MXS_PAD_CTRL,
+#ifndef APF28DEV_CAN
+	/* AUART3 */
+	MX28_PAD_AUART3_RX__AUART3_RX | MXS_PAD_CTRL,
+	MX28_PAD_AUART3_TX__AUART3_TX | MXS_PAD_CTRL,
+	MX28_PAD_AUART3_CTS__AUART3_CTS | MXS_PAD_CTRL,
+	MX28_PAD_AUART3_RTS__AUART3_RTS | MXS_PAD_CTRL,
+#else
+	/* CAN0 */
+	MX28_PAD_AUART3_RX__CAN0_TX,
+	MX28_PAD_AUART3_TX__CAN0_RX,
+#endif
+
+#define MXS_PAD_FEC	(MXS_PAD_8MA | MXS_PAD_3V3 | MXS_PAD_PULLUP)
+	/* FEC1 */
+	MX28_PAD_ENET0_CRS__ENET1_RX_EN | MXS_PAD_FEC,
+	MX28_PAD_ENET0_RXD2__ENET1_RXD0 | MXS_PAD_FEC,
+	MX28_PAD_ENET0_RXD3__ENET1_RXD1 | MXS_PAD_FEC,
+	MX28_PAD_ENET0_COL__ENET1_TX_EN | MXS_PAD_FEC,
+	MX28_PAD_ENET0_TXD2__ENET1_TXD0 | MXS_PAD_FEC,
+	MX28_PAD_ENET0_TXD3__ENET1_TXD1 | MXS_PAD_FEC,
+	/* phy reset line */
+	MX28_PAD_GPMI_RDY3__GPIO_0_23 | MXS_PAD_CTRL,
+
+	/* LCD */
+	MX28_PAD_LCD_D00__LCD_D0 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D01__LCD_D1 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D02__LCD_D2 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D03__LCD_D3 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D04__LCD_D4 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D05__LCD_D5 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D06__LCD_D6 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D07__LCD_D7 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D08__LCD_D8 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D09__LCD_D9 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D10__LCD_D10 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D11__LCD_D11 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D12__LCD_D12 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D13__LCD_D13 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D14__LCD_D14 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D15__LCD_D15 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D16__LCD_D16 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D17__LCD_D17 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D18__LCD_D18 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D19__LCD_D19 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D20__LCD_D20 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D21__LCD_D21 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D22__LCD_D22 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_D23__LCD_D23 | MXS_PAD_CTRL,
+	MX28_PAD_LCD_RD_E__LCD_VSYNC | MXS_PAD_CTRL,
+	MX28_PAD_LCD_WR_RWN__LCD_HSYNC | MXS_PAD_CTRL,
+	MX28_PAD_LCD_RS__LCD_DOTCLK | MXS_PAD_CTRL,
+	MX28_PAD_LCD_CS__LCD_ENABLE | MXS_PAD_CTRL,
+
+	/* MMC0 */
+	MX28_PAD_SSP0_DATA0__SSP0_D0 |
+		(MXS_PAD_8MA | MXS_PAD_3V3 | MXS_PAD_PULLUP),
+	MX28_PAD_SSP0_DATA1__SSP0_D1 |
+		(MXS_PAD_8MA | MXS_PAD_3V3 | MXS_PAD_PULLUP),
+	MX28_PAD_SSP0_DATA2__SSP0_D2 |
+		(MXS_PAD_8MA | MXS_PAD_3V3 | MXS_PAD_PULLUP),
+	MX28_PAD_SSP0_DATA3__SSP0_D3 |
+		(MXS_PAD_8MA | MXS_PAD_3V3 | MXS_PAD_PULLUP),
+	MX28_PAD_SSP0_SCK__SSP0_SCK |
+		(MXS_PAD_12MA | MXS_PAD_3V3 | MXS_PAD_NOPULL),
+	MX28_PAD_SSP0_CMD__SSP0_CMD |
+		(MXS_PAD_8MA | MXS_PAD_3V3 | MXS_PAD_PULLUP),
+	MX28_PAD_SSP0_DETECT__SSP0_CARD_DETECT |
+		(MXS_PAD_8MA | MXS_PAD_3V3 | MXS_PAD_NOPULL),
+
+	/* User LED */
+	MX28_PAD_GPMI_RDY1__GPIO_0_21 | MXS_PAD_CTRL,
+	/* User button */
+	MX28_PAD_GPMI_RDY2__GPIO_0_22 | MXS_PAD_CTRL,
+
+	/* I2C0 */
+	MX28_PAD_I2C0_SCL__I2C0_SCL |
+		(MXS_PAD_3V3 | MXS_PAD_8MA | MXS_PAD_PULLUP),
+	MX28_PAD_I2C0_SDA__I2C0_SDA |
+		(MXS_PAD_3V3 | MXS_PAD_8MA | MXS_PAD_PULLUP),
+};
+
+/* fec */
+static void __init apf28dev_fec1_reset(void)
+{
+	int ret;
+
+	/* Reset fec phy */
+	ret = gpio_request(APF28DEV_FEC_PHY_RESET, "fec-phy-reset");
+	if (ret) {
+		pr_err("Failed to request gpio fec-phy-%s: %d\n", "reset", ret);
+		return;
+	}
+
+	gpio_direction_output(APF28DEV_FEC_PHY_RESET, 0);
+	mdelay(1);
+	gpio_set_value(APF28DEV_FEC_PHY_RESET, 1);
+}
+
+static struct fec_platform_data mx28_fec1_pdata __initdata = {
+	.phy = PHY_INTERFACE_MODE_RMII,
+};
+
+/* mxsfb (lcdif) */
+static struct fb_videomode apf28dev_video_modes[] = {
+	{
+		.name		= "Chimei-LW700AT9003",
+		.refresh	= 60,
+		.xres		= 800,
+		.yres		= 480,
+		.pixclock	= 30303, /* picosecond */
+		.left_margin	= 96,
+		.right_margin	= 96,
+		.upper_margin	= 20,
+		.lower_margin	= 21,
+		.hsync_len	= 64,
+		.vsync_len	= 4,
+	/*	.sync		= FB_SYNC_CLK_IDLE_EN, ?? */
+		.vmode		= FB_VMODE_NONINTERLACED,
+	},
+};
+
+static const struct mxsfb_platform_data apf28dev_mxsfb_pdata __initconst = {
+	.mode_list	= apf28dev_video_modes,
+	.mode_count	= ARRAY_SIZE(apf28dev_video_modes),
+	.default_bpp	= 16,
+	.ld_intf_width	= STMLCDIF_18BIT,
+};
+
+static struct mxs_mmc_platform_data apf28dev_mmc0_pdata __initdata = {
+	.flags = SLOTF_4_BIT_CAPABLE,
+};
+
+static struct spi_board_info spi_board_info[] __initdata = {
+	{
+		.modalias = "spidev",
+		.max_speed_hz = 8000000,
+		.bus_num = 2, /* SSPI2 */
+		.chip_select = 0,
+	}
+};
+
+void __init apf28dev_init(void)
+{
+	printk("--- %s\n", __func__);
+
+	mxs_iomux_setup_multiple_pads(apf28dev_pads, ARRAY_SIZE(apf28dev_pads));
+
+	mx28_add_auart0();
+	mx28_add_auart1();
+	mx28_add_auart2();
+
+	apf28dev_fec1_reset();
+	mx28_add_fec(1, &mx28_fec1_pdata);
+#ifdef APF28DEV_CAN
+	mx28_add_flexcan(0, NULL);
+#else
+	mx28_add_auart3();
+#endif
+	mx28_add_mxsfb(&apf28dev_mxsfb_pdata);
+
+	mx28_add_mxs_mmc(0, &apf28dev_mmc0_pdata);
+
+	mx28_add_mxs_i2c(0);
+
+	spi_register_board_info(spi_board_info, ARRAY_SIZE(spi_board_info));
+	mx28_add_mxs_spi(2);
+}
+EXPORT_SYMBOL_GPL(apf28dev_init);
Index: linux-3.4.48/arch/arm/mach-mxs/mach-apf28.c
===================================================================
--- linux-3.4.48.orig/arch/arm/mach-mxs/mach-apf28.c	2013-06-11 06:31:03.183290567 +0200
+++ linux-3.4.48/arch/arm/mach-mxs/mach-apf28.c	2013-06-11 06:31:03.195290632 +0200
@@ -115,6 +115,19 @@
 	.max_chip_count = 1,
 };
 
+/* Get baseboard */
+static char apf28_baseboard[16] = "apf28dev";
+
+static int __init apf28_get_baseboard(char *options)
+{
+	strncpy(apf28_baseboard, options, sizeof(apf28_baseboard));
+
+	return 0;
+}
+__setup("baseboard=", apf28_get_baseboard);
+
+extern void __init apf28dev_init(void);
+
 static void __init apf28_init(void)
 {
 	mxs_iomux_setup_multiple_pads(apf28_pads, ARRAY_SIZE(apf28_pads));
@@ -124,6 +137,12 @@
 
 	apf28_fec_reset();
 	mx28_add_fec(0, &mx28_fec0_pdata);
+
+	printk("--- APF28 baseboard: (%s)\n", apf28_baseboard);
+#ifdef CONFIG_MACH_APF28_DEV
+	if (!strcmp(apf28_baseboard, "apf28dev"))
+               apf28dev_init();
+#endif
 }
 
 static void __init apf28_timer_init(void)
