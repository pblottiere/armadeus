Add Armadeus systems APF28 SOM support.

Signed-off-by: Julien Boibessot <julien.boibessot@armadeus.com>

Index: linux-3.4.37/arch/arm/mach-mxs/Kconfig
===================================================================
--- linux-3.4.37.orig/arch/arm/mach-mxs/Kconfig	2013-03-20 21:05:12.000000000 +0100
+++ linux-3.4.37/arch/arm/mach-mxs/Kconfig	2013-04-08 14:27:12.000000000 +0200
@@ -107,4 +107,15 @@
 	bool "Support Bluegiga APX4 Development Kit"
 	select MODULE_APX4
 
+config MACH_APF28
+	bool "Armadeus APF28 module"
+	select SOC_IMX28
+	select MXS_HAVE_AMBA_DUART
+	select MXS_HAVE_PLATFORM_FEC
+	select MXS_HAVE_PLATFORM_MXS_SPI
+	select MXS_HAVE_PLATFORM_GPMI_NAND
+	help
+	  Include support for the Armadeus systems APF28 SOM. This includes
+	  specific configurations for the module and its peripherals.
+
 endif
Index: linux-3.4.37/arch/arm/mach-mxs/Makefile
===================================================================
--- linux-3.4.37.orig/arch/arm/mach-mxs/Makefile	2013-03-20 21:05:12.000000000 +0100
+++ linux-3.4.37/arch/arm/mach-mxs/Makefile	2013-04-08 14:26:43.000000000 +0200
@@ -14,5 +14,6 @@
 obj-$(CONFIG_MACH_APX4DEVKIT) += mach-apx4devkit.o
 obj-$(CONFIG_MODULE_TX28) += module-tx28.o
 obj-$(CONFIG_MACH_TX28)    += mach-tx28.o
+obj-$(CONFIG_MACH_APF28)	+= mach-apf28.o
 
 obj-y += devices/
Index: linux-3.4.37/arch/arm/mach-mxs/mach-apf28.c
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ linux-3.4.37/arch/arm/mach-mxs/mach-apf28.c	2013-04-08 14:26:43.000000000 +0200
@@ -0,0 +1,144 @@
+/*
+ * Copyright 2011 Armadeus systems.
+ *
+ * Based on code which is:
+ * Copyright 2010 Freescale Semiconductor, Inc. All Rights Reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include <linux/delay.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/clk.h>
+
+#include <asm/mach-types.h>
+#include <asm/mach/arch.h>
+#include <asm/mach/time.h>
+
+#include <mach/common.h>
+#include <mach/iomux-mx28.h>
+
+#include "devices-mx28.h"
+
+#define APF28_FEC_PHY_RESET	MXS_GPIO_NR(4, 13)
+
+static const iomux_cfg_t apf28_pads[] __initconst = {
+	/* duart */
+	MX28_PAD_PWM0__DUART_RX | MXS_PAD_CTRL,
+	MX28_PAD_PWM1__DUART_TX | MXS_PAD_CTRL,
+
+#define MXS_PAD_FEC	(MXS_PAD_8MA | MXS_PAD_3V3 | MXS_PAD_PULLUP)
+	/* FEC0 */
+	MX28_PAD_ENET0_MDC__ENET0_MDC | MXS_PAD_FEC,
+	MX28_PAD_ENET0_MDIO__ENET0_MDIO | MXS_PAD_FEC,
+	MX28_PAD_ENET0_RX_EN__ENET0_RX_EN | MXS_PAD_FEC,
+	MX28_PAD_ENET0_RXD0__ENET0_RXD0 | MXS_PAD_FEC,
+	MX28_PAD_ENET0_RXD1__ENET0_RXD1 | MXS_PAD_FEC,
+	MX28_PAD_ENET0_TX_EN__ENET0_TX_EN | MXS_PAD_FEC,
+	MX28_PAD_ENET0_TXD0__ENET0_TXD0 | MXS_PAD_FEC,
+	MX28_PAD_ENET0_TXD1__ENET0_TXD1 | MXS_PAD_FEC,
+	MX28_PAD_ENET_CLK__CLKCTRL_ENET | MXS_PAD_FEC,
+	/* phy reset line */
+	MX28_PAD_ENET0_RX_CLK__GPIO_4_13 | MXS_PAD_CTRL,
+
+#define MXS_NAND_PAD_VOLTAGE MXS_PAD_3V3
+	/* NAND */
+	MX28_PAD_GPMI_D00__GPMI_D0 |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_D01__GPMI_D1 |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_D02__GPMI_D2 |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_D03__GPMI_D3 |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_D04__GPMI_D4 |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_D05__GPMI_D5 |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_D06__GPMI_D6 |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_D07__GPMI_D7 |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_CE0N__GPMI_CE0N |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_RDY0__GPMI_READY0 |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_NOPULL),
+	MX28_PAD_GPMI_RDN__GPMI_RDN |
+		(MXS_PAD_8MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_PULLUP),
+	MX28_PAD_GPMI_WRN__GPMI_WRN |
+		(MXS_PAD_8MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_PULLUP),
+	MX28_PAD_GPMI_ALE__GPMI_ALE |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_PULLUP),
+	MX28_PAD_GPMI_CLE__GPMI_CLE |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_PULLUP),
+	MX28_PAD_GPMI_RESETN__GPMI_RESETN |
+		(MXS_PAD_4MA | MXS_NAND_PAD_VOLTAGE | MXS_PAD_PULLUP),
+};
+
+/* FEC */
+static void __init apf28_fec_reset(void)
+{
+	int ret;
+	struct clk *clk;
+
+	/* Enable fec phy clock */
+	clk = clk_get_sys("pll2", NULL);
+	if (!IS_ERR(clk))
+		clk_enable(clk);
+
+	/* Reset fec phy */
+	ret = gpio_request(APF28_FEC_PHY_RESET, "fec-phy-reset");
+	if (ret) {
+		pr_err("Failed to request gpio fec-phy-reset: %d\n", ret);
+		return;
+	}
+
+	gpio_direction_output(APF28_FEC_PHY_RESET, 0);
+	mdelay(1);
+	gpio_set_value(APF28_FEC_PHY_RESET, 1);
+}
+
+static struct fec_platform_data mx28_fec0_pdata __initdata = {
+	.phy = PHY_INTERFACE_MODE_RMII,
+};
+
+static struct gpmi_nand_platform_data apf28_nand_pdata __initdata = {
+	.max_chip_count = 1,
+};
+
+static void __init apf28_init(void)
+{
+	mxs_iomux_setup_multiple_pads(apf28_pads, ARRAY_SIZE(apf28_pads));
+
+	mx28_add_duart();
+	mx28_add_gpmi_nand(&apf28_nand_pdata);
+
+	apf28_fec_reset();
+	mx28_add_fec(0, &mx28_fec0_pdata);
+}
+
+static void __init apf28_timer_init(void)
+{
+	mx28_clocks_init();
+}
+
+static struct sys_timer apf28_timer = {
+	.init	= apf28_timer_init,
+};
+
+MACHINE_START(APF28, "Armadeus APF28")
+	/* Maintainer: Julien Boibessot <julien.boibessot@armadeus.com> */
+	.map_io		= mx28_map_io,
+	.init_irq	= mx28_init_irq,
+	.init_machine	= apf28_init,
+	.timer		= &apf28_timer,
+MACHINE_END
