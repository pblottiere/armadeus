Add support for APF27 to Freescale's VPU test tools.

Signed-off-by: Julien Boibessot <julien.boibessot@armadeus.com>

diff -X ../project_build_armv5te/apf27/linux-2.6.27.13/Documentation/dontdiff -urN misc-20071002.org/lib/vpu/vpu_io.c misc-20071002/lib/vpu/vpu_io.c
--- misc-20071002.org/lib/vpu/vpu_io.c	2009-03-18 08:45:44.000000000 +0100
+++ misc-20071002/lib/vpu/vpu_io.c	2009-03-18 12:16:47.000000000 +0100
@@ -386,7 +386,7 @@
 	if (strlen(cpu) == 0) {
 		printf("can't get the chip info.\n");
 		return -1;
-	} else if (strstr(cpu, "MX27") == NULL) {
+	} else if (strstr(cpu, "APF27") == NULL) {
 		printf("VPU does not support %s\n", cpu);
 		return -1;
 	}
@@ -398,7 +398,7 @@
 		DPRINTF("MX27 TO2.0\n");
 		return MX27_REV2;
 	} else {
-		DPRINTF("MX27 TO1\n");
-		return MX27_REV1;
+		DPRINTF("MX27 TO2.2\n");
+		return MX27_REV3;
 	}
 }
diff -X ../project_build_armv5te/apf27/linux-2.6.27.13/Documentation/dontdiff -urN misc-20071002.org/lib/vpu/vpu_io.h misc-20071002/lib/vpu/vpu_io.h
--- misc-20071002.org/lib/vpu/vpu_io.h	2009-03-18 08:45:44.000000000 +0100
+++ misc-20071002/lib/vpu/vpu_io.h	2009-03-18 12:17:08.000000000 +0100
@@ -49,6 +49,7 @@
 
 #define MX27_REV1		0x0882101D
 #define MX27_REV2		0x1882101D
+#define MX27_REV3		0x2882101D
 
 typedef void (*vpu_callback) (int status);
 
diff -X ../project_build_armv5te/apf27/linux-2.6.27.13/Documentation/dontdiff -urN misc-20071002.org/lib/vpu/vpu_lib.c misc-20071002/lib/vpu/vpu_lib.c
--- misc-20071002.org/lib/vpu/vpu_lib.c	2009-03-18 08:45:44.000000000 +0100
+++ misc-20071002/lib/vpu/vpu_lib.c	2009-04-07 16:00:31.000000000 +0200
@@ -92,7 +92,7 @@
  */
 RetCode vpu_Init(PhysicalAddress workBuf)
 {
-	int i;
+	int i, rev_id;
 	Uint32 data;
 	Uint32 virt_codeBuf;
 	CodecInst *pCodecInst;
@@ -109,7 +109,8 @@
 	virt_paraBuf2 = (unsigned long *)(virt_codeBuf + CODE_BUF_SIZE +
 					  WORK_BUF_SIZE);
 
-	if (getChipVersion() == MX27_REV2) {
+	rev_id = getChipVersion();
+	if ((rev_id == MX27_REV2) || (rev_id == MX27_REV3)) {
 		/* Copy full Microcode to Code Buffer allocated on SDRAM */
 		for (i = 0; i < sizeof(bit_code2) / sizeof(bit_code2[0]); i += 2) {
 			data = (unsigned int)((bit_code2[i] << 16) | bit_code2[i + 1]);
