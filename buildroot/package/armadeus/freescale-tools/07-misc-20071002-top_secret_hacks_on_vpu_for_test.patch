diff -X ../project_build_armv5te/apf27/linux-2.6.27.13/Documentation/dontdiff -urN misc-20071002.org/test/mxc_vpu_test/vpu_codec.c misc-20071002/test/mxc_vpu_test/vpu_codec.c
--- misc-20071002.org/test/mxc_vpu_test/vpu_codec.c	2009-03-18 08:45:40.000000000 +0100
+++ misc-20071002/test/mxc_vpu_test/vpu_codec.c	2009-04-04 10:53:03.000000000 +0200
@@ -973,6 +973,18 @@
 	return &codec_thread[usr_config->index];
 }
 
+
+void launch_cmd(char *cmd)
+{
+	int ret = 0;
+
+	printf("%s",cmd);
+	ret = system(cmd);
+	if (ret) {
+		printf("error when launching %s\n", cmd);
+	}
+}
+
 /* for this test, only 1 reference*/
 /* no rotation*/
 void *EncodeTest(void *param)
@@ -1178,6 +1190,28 @@
 		(unsigned int)frameBuf[srcFrameIdx].bufCb,
 		(unsigned int)frameBuf[srcFrameIdx].bufCr);
 	frameIdx = 0;
+	printf("Sleeping\n");
+	/* Y */
+	char cmd[64];
+	sprintf(cmd, "imxregs PRP_DEST_Y_PTR 0x%08x\n", (unsigned int)frameBuf[srcFrameIdx].bufY);
+	launch_cmd(cmd);
+	sprintf(cmd, "imxregs PRP_SOURCE_Y_PTR 0x%08x\n", (unsigned int)frameBuf[srcFrameIdx].bufY);
+	launch_cmd(cmd);
+	/* U */
+	sprintf(cmd, "imxregs PRP_DEST_CB_PTR 0x%08x\n", (unsigned int)frameBuf[srcFrameIdx].bufCb); 
+	launch_cmd(cmd);
+	sprintf(cmd, "imxregs PRP_SOURCE_CB_PTR 0x%08x\n", (unsigned int)frameBuf[srcFrameIdx].bufCb);
+	launch_cmd(cmd);
+	/* V */
+	sprintf(cmd, "imxregs PRP_DEST_CR_PTR 0x%08x\n", (unsigned int)frameBuf[srcFrameIdx].bufCr);
+	launch_cmd(cmd);
+	sprintf(cmd, "imxregs PRP_SOURCE_CR_PTR 0x%08x\n", (unsigned int)frameBuf[srcFrameIdx].bufCr);
+	launch_cmd(cmd);
+	/* Channel 1+2 active */
+	sprintf(cmd,"imxregs PRP_CNTL 0x00000637\n");
+	launch_cmd(cmd);
+	sleep(2);
+
 	encParam.sourceFrame = &frameBuf[srcFrameIdx];
 	encParam.quantParam = 30;
 	encParam.forceIPicture = 0;
@@ -1347,7 +1381,7 @@
 			}
 		}
 
-		ret =
+/*		ret =
 		    FillYuvImageMulti(usr_config->src, usr_config->src_name,
 				      frameBuf[srcFrameIdx].bufY +
 				      FrameBufPool[srcFrameIdx].CurrImage.
@@ -1356,14 +1390,15 @@
 				      phy_addr, (void *)&prp_buffer, picWidth,
 				      picHeight,
 				      ((EncInst *) handle)->instIndex,
-				      CODEC_READING, rot_en, output_ratio, 0);
+				      CODEC_READING, rot_en, output_ratio, 0);*/
+
 		if (usr_config->src == PATH_EMMA) {
-			frameBuf[srcFrameIdx].bufY =
-			    cap_buffers[prp_buffer.index].offset;
-			frameBuf[srcFrameIdx].bufCb =
-			    frameBuf[srcFrameIdx].bufY + image_size;
-			frameBuf[srcFrameIdx].bufCr =
-			    frameBuf[srcFrameIdx].bufCb + (image_size >> 2);
+			frameBuf[srcFrameIdx].bufY = (unsigned int)frameBuf[srcFrameIdx].bufY; //0xb3bc0000;
+			    //cap_buffers[prp_buffer.index].offset;
+			frameBuf[srcFrameIdx].bufCb = (unsigned int)frameBuf[srcFrameIdx].bufCb; //0xb3bd2c00;
+			    //frameBuf[srcFrameIdx].bufY + image_size;
+			frameBuf[srcFrameIdx].bufCr = (unsigned int)frameBuf[srcFrameIdx].bufCr; //0xb3bd7700;
+// 			    frameBuf[srcFrameIdx].bufCb + (image_size >> 2);
 		}
 		if (ret < 0) {
 			printf("Encoder finished\n");
